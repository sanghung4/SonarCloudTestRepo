plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
    id 'androidx.navigation.safeargs.kotlin'
    id 'kotlin-parcelize'
    id("com.apollographql.apollo").version("2.5.4")
    id("de.mannodermaus.android-junit5")
    id 'com.google.gms.google-services'
    id 'com.google.firebase.crashlytics'
}

apply from: "../buildscripts/jacoco.gradle"
apply from: "../buildscripts/coveralls.gradle"

android {
    compileSdkVersion 33
    packagingOptions {
        resources {
            pickFirsts += ['META-INF/AL2.0', 'META-INF/LGPL2.1']
        }
    }

    testOptions {
        unitTests.returnDefaultValues = true
        unitTests.all {
            useJUnitPlatform()
        }
    }

    defaultConfig {
        applicationId "com.reece.pickingapp"
        minSdkVersion 26
        targetSdkVersion 33
        versionCode 1
        versionName "1.0.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"


        android.defaultConfig.manifestPlaceholders = [
                "appAuthRedirectScheme": "com.reece.pickingapp"
        ]
        if (project.rootProject.file('local.properties').exists()) {
            Properties properties = new Properties()
            properties.load(project.rootProject.file('local.properties').newDataInputStream())
            buildConfigField "String", "ORG_URL", properties.getProperty('authn.orgUrl', '""')
        }

    }

    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
        release {
            storeFile file('release.keystore')
            storePassword 'android'
            keyAlias 'androidreleasekey'
            keyPassword 'android'
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField "String", "API_BASE_URL", "\"https://api.internal-dev.reecedev.us/\""
            testCoverageEnabled true
        }
        alpha {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField "String", "API_BASE_URL", "\"https://api.internal-test.reecedev.us/\""
            signingConfig signingConfigs.debug
        }
        beta {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField "String", "API_BASE_URL", "\"https://api.internal-test.reecedev.us/\""
            signingConfig signingConfigs.debug
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField "String", "API_BASE_URL", "\"https://api.internal-prod.reecedev.us/\""
            signingConfig signingConfigs.release
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
        coreLibraryDesugaringEnabled true
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        viewBinding true
        dataBinding true
        compose true
    }
    composeOptions{
        kotlinCompilerExtensionVersion '1.1.1'
    }
}

apollo {
    // instruct the compiler to generate Kotlin models
    generateKotlinModels.set(true)
}

dependencies {

    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.1.5'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'

    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    // Material / Layout
    implementation 'com.google.android.material:material:1.6.0-alpha03'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'
    implementation 'androidx.activity:activity-compose:1.4.0'
    implementation 'androidx.compose.material:material:1.1.1'
    implementation 'androidx.compose.ui:ui-tooling:1.1.1'

    // Lifecycle Runtime
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:2.4.1"

    // Navigation
    implementation "androidx.navigation:navigation-fragment-ktx:$fragment_component_version"
    implementation "androidx.navigation:navigation-ui-ktx:$fragment_component_version"

    // Apollo GraphQL
    implementation "com.apollographql.apollo:apollo-runtime:$apollo_version"
    // optional: for coroutines support
    implementation "com.apollographql.apollo:apollo-coroutines-support:$apollo_version"

    // Coroutine Image Loader
    implementation "io.coil-kt:coil:1.1.1"

    // Hilt
    implementation "com.google.dagger:hilt-android:$hilt_version"
    implementation "androidx.legacy:legacy-support-v4:$legacy_support_v4_version"
    kapt "com.google.dagger:hilt-compiler:$hilt_version"
    implementation "androidx.hilt:hilt-lifecycle-viewmodel:$hilt_compiler_version"
    implementation 'com.squareup.okhttp3:okhttp:4.9.3'

    // Okta
    // Ensure that all dependencies are compatible using the Bill of Materials (BOM).
    implementation(platform('com.okta.kotlin:bom:1.0.0'))

    // Add the web-authentication-ui SDK to the project.
    implementation('com.okta.kotlin:auth-foundation-bootstrap')
    implementation('com.okta.kotlin:web-authentication-ui')

    // These packages are used in the Okta Mobile SDK code snippets.
    implementation('androidx.lifecycle:lifecycle-viewmodel-ktx:2.5.1')
    implementation('androidx.activity:activity-ktx:1.5.1')

    // Firebase

    implementation platform('com.google.firebase:firebase-bom:29.3.1')
    implementation 'com.google.firebase:firebase-analytics-ktx'
    implementation 'com.google.firebase:firebase-crashlytics-ktx'

    // Testing
    testImplementation 'io.kotest:kotest-runner-junit5:5.3.1'
    testImplementation 'io.kotest:kotest-assertions-core:5.3.1'
    testImplementation 'io.kotest:kotest-property:5.3.1'
    testImplementation "io.mockk:mockk:1.12.3"
    testImplementation "io.mockk:mockk-agent-jvm:1.12.3"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:1.6.4"
    androidTestImplementation "androidx.arch.core:core-testing:2.1.0"
    testImplementation "androidx.arch.core:core-testing:2.2.0"
    // Room Test
    // optional - Test helpers
    testImplementation("androidx.room:room-testing:$room_version")


    // (Required) Writing and executing Unit Tests on the JUnit Platform
    testImplementation("org.junit.jupiter:junit-jupiter-api:5.8.2")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.8.2")

    // (Optional) If you need "Parameterized Tests"
    testImplementation("org.junit.jupiter:junit-jupiter-params:5.8.2")

    // (Optional) If you also have JUnit 4-based tests
    testImplementation("junit:junit:4.13.2")
    testRuntimeOnly("org.junit.vintage:junit-vintage-engine:5.8.2")

    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    //compose/////////////////////////////////////////////

    // Integration with activities
    implementation 'androidx.activity:activity-compose:1.4.0'
    // Compose Material Design
    implementation 'androidx.compose.material:material:1.1.1'
    // Animations
    implementation 'androidx.compose.animation:animation:1.1.1'
    // Tooling support (Previews, etc.)
    implementation 'androidx.compose.ui:ui-tooling:1.1.1'
    // Integration with ViewModels
    implementation 'androidx.lifecycle:lifecycle-viewmodel-compose:2.5.0-alpha03'
    // UI Tests
    androidTestImplementation 'androidx.compose.ui:ui-test-junit4:1.1.1'
    // When using a AppCompat theme
    implementation "com.google.accompanist:accompanist-appcompat-theme:0.16.0"

    // CameraX core library
    implementation "androidx.camera:camera-core:1.1.0-alpha10"

    // CameraX Camera2 extensions
    implementation "androidx.camera:camera-camera2:1.1.0-alpha10"

    // CameraX Lifecycle library
    implementation "androidx.camera:camera-lifecycle:1.1.0-alpha10"

    // CameraX View class
    implementation 'androidx.camera:camera-view:1.0.0-alpha30'

    //ML Kit
    implementation 'com.google.android.gms:play-services-mlkit-barcode-scanning:18.1.0'
    implementation 'com.google.code.gson:gson:2.8.5'

    //Room
    implementation("androidx.room:room-runtime:$room_version")
    annotationProcessor("androidx.room:room-compiler:$room_version")
    // To use Kotlin annotation processing tool (kapt)
    kapt("androidx.room:room-compiler:$room_version")
    // optional - Kotlin Extensions and Coroutines support for Room
    implementation("androidx.room:room-ktx:$room_version")

}
def oktaProperties = new Properties()
rootProject.file("okta.properties").withInputStream { oktaProperties.load(it) }
android.defaultConfig {
    buildConfigField "String", 'DISCOVERY_URL', "\"${oktaProperties.getProperty('discoveryUrl')}\""
    buildConfigField "String", 'CLIENT_ID', "\"${oktaProperties.getProperty('clientId')}\""
    buildConfigField "String", 'SIGN_IN_REDIRECT_URI', "\"${oktaProperties.getProperty('signInRedirectUri')}\""
    buildConfigField "String", 'SIGN_OUT_REDIRECT_URI', "\"${oktaProperties.getProperty('signOutRedirectUri')}\""
}
static def parseScheme(String uri) {
    def index = uri.indexOf(':/')
    if (index == -1) {
        throw new IllegalStateException("Scheme is not in a valid format.")
    }
    return uri.substring(0, index)
}

android.defaultConfig.manifestPlaceholders = [
        "webAuthenticationRedirectScheme": parseScheme(oktaProperties.getProperty('signInRedirectUri'))
]

