create or replace view MORSCO_EDW.INNOVATE_TM_SCHEMA.INNOVATION_PRODUCT(
	INTERNAL_ITEM_NBR,
	ID,
	ERP_PRODUCT_ID,
	VENDOR_PART_NBR,
	UPC_ID,
	UNSPC_ID,
	SEARCH_KEYWORD_TEXT,
	CATEGORY_1_NAME,
	CATEGORY_2_NAME,
	CATEGORY_3_NAME,
	WEB_DESCRIPTION,
	PRODUCT_OVERVIEW_DESCRIPTION,
	MFR_FULL_NAME,
	FEATURE_BENEFIT_LIST_TEXT,
	THUMBNAIL_IMAGE_URL_NAME,
	MEDIUM_IMAGE_URL_NAME,
	FULL_IMAGE_URL_NAME,
	MFR_CATALOG_DOC_FILE_NAME,
	MFR_SPEC_TECH_DOC_FILE_NAME,
	MFR_MSDS_DOC_FILE_NAME,
	MFR_INSTALL_INSTRUCTION_DOC_FILE_NAME,
	MFR_ITEM_DATA_DOC_FILE_NAME,
	LOW_LEAD_COMPLIANT_FLAG,
	MERCURY_FREE_FLAG,
	WATER_SENSE_COMPLIANT_FLAG,
	ENERGY_STAR_FLAG,
	HAZARDOUS_MATERIAL_FLAG,
	PACKAGE_WEIGHT_NBR,
	PACKAGE_WIDTH_NBR,
	PACKAGE_LENGTH_NBR,
	PACKAGE_HEIGHT_NBR,
	PACKAGE_VOLUME_NBR,
	PACKAGE_VOLUME_UOM_CODE,
	PACKAGE_WEIGHT_UOM_CODE,
	MINIMUM_INCREMENT_QTY,
	PRODUCT_SEARCH_BOOST_1_NBR,
	PRODUCT_SEARCH_BOOST_2_NBR,
	PRODUCT_SEARCH_BOOST_3_NBR,
	PRODUCT_SEARCH_BOOST_4_NBR,
	PRODUCT_LINE,
	MATERIAL,
	COLOR_FINISH,
	SIZE,
	LENGTH,
	WIDTH,
	HEIGHT,
	DEPTH,
	VOLTAGE,
	TONNAGE,
	BTU,
	PRESSURE_RATING,
	TEMPERATURE_RATING,
	INLET_SIZE,
	FLOW_RATE,
	CAPACITY,
	WATTAGE,
	PRODUCT_SOLD_COUNT,
	CUSTOMER_NUMBER_LIST,
	CUSTOMER_PART_NUMBER_LIST,
	TECH_SPECS_LIST,
	IN_STOCK_LOCATION_LIST,
	PRODUCT_BRANCH_EXCLUSION,
	LAST_UPDATE_DATE
) as
/*Created by PMcCollum (Slalom) 7/28/2021 based upon Product Search requirements */
-- Altered 10/11/2021 - Tim P
---- Switched the view to look at PDWData (2.0) instead of the old PDWCatalog
-- Altered 10/19/2021 - Tim P
---- Changed the MAX(CASE WHEN) for Web description to add a space to the beginning of the PRODDESC so if there is a meta available, the meta will never be "Less" than the PRODDESC
---- Also, per David Wood, changed the filter for products to also exclude the IGN_AVAI price line ID

/*
CTE_PDWCATALOG comments
- Since the STAGE tables are reflective of when data changed and new rows are inserted, a window function is used to get the most current change for the unique key
- The data is limited by the METAID value since that is only reflective of inscope data
*/
WITH CTE_PDWCATALOG AS (
SELECT A.PDWID, A.ETLSOURCEID, METAID, METAVALUE, MAX(LOADDT) AS LAST_CHANGED_DATE
FROM (
  SELECT * FROM
  (
    SELECT *, ROW_NUMBER() OVER(PARTITION BY PDWID, METAID ORDER BY PDWID DESC, LOADDT DESC) AS RN FROM STAGE.PDWDATA
      WHERE METAID IN ('3','82','83','84','85','86','87','88','89','90','91','92','93',
      '94','95','96','97','98','99','100','101','102','103','104','105','106','107','108','109',
      '110','111','112','113','114', '115','116','117','118','119','120','121','122','123','124',
      '125','126','127','128','129','130','131','132','133','134','135','136','137','138','139',
      '140','141','142','143','144','145','146','147','148','149','150','151','152','153','154',
      '155','156','157','158','159','160','161','162','163','164','165','166','167','168','169',
      '170','171','172','173','174','175','176','177','178','179','180','215','217','221','226',
      '232','234','235','236','238','249','255','265','286','290','291','292','317','364','365','366',
      '70004','70012','70017','70024','70036','70050','70052','70059','70094','70101','70102','70103','70104','70107',
      '70094','389','390','391','392','393','394','395','396','397','398','399','400','401','402','403','404','405')
    )
  WHERE RN = 1) A
  --where
  --  A.PDWID = '3658263'
--INNER JOIN (SELECT PDWID, MAX(PDWID) AS PDWID FROM STAGE.PDWDATA GROUP BY PDWID) B ON A.PDWID = B.PDWID
GROUP BY 1,2,3,4
),

/*
CTE_PDWMETA comments
- Since the STAGE tables are reflective of when data changed and new rows are inserted, a window function is used to get the most current change for the unique key
*/
CTE_PDWMETA AS (
    SELECT FIELDID, DESCRIPTION FROM (SELECT *, ROW_NUMBER() OVER(PARTITION BY FIELDID ORDER BY LOADDT DESC) AS RN FROM STAGE.PDWMETA) WHERE RN = 1
),

/*
CTE_EXCL_BRANCH comments
- Get a list of the branches related to the Priceline
- Since the STAGE tables are reflective of when data changed and new rows are inserted, a window function is used to get the most current change for the unique key
*/

CTE_EXCL_BRANCH AS (
SELECT ETLSOURCEID, PRICELINEID, (ARRAY_AGG(AUTHBRANCHID) WITHIN GROUP (ORDER BY ETLSOURCEID, PRICELINEID, AUTHBRANCHID) )  AS PRODUCT_BRANCH_EXCLUSION
FROM (SELECT *, ROW_NUMBER() OVER(PARTITION BY ETLSOURCEID, PRICELINEID, AUTHBRANCHID ORDER BY LOADDT DESC) AS RN
      FROM STAGE.PRICELINEAUTHBRANCH
      WHERE ETLSOURCEID = 'MSC')
WHERE RN = 1
GROUP BY 1,2
),

/*
CTE_PRODUCT comments
- Since the STAGE tables are reflective of when data changed and new rows are inserted, a window function is used to get the most current change for the unique key
- Product data is limited by filter criteria as follows:
-	Product status is ‘active’
-	Price Line does not equal 'MSC-NONSTOCK'
-	Buy Line is not ‘XX’
-	Product description does not indicate it is a demo product ‘<D>’
-	Product description does not include certain special characters
-	The index type is a ‘P’ or is NULL
-	The Product has been in stock within the last 6 months
-   Only Eclipse data is extracted
-   Other filters in this CTE reflect what is in the ODS.PRODUCT view
- STAGE.PRODUCT is joined to STAGE.KEY_PRODUCT since that is reflective of the ODS.PRODUCT view
- STAGE.PRODUCT is joined to CONSOLIDATION.SNAPSHOT_PRODBRANCHAQ for purposes of establishing in stock branches and to filter Products out if not in stock within the last 6 months
*/
CTE_PRODUCT AS (
SELECT PDWID, PRODUCTID, PRICELINEID, PRODDESC, ERPPRODUCTID, ETLSOURCEID, KEYWORDS, CATALOGNUMBER, UPC, PRODUCT_SOLD_COUNT,
       CASE WHEN IN_STOCK_LOCATION_LIST IS NOT NULL THEN '"'||'in_stock_location'||'"'||': '||CAST(IN_STOCK_LOCATION_LIST AS VARCHAR) ELSE NULL END AS IN_STOCK_LOCATION_LIST,
       CASE WHEN PRODUCT_BRANCH_EXCLUSION IS NOT NULL THEN '"'||'product_branch_exclusion'||'"'||': '||CAST(PRODUCT_BRANCH_EXCLUSION AS VARCHAR) ELSE NULL END AS PRODUCT_BRANCH_EXCLUSION,
       LOADDT AS LAST_CHANGED_DATE
FROM (
  SELECT PROD.PDWID, PROD.PRODUCTID AS ERPPRODUCTID, PROD.ETLSOURCEID || '-' || PROD.PRODUCTID as PRODUCTID, PROD.PRICELINEID, PROD.PRODDESC, PROD.ETLSOURCEID, PROD.KEYWORDS, PROD.CATALOGNUMBER, PROD.UPC, PRODUCT_SOLD_COUNT,
         IN_STOCK_LOCATION_LIST, PRODUCT_BRANCH_EXCLUSION, PROD.LOADDT
  FROM (SELECT * FROM (SELECT *, ROW_NUMBER() OVER(PARTITION BY ETLSOURCEID, PRODUCTID ORDER BY EXPORTDATE DESC, LOADDT DESC) AS RN FROM STAGE.PRODUCT) WHERE RN = 1
       -- AND PRODUCTID = '90903'
       ) PROD
  INNER JOIN STAGE.KEY_PRODUCT KPRD
    ON PROD.ETLSOURCEID = KPRD.ETLSOURCEID AND PROD.PRODUCTID = KPRD.PRODUCTID
--Get only Products that have been in stock within the last 6 months
//  INNER JOIN (SELECT ETLSOURCEID, PRODBRANCHID, SUM(AVAILABLEQTY) AS SUMAQ
//              FROM CONSOLIDATION.SNAPSHOT_PRODBRANCHAQ
//              WHERE SNAPSHOTDATE >= DATEADD(MM, -6, GETDATE())
//              GROUP BY 1,2
//              HAVING SUM(AVAILABLEQTY) > 0 ) STOCK
//    ON STOCK.PRODBRANCHID = PROD.PRODUCTID AND STOCK.ETLSOURCEID = PROD.ETLSOURCEID
--List of locations with Product in stock
  LEFT JOIN (
    SELECT ETLSOURCEID, PRODBRANCHID, ARRAY_AGG(BRANCHID || '|' || SUMAQ) WITHIN GROUP (ORDER BY ETLSOURCEID, PRODBRANCHID) AS IN_STOCK_LOCATION_LIST
    FROM (SELECT STOCK.ETLSOURCEID, STOCK.PRODBRANCHID, STOCK.BRANCHID, SUM(AVAILABLEQTY) AS SUMAQ
        FROM CONSOLIDATION.SNAPSHOT_PRODBRANCHAQ STOCK
        WHERE SNAPSHOTDATE >= CURRENT_DATE-1
        GROUP BY 1,2,3
        HAVING SUM(AVAILABLEQTY) > 0) STOCK
    GROUP BY 1,2) INSTOCK
    ON INSTOCK.PRODBRANCHID = PROD.PRODUCTID AND INSTOCK.ETLSOURCEID = PROD.ETLSOURCEID
--Calculate the number of orders a product was on for the last year
  LEFT JOIN (
  SELECT DTL.ETLSOURCEID, DTL.PRODUCTID, COUNT(DISTINCT DTL.LEDGERID) AS PRODUCT_SOLD_COUNT
    FROM ODS.LEDGERSOHEADER AS HDR
    JOIN ODS.LEDGERSODETAIL AS DTL ON HDR.ETLSOURCEID = DTL.ETLSOURCEID
        AND HDR.LEDGERID = DTL.LEDGERID
        AND HDR.VMC = DTL.VMC
        AND HDR.GENID = DTL.GENID
        AND HDR.ETLSOURCEID = 'MSC'
        AND HDR.ORDERSTATUS = 'I'
        AND HDR.SHIPDATE BETWEEN CURRENT_DATE-365 AND CURRENT_DATE
    GROUP BY 1,2) SOLD
   ON SOLD.ETLSOURCEID = PROD.ETLSOURCEID AND SOLD.PRODUCTID = PROD.PRODUCTID
--List of Branches excluded
  LEFT JOIN CTE_EXCL_BRANCH EX_BRANCH
   ON EX_BRANCH.ETLSOURCEID = PROD.ETLSOURCEID AND EX_BRANCH.PRICELINEID = PROD.PRICELINEID
--Product filters
  WHERE 1 = 1
    -- AND PROD.PRODSTATUS = 1
  AND PROD.PRICELINEID NOT IN ('MSC-NONSTOCK', 'IGN_AVAI')
  AND PROD.ETLSOURCEID = 'MSC'
  AND PROD.BUYLINEID <> 'XX'
  AND PROD.PRODDESC NOT LIKE UPPER('%<D>%')
  AND PROD.PRODDESC NOT LIKE '**%'
  AND PROD.PRODDESC NOT LIKE '%%'
  AND (UPPER(PROD.INDEXTYPE) = 'P' OR PROD.INDEXTYPE IS NULL)
    )
),

/*
CTE_ENTITYPNIDS comments
- Since the STAGE tables are reflective of when data changed and new rows are inserted, a window function is used to get the most current change for the unique key
*/
CTE_ENTITYPNIDS AS (
    SELECT ECLIPSEPARTNUM, ETLSOURCEID, ENTITYID, CUSTOMERPARTNUM, LOADDT AS LAST_CHANGED_DATE
        FROM (SELECT *, ROW_NUMBER() OVER(PARTITION BY ENTITYPNID ORDER BY LOADDT DESC) AS RN FROM STAGE.ENTITYPNIDS WHERE CUSTOMERPARTNUM NOT LIKE '%%') WHERE RN=1
),

/*
CTE_CUSTOMER_PN comments
- This assembles the list of customers and part numbers associated to a Product
- The list of customers and parts and assembled in 2 respective lists and in JSON form
*/
CTE_CUSTOMER_PN AS (
SELECT PROD.PDWID, PROD.PRODUCTID, PROD.ETLSOURCEID,
  '"'||'customer_number'||'":'||CAST(ARRAY_AGG(ENTITYID) WITHIN GROUP (ORDER BY PROD.ETLSOURCEID, PROD.PRODUCTID ) AS VARCHAR) AS CUSTOMER_NBR_LIST,
  '"'||'customer_part_number'||'":'||CAST(ARRAY_AGG(CUSTOMERPARTNUM) WITHIN GROUP (ORDER BY PROD.ETLSOURCEID, PROD.PRODUCTID ) AS VARCHAR) AS CUSTOMER_PART_NBR_LIST,
   MAX(ENT.LAST_CHANGED_DATE) AS LAST_CHANGED_DATE
   FROM CTE_ENTITYPNIDS ENT
   INNER JOIN CTE_PRODUCT PROD ON ENT.ECLIPSEPARTNUM = PROD.ERPPRODUCTID AND PROD.ETLSOURCEID = ENT.ETLSOURCEID
  GROUP BY 1,2,3
ORDER BY 2
),

/*
CTE_TECH_SPECS comments
- This assembles the list of technical specification features for a Product
- Each feature is a name/value pair which is placed in JSON format
- Duplicate technical specifications (name) will be deduplicated, essentially taking the first of the duplicate
- METAID/FIELDID is the filter to limit the number of features to 50
- STAGE.PDWMETA (see CTA) is joined to STAGE.PDWCATALOG (see CTE) to match up the name/value pair to a Product technical key to be later joined to the Product
*/
CTE_TECH_SPECS AS (
SELECT DISTINCT PDWID, PRODUCTID, ETLSOURCEID,
  '"'||'technical_specifications'||'"'||': '||'[{'||
  (LISTAGG( DISTINCT TS_NESTED_VALUE,',')
   WITHIN GROUP (ORDER BY TS_NESTED_VALUE )
   OVER (PARTITION BY PRODUCTID ))
  ||'}]' AS TECH_SPECS_LIST
  FROM (SELECT *, ROW_NUMBER() OVER(PARTITION BY PRODUCTID, TS_LABEL ORDER BY TS_SEQ ASC) AS RN FROM
    (
    SELECT PROD.PDWID, PROD.PRODUCTID, PROD.ETLSOURCEID, TS_SEQ,
       MAX(CASE WHEN TECH_SPECS.LABEL IS NOT NULL THEN '"'||REPLACE(LOWER(METAVALUE)||'"',' ','_') ELSE NULL END)||': '||
       MAX(CASE WHEN TECH_SPECS.VALUE IS NOT NULL THEN '"'||REPLACE(METAVALUE,'\"', '\\"')||'"' ELSE ' ' END) AS TS_NESTED_VALUE,
       MAX(CASE WHEN TECH_SPECS.LABEL IS NOT NULL THEN '"'||REPLACE(LOWER(METAVALUE)||'"',' ','_') ELSE NULL END) AS TS_LABEL,
       MAX(TECH_SPECS.VALUE) AS TS_VALUE
    FROM CTE_PDWCATALOG PDWCAT
    INNER JOIN CTE_PRODUCT PROD ON PROD.PDWID = PDWCAT.PDWID AND PROD.ETLSOURCEID = PDWCAT.ETLSOURCEID
    --ASSEMBLE THE NAME AND VALUE PAIR TO BE ABLE TO JOIN UP INTO A LIST
    INNER JOIN (SELECT DISTINCT FIELDID, REPLACE(LABEL,' ','_') AS LABEL, VALUE, TS_SEQ FROM (
            SELECT FIELDID, 'LABEL' AS LABEL, NULL AS VALUE, CAST(REPLACE(DESCRIPTION,'TS ATTRIB NAME','') AS INT) AS TS_SEQ
            FROM CTE_PDWMETA
            WHERE DESCRIPTION LIKE 'TS ATTRIB NAME%'
            AND FIELDID IN ('82','83','84','85','86','87','88','89','90','91',
                            '92','93','94','95','96','97','98','99','100','101',
                            '102','103','104','105','106','107','108','109','110','111',
                            '112','113','114','115','116','117','118','119','120','121',
                            '122','123','124','125','126','127','128','129','130','290')
            AND FIELDID <> '"'
            UNION ALL
            SELECT FIELDID, NULL AS LABEL, 'VALUE' AS VALUE, CAST(REPLACE(DESCRIPTION,'TS ATTRIB VALUE','') AS INT) AS TS_SEQ
            FROM CTE_PDWMETA
            WHERE DESCRIPTION LIKE 'TS ATTRIB VALUE%'
            AND FIELDID IN ('131','132','133','134','135','136','137','138','139','140',
                            '141','142','143','144','145','146','147','148','149','150',
                            '151','152','153','154','155','156','157','158','159','160',
                            '161','162','163','164','165','166','167','168','169','170',
                            '171','172','173','174','175','176','177','178','179','180')
            AND FIELDID <> '"'
          ORDER BY 1 )) TECH_SPECS
    ON PDWCAT.METAID = TECH_SPECS.FIELDID
    GROUP BY 1,2,3,4
    HAVING NVL(TS_NESTED_VALUE,' ') > ' ' AND NVL(TS_VALUE,' ') > ' '
    ORDER BY 2,3)
    ) WHERE RN = 1
)

/*
RPC edited this final query to be column-based instead of returning JSON.  2022-11-07
*/
SELECT

	PROD.PDWID as internal_item_nbr,
	PROD.PRODUCTID as id,
	PROD.PRODUCTID as erp_product_id,

	-- ADDITIONAL PRODUCT CODES
	MAX(CASE WHEN METAID = '3' THEN METAVALUE ELSE PROD.CATALOGNUMBER END) as vendor_part_nbr,
	MAX(CASE WHEN METAID = '70059' THEN METAVALUE ELSE PROD.UPC END) as upc_id,
	MAX(CASE WHEN METAID = '70052' THEN METAVALUE END) as unspc_id,

	-- SEARCH KEYWORDS
	MAX(KEYWORDS) as search_keyword_text,

	-- HIERARCHY
	MAX(CASE WHEN METAID = '364' THEN METAVALUE END) as category_1_name,
	MAX(CASE WHEN METAID = '365' THEN METAVALUE END) as category_2_name,
	MAX(CASE WHEN METAID = '366' THEN METAVALUE END) as category_3_name,

	-- PRODUCT NAME & DESCRIPTION
	LTRIM(MAX(CASE WHEN METAID = '70017' THEN METAVALUE ELSE ' ' || PROD.PRODDESC END)) as web_description,
	MAX(CASE WHEN METAID = '70004' THEN METAVALUE END) as product_overview_description,

	-- MANUFACTURER INFO
	MAX(CASE WHEN METAID = '70024' THEN METAVALUE END) as mfr_full_name,

	-- TECHNICAL, FEATURES AND BENEFITS
	MAX(CASE WHEN METAID = '217' THEN METAVALUE END) as feature_benefit_list_text,

	-- IMAGES
	MAX(CASE WHEN METAID = '70050' THEN METAVALUE END) as thumbnail_image_url_name,
	MAX(CASE WHEN METAID = '234' THEN METAVALUE END) as medium_image_url_name,
	MAX(CASE WHEN METAID = '70012' THEN METAVALUE END) as full_image_url_name,

	-- TECHNICAL DOCUMENTS
	MAX(CASE WHEN METAID = '291' THEN METAVALUE END) as mfr_catalog_doc_file_name,
	MAX(CASE WHEN METAID = '292' THEN METAVALUE END) as mfr_spec_tech_doc_file_name,
	MAX(CASE WHEN METAID = '238' THEN METAVALUE END) as mfr_msds_doc_file_name,
	MAX(CASE WHEN METAID = '226' THEN METAVALUE END) as mfr_install_instruction_doc_file_name,
	MAX(CASE WHEN METAID = '236' THEN METAVALUE END) as mfr_item_data_doc_file_name,

	-- ENVIRONMENTAL OPTIONS
	MAX(CASE WHEN METAID = '232' THEN METAVALUE END) as low_lead_compliant_flag,
	MAX(CASE WHEN METAID = '235' THEN METAVALUE END) as mercury_free_flag,
	MAX(CASE WHEN METAID = '286' THEN METAVALUE END) as water_sense_compliant_flag,
	MAX(CASE WHEN METAID = '215' THEN METAVALUE END) as energy_star_flag,
	MAX(CASE WHEN METAID = '221' THEN METAVALUE END) as hazardous_material_flag,

	-- PACKAGE DIMENSIONS
	MAX(CASE WHEN METAID = '249' THEN METAVALUE END) as package_weight_nbr,
	MAX(CASE WHEN METAID = '70101' THEN METAVALUE END) as package_width_nbr,
	MAX(CASE WHEN METAID = '70102' THEN METAVALUE END) as package_length_nbr,
	MAX(CASE WHEN METAID = '70103' THEN METAVALUE END) as package_height_nbr,
	MAX(CASE WHEN METAID = '70104' THEN METAVALUE END) as package_volume_nbr,
	MAX(CASE WHEN METAID = '70107' THEN METAVALUE END) as package_volume_uom_code,
	MAX(CASE WHEN METAID = '255' THEN METAVALUE END) as package_weight_uom_code,

	-- MINIMUM INCREMENT QUANTITY
	MAX(CASE WHEN METAID = '317' THEN METAVALUE END) as minimum_increment_qty,

	-- BOOST SEARCH VALUES
	MAX(CASE WHEN METAID = '172' AND NVL(METAVALUE, '0') <> '0' THEN METAVALUE END) as product_search_boost_1_nbr,
	MAX(CASE WHEN METAID = '173' AND NVL(METAVALUE, '0') <> '0' THEN METAVALUE END) as product_search_boost_2_nbr,
	MAX(CASE WHEN METAID = '174' AND NVL(METAVALUE, '0') <> '0' THEN METAVALUE END) as product_search_boost_3_nbr,
	MAX(CASE WHEN METAID = '176' AND NVL(METAVALUE, '0') <> '0' THEN METAVALUE END) as product_search_boost_4_nbr,

	--- Technical Specification
	MAX(CASE WHEN METAID = '70094' THEN METAVALUE END) as product_line,
	MAX(CASE WHEN METAID = '389' THEN METAVALUE END) as material,
	MAX(CASE WHEN METAID = '390' THEN METAVALUE END) as color_finish,
	MAX(CASE WHEN METAID = '391' THEN METAVALUE END) as size,
	MAX(CASE WHEN METAID = '392' THEN METAVALUE END) as length,
	MAX(CASE WHEN METAID = '393' THEN METAVALUE END) as width,
	MAX(CASE WHEN METAID = '394' THEN METAVALUE END) as height,
	MAX(CASE WHEN METAID = '395' THEN METAVALUE END) as depth,
	MAX(CASE WHEN METAID = '396' THEN METAVALUE END) as voltage,
	MAX(CASE WHEN METAID = '397' THEN METAVALUE END) as tonnage,
	MAX(CASE WHEN METAID = '398' THEN METAVALUE END) as btu,
	MAX(CASE WHEN METAID = '399' THEN METAVALUE END) as pressure_rating,
	MAX(CASE WHEN METAID = '400' THEN METAVALUE END) as temperature_rating,
	MAX(CASE WHEN METAID = '402' THEN METAVALUE END) as inlet_size,
	MAX(CASE WHEN METAID = '403' THEN METAVALUE END) as flow_rate,
	MAX(CASE WHEN METAID = '404' THEN METAVALUE END) as capacity,
	MAX(CASE WHEN METAID = '405' THEN METAVALUE END) as wattage,

	--- Exclusion and Product Sold
	MAX(PRODUCT_SOLD_COUNT) as product_sold_count,

	--- CDC
    MAX(CUSTOMER_NBR_LIST) AS CUSTOMER_NUMBER_LIST,
    MAX(CUSTOMER_PART_NBR_LIST) AS CUSTOMER_PART_NUMBER_LIST,
    MAX(TECH_SPECS_LIST) AS TECH_SPECS_LIST,
    MAX(IN_STOCK_LOCATION_LIST) AS IN_STOCK_LOCATION_LIST,
    MAX(PRODUCT_BRANCH_EXCLUSION) AS PRODUCT_BRANCH_EXCLUSION,
    MAX(GREATEST(NVL(PROD.LAST_CHANGED_DATE,'1900-01-02'), NVL(PDWCAT.LAST_CHANGED_DATE,'1900-01-02'), NVL(CUSTOMER_PN.LAST_CHANGED_DATE,'1900-01-02'))) AS LAST_UPDATE_DATE


FROM CTE_PRODUCT PROD
LEFT JOIN CTE_PDWCATALOG PDWCAT ON PROD.PDWID = PDWCAT.PDWID
LEFT JOIN CTE_TECH_SPECS TECH_SPECS ON PROD.PDWID = TECH_SPECS.PDWID AND PROD.PRODUCTID = TECH_SPECS.PRODUCTID AND PROD.ETLSOURCEID = TECH_SPECS.ETLSOURCEID
LEFT JOIN CTE_CUSTOMER_PN CUSTOMER_PN ON PROD.PDWID = CUSTOMER_PN.PDWID AND PROD.PRODUCTID = CUSTOMER_PN.PRODUCTID AND PROD.ETLSOURCEID = CUSTOMER_PN.ETLSOURCEID
GROUP BY PROD.PDWID, PROD.PRODUCTID
;