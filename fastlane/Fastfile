
default_platform(:android)

platform :android do
  private_lane :increment_version do |options|
    latest_release = firebase_app_distribution_get_latest_release(
      app: options[:firebase_app_id]
    )
    increment_version_code({ version_code: latest_release[:buildVersion].to_i + 1 })
  end

  private_lane :get_changelog do |options|
    release_notes = conventional_changelog(
      format: options[:notes_format], 
      title: "Android #{options[:release_type]}", 
      commit_url: 'https://github.com/morsco-reece/picking-app/commit/',
    )
    release_notes
  end

  lane :alpha do |options|
    # Increment Build Version
    increment_version(
      firebase_app_id: options[:firebase_app_id],
    )
    
    # Analyze the commits to determine next version from tag
    # Pattern Matches against last alpha release
    analyze_commits(match: 'v[0-9]*.[0-9]*.[0-9]-alpha')

    # Create Release Notes
    release_notes = get_changelog(notes_format: 'markdown', release_type: 'Alpha')
    testing_notes = get_changelog(notes_format: 'plaintext', release_type: 'Alpha')

    next_version = lane_context[SharedValues::RELEASE_NEXT_VERSION]

    # Increment the version name in build
    increment_version_name(
      gradle_file_path: "./app/build.gradle",
      version_name: "#{next_version}-alpha"
    )
    
    # add_badge(dark: true, glob: '/android/app/src/main/res/**/*.png', alpha: true)

    # Build alpha version of Android App
    gradle(task: 'clean assembleAlpha')

    # Distribute app via Firebase
    firebase_app_distribution(
      app: "#{options[:firebase_app_id]}",
      firebase_cli_token: "#{options[:firebase_token]}",
      groups: "alpha-testers",
      release_notes: testing_notes
    )

    # Create a Pre Release / Tag with release notes
    set_github_release(
      repository_name: "morsco-reece/picking-app",
      api_token: options[:github_token],
      tag_name: "v#{next_version}-alpha",
      name: "v#{next_version}-alpha",
      commitish: "development",
      description: release_notes,
      is_prerelease: true
    )
  end
  

  lane :beta do |options|
    # Increment Build Version
    increment_version(
      firebase_app_id: options[:firebase_app_id],
    )
    
    # Analyze the commits to determine next version from tag
    # Pattern Matches against last alpha release
    analyze_commits(match: 'v[0-9]*.[0-9]*.[0-9]-beta')

    # Create Release Notes
    release_notes = get_changelog(notes_format: 'markdown', release_type: 'Beta')
    testing_notes = get_changelog(notes_format: 'plaintext', release_type: 'Beta')

    next_version = lane_context[SharedValues::RELEASE_NEXT_VERSION]

    # Increment the version name in build
    increment_version_name(
      gradle_file_path: "./app/build.gradle",
      version_name: "#{next_version}-beta"
    )
    
    # add_badge(dark: true, glob: '/android/app/src/main/res/**/*.png')

    # Build beta version of Android App
    gradle(task: 'clean assembleBeta')

    # Distribute app via Firebase
    firebase_app_distribution(
      app: "#{options[:firebase_app_id]}",
      firebase_cli_token: "#{options[:firebase_token]}",
      groups: "beta-testers",
      release_notes: testing_notes
    )

    # Create a Pre Release / Tag with release notes
    set_github_release(
      repository_name: "morsco-reece/picking-app",
      api_token: options[:github_token],
      tag_name: "v#{next_version}-beta",
      name: "v#{next_version}-beta",
      commitish: "staging",
      description: release_notes,
      is_prerelease: true
    )
    
    # tag_name = `git describe --tags --abbrev=0`
    # if (tag_name.include? "-beta") then
    #   beta_version = lane_context[SharedValues::RELEASE_NEXT_VERSION]
    # end
  end

  lane :prod do |options|

    # Increment Build Version
    increment_version(
      firebase_app_id: options[:firebase_app_id]
    )

    # Analyze the commits to determine next version from tag
    # Pattern Matches against last release
    analyze_commits(match: 'v[0-9]*.[0-9]*.[0-9]')

    # Create Release Notes
    release_notes = get_changelog(notes_format: 'markdown', release_type: 'Release')
    testing_notes = get_changelog(notes_format: 'plaintext', release_type: 'Release')

    next_version = lane_context[SharedValues::RELEASE_NEXT_VERSION]

    # Increment the version name in build
    increment_version_name(
      gradle_file_path: "./app/build.gradle",
      version_name: "#{next_version}"
    )

    # Build release version of Android App
    gradle(task: 'clean assembleRelease')

    # Create a Release with release notes
    set_github_release(
      repository_name: "morsco-reece/picking-app",
      api_token: options[:github_token],
      tag_name: "v#{next_version}",
      name: "v#{next_version}",
      commitish: "master",
      description: release_notes,
      upload_assets: [lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH]]
    )
  end

  error do |lane, exception|
    # TODO: Add in alert to Reece on failure
  end

end
