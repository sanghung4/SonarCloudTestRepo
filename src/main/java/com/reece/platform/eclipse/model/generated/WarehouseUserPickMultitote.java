/*
 * Eclipse API Developer Documentation
 * This documentation provides a list of API endpoints provided in this release as well as examples for using the various API endpoints
 *
 * OpenAPI spec version: 9.1.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.reece.platform.eclipse.model.generated;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.reece.platform.eclipse.model.generated.WarehouseMultiTotes;
import io.swagger.v3.oas.annotations.media.Schema;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * Object representing an Eclipse WarehouseUserPick.
 */
@Schema(description = "Object representing an Eclipse WarehouseUserPick.")

public class WarehouseUserPickMultitote {
  @JsonProperty("quantity")
  private Integer quantity = null;

  @JsonProperty("multitotes")
  private List<WarehouseMultiTotes> multitotes = null;

  @JsonProperty("picker")
  private String picker = null;

  @JsonProperty("branchId")
  private String branchId = null;

  @JsonProperty("warehouseID")
  private String warehouseID = null;

  @JsonProperty("isOverrideProduct")
  private Boolean isOverrideProduct = null;

  @JsonProperty("startPickTime")
  private LocalDateTime startPickTime = null;

  @JsonProperty("checkToteFlag")
  private Boolean checkToteFlag = null;

  public WarehouseUserPickMultitote quantity(Integer quantity) {
    this.quantity = quantity;
    return this;
  }

   /**
   * Pick total quantity
   * @return quantity
  **/
  @Schema(description = "Pick total quantity")
  public Integer getQuantity() {
    return quantity;
  }

  public void setQuantity(Integer quantity) {
    this.quantity = quantity;
  }

  public WarehouseUserPickMultitote multitotes(List<WarehouseMultiTotes> multitotes) {
    this.multitotes = multitotes;
    return this;
  }

  public WarehouseUserPickMultitote addMultitotesItem(WarehouseMultiTotes multitotesItem) {
    if (this.multitotes == null) {
      this.multitotes = new ArrayList<>();
    }
    this.multitotes.add(multitotesItem);
    return this;
  }

   /**
   * Totes and their respective quantities to be set
   * @return multitotes
  **/
  @Valid
  @Schema(description = "Totes and their respective quantities to be set")
  public List<WarehouseMultiTotes> getMultitotes() {
    return multitotes;
  }

  public void setMultitotes(List<WarehouseMultiTotes> multitotes) {
    this.multitotes = multitotes;
  }

  public WarehouseUserPickMultitote picker(String picker) {
    this.picker = picker;
    return this;
  }

   /**
   * Eclipse Picker ID
   * @return picker
  **/
  @Schema(description = "Eclipse Picker ID")
  public String getPicker() {
    return picker;
  }

  public void setPicker(String picker) {
    this.picker = picker;
  }

  public WarehouseUserPickMultitote branchId(String branchId) {
    this.branchId = branchId;
    return this;
  }

   /**
   * Eclipse Branch ID
   * @return branchId
  **/
  @Schema(description = "Eclipse Branch ID")
  public String getBranchId() {
    return branchId;
  }

  public void setBranchId(String branchId) {
    this.branchId = branchId;
  }

  public WarehouseUserPickMultitote warehouseID(String warehouseID) {
    this.warehouseID = warehouseID;
    return this;
  }

   /**
   * Eclipse Warehouse ID
   * @return warehouseID
  **/
  @Schema(description = "Eclipse Warehouse ID")
  public String getWarehouseID() {
    return warehouseID;
  }

  public void setWarehouseID(String warehouseID) {
    this.warehouseID = warehouseID;
  }

  public WarehouseUserPickMultitote isOverrideProduct(Boolean isOverrideProduct) {
    this.isOverrideProduct = isOverrideProduct;
    return this;
  }

   /**
   * Flag indicating if the Product was scaned as OVERRIDE.
   * @return isOverrideProduct
  **/
  @Schema(description = "Flag indicating if the Product was scaned as OVERRIDE.")
  public Boolean isIsOverrideProduct() {
    return isOverrideProduct;
  }

  public void setIsOverrideProduct(Boolean isOverrideProduct) {
    this.isOverrideProduct = isOverrideProduct;
  }

  public WarehouseUserPickMultitote startPickTime(LocalDateTime startPickTime) {
    this.startPickTime = startPickTime;
    return this;
  }

   /**
   * Time the picking started. Used for Report/log purposes.
   * @return startPickTime
  **/
  @Valid
  @Schema(description = "Time the picking started. Used for Report/log purposes.")
  public LocalDateTime getStartPickTime() {
    return startPickTime;
  }

  public void setStartPickTime(LocalDateTime startPickTime) {
    this.startPickTime = startPickTime;
  }

  public WarehouseUserPickMultitote checkToteFlag(Boolean checkToteFlag) {
    this.checkToteFlag = checkToteFlag;
    return this;
  }

   /**
   * Check Tote Prompt answer
   * @return checkToteFlag
  **/
  @Schema(description = "Check Tote Prompt answer")
  public Boolean isCheckToteFlag() {
    return checkToteFlag;
  }

  public void setCheckToteFlag(Boolean checkToteFlag) {
    this.checkToteFlag = checkToteFlag;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WarehouseUserPickMultitote warehouseUserPickMultitote = (WarehouseUserPickMultitote) o;
    return Objects.equals(this.quantity, warehouseUserPickMultitote.quantity) &&
        Objects.equals(this.multitotes, warehouseUserPickMultitote.multitotes) &&
        Objects.equals(this.picker, warehouseUserPickMultitote.picker) &&
        Objects.equals(this.branchId, warehouseUserPickMultitote.branchId) &&
        Objects.equals(this.warehouseID, warehouseUserPickMultitote.warehouseID) &&
        Objects.equals(this.isOverrideProduct, warehouseUserPickMultitote.isOverrideProduct) &&
        Objects.equals(this.startPickTime, warehouseUserPickMultitote.startPickTime) &&
        Objects.equals(this.checkToteFlag, warehouseUserPickMultitote.checkToteFlag);
  }

  @Override
  public int hashCode() {
    return Objects.hash(quantity, multitotes, picker, branchId, warehouseID, isOverrideProduct, startPickTime, checkToteFlag);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WarehouseUserPickMultitote {\n");
    
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    multitotes: ").append(toIndentedString(multitotes)).append("\n");
    sb.append("    picker: ").append(toIndentedString(picker)).append("\n");
    sb.append("    branchId: ").append(toIndentedString(branchId)).append("\n");
    sb.append("    warehouseID: ").append(toIndentedString(warehouseID)).append("\n");
    sb.append("    isOverrideProduct: ").append(toIndentedString(isOverrideProduct)).append("\n");
    sb.append("    startPickTime: ").append(toIndentedString(startPickTime)).append("\n");
    sb.append("    checkToteFlag: ").append(toIndentedString(checkToteFlag)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
