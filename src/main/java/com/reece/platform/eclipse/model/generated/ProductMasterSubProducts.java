/*
 * Eclipse API Developer Documentation
 * This documentation provides a list of API endpoints provided in this release as well as examples for using the various API endpoints
 *
 * OpenAPI spec version: 9.1.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.reece.platform.eclipse.model.generated;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.reece.platform.eclipse.model.generated.ProductMasterProductSpecifications;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * Object representing an Eclipse ProductMasterSubProducts.
 */
@Schema(description = "Object representing an Eclipse ProductMasterSubProducts.")

public class ProductMasterSubProducts {
  @JsonProperty("masterSubProduct")
  private Integer masterSubProduct = null;

  @JsonProperty("masterProductSpecificationsList")
  private List<ProductMasterProductSpecifications> masterProductSpecificationsList = null;

  public ProductMasterSubProducts masterSubProduct(Integer masterSubProduct) {
    this.masterSubProduct = masterSubProduct;
    return this;
  }

   /**
   * Desc: The Product MasterSubProducts Used For Master  File: PRODUCT  Attr: 116,x
   * @return masterSubProduct
  **/
  @Schema(description = "Desc: The Product MasterSubProducts Used For Master  File: PRODUCT  Attr: 116,x")
  public Integer getMasterSubProduct() {
    return masterSubProduct;
  }

  public void setMasterSubProduct(Integer masterSubProduct) {
    this.masterSubProduct = masterSubProduct;
  }

  public ProductMasterSubProducts masterProductSpecificationsList(List<ProductMasterProductSpecifications> masterProductSpecificationsList) {
    this.masterProductSpecificationsList = masterProductSpecificationsList;
    return this;
  }

  public ProductMasterSubProducts addMasterProductSpecificationsListItem(ProductMasterProductSpecifications masterProductSpecificationsListItem) {
    if (this.masterProductSpecificationsList == null) {
      this.masterProductSpecificationsList = new ArrayList<>();
    }
    this.masterProductSpecificationsList.add(masterProductSpecificationsListItem);
    return this;
  }

   /**
   * A list of Product Associated Sub-Products Used For Master  Attr: 42,x
   * @return masterProductSpecificationsList
  **/
  @Valid
  @Schema(description = "A list of Product Associated Sub-Products Used For Master  Attr: 42,x")
  public List<ProductMasterProductSpecifications> getMasterProductSpecificationsList() {
    return masterProductSpecificationsList;
  }

  public void setMasterProductSpecificationsList(List<ProductMasterProductSpecifications> masterProductSpecificationsList) {
    this.masterProductSpecificationsList = masterProductSpecificationsList;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProductMasterSubProducts productMasterSubProducts = (ProductMasterSubProducts) o;
    return Objects.equals(this.masterSubProduct, productMasterSubProducts.masterSubProduct) &&
        Objects.equals(this.masterProductSpecificationsList, productMasterSubProducts.masterProductSpecificationsList);
  }

  @Override
  public int hashCode() {
    return Objects.hash(masterSubProduct, masterProductSpecificationsList);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProductMasterSubProducts {\n");
    
    sb.append("    masterSubProduct: ").append(toIndentedString(masterSubProduct)).append("\n");
    sb.append("    masterProductSpecificationsList: ").append(toIndentedString(masterProductSpecificationsList)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
