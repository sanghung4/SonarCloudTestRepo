/*
 * Eclipse API Developer Documentation
 * This documentation provides a list of API endpoints provided in this release as well as examples for using the various API endpoints
 *
 * OpenAPI spec version: 9.1.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.reece.platform.eclipse.model.generated;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.reece.platform.eclipse.model.generated.SessionUser;
import io.swagger.v3.oas.annotations.media.Schema;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * Session object
 */
@Schema(description = "Session object")

public class Session {
  @JsonProperty("id")
  private String id = null;

  @JsonProperty("sessionUser")
  private SessionUser sessionUser = null;

  @JsonProperty("sessionToken")
  private String sessionToken = null;

  @JsonProperty("refreshToken")
  private String refreshToken = null;

  @JsonProperty("applicationKey")
  private String applicationKey = null;

  @JsonProperty("developerKey")
  private String developerKey = null;

  @JsonProperty("clientDescription")
  private String clientDescription = null;

  @JsonProperty("deviceId")
  private String deviceId = null;

  @JsonProperty("workstationId")
  private String workstationId = null;

  @JsonProperty("printerLocationId")
  private String printerLocationId = null;

  @JsonProperty("validPrinterLocationIds")
  private List<String> validPrinterLocationIds = null;

  @JsonProperty("creationDateTime")
  private LocalDateTime creationDateTime = null;

  @JsonProperty("lastUsedDateTime")
  private LocalDateTime lastUsedDateTime = null;

  public Session id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Session ID
   * @return id
  **/
  @Schema(description = "Session ID")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public Session sessionUser(SessionUser sessionUser) {
    this.sessionUser = sessionUser;
    return this;
  }

   /**
   * Get sessionUser
   * @return sessionUser
  **/
  @Valid
  @Schema(description = "")
  public SessionUser getSessionUser() {
    return sessionUser;
  }

  public void setSessionUser(SessionUser sessionUser) {
    this.sessionUser = sessionUser;
  }

  public Session sessionToken(String sessionToken) {
    this.sessionToken = sessionToken;
    return this;
  }

   /**
   * SessionToken to use on subsequent calls to match the request to the session credentials.  The token will be valid until the session expires or the session delete is called.
   * @return sessionToken
  **/
  @Schema(description = "SessionToken to use on subsequent calls to match the request to the session credentials.  The token will be valid until the session expires or the session delete is called.")
  public String getSessionToken() {
    return sessionToken;
  }

  public void setSessionToken(String sessionToken) {
    this.sessionToken = sessionToken;
  }

  public Session refreshToken(String refreshToken) {
    this.refreshToken = refreshToken;
    return this;
  }

   /**
   * Refresh token assigned to the session ID to skip credentials for expired sessions  The refresh token will be valid until the refresh token expiration passes
   * @return refreshToken
  **/
  @Schema(description = "Refresh token assigned to the session ID to skip credentials for expired sessions  The refresh token will be valid until the refresh token expiration passes")
  public String getRefreshToken() {
    return refreshToken;
  }

  public void setRefreshToken(String refreshToken) {
    this.refreshToken = refreshToken;
  }

  public Session applicationKey(String applicationKey) {
    this.applicationKey = applicationKey;
    return this;
  }

   /**
   * Application Key of the connecting client for the session
   * @return applicationKey
  **/
  @Schema(description = "Application Key of the connecting client for the session")
  public String getApplicationKey() {
    return applicationKey;
  }

  public void setApplicationKey(String applicationKey) {
    this.applicationKey = applicationKey;
  }

  public Session developerKey(String developerKey) {
    this.developerKey = developerKey;
    return this;
  }

   /**
   * Developer key for the connecting client for the session
   * @return developerKey
  **/
  @Schema(description = "Developer key for the connecting client for the session")
  public String getDeveloperKey() {
    return developerKey;
  }

  public void setDeveloperKey(String developerKey) {
    this.developerKey = developerKey;
  }

  public Session clientDescription(String clientDescription) {
    this.clientDescription = clientDescription;
    return this;
  }

   /**
   * Displayable description of the connecting client for the session
   * @return clientDescription
  **/
  @Schema(description = "Displayable description of the connecting client for the session")
  public String getClientDescription() {
    return clientDescription;
  }

  public void setClientDescription(String clientDescription) {
    this.clientDescription = clientDescription;
  }

  public Session deviceId(String deviceId) {
    this.deviceId = deviceId;
    return this;
  }

   /**
   * Device ID which should be randomly created at install time
   * @return deviceId
  **/
  @Schema(description = "Device ID which should be randomly created at install time")
  public String getDeviceId() {
    return deviceId;
  }

  public void setDeviceId(String deviceId) {
    this.deviceId = deviceId;
  }

  public Session workstationId(String workstationId) {
    this.workstationId = workstationId;
    return this;
  }

   /**
   * Workstation ID for this client   (Replaces the terminal ID in eterm/solar)
   * @return workstationId
  **/
  @Schema(description = "Workstation ID for this client   (Replaces the terminal ID in eterm/solar)")
  public String getWorkstationId() {
    return workstationId;
  }

  public void setWorkstationId(String workstationId) {
    this.workstationId = workstationId;
  }

  public Session printerLocationId(String printerLocationId) {
    this.printerLocationId = printerLocationId;
    return this;
  }

   /**
   * Printer location ID currently active for the client.  Used to map user to printer location.  (This replaces the \&quot;location\&quot; field during eterm/solar login)
   * @return printerLocationId
  **/
  @Schema(description = "Printer location ID currently active for the client.  Used to map user to printer location.  (This replaces the \"location\" field during eterm/solar login)")
  public String getPrinterLocationId() {
    return printerLocationId;
  }

  public void setPrinterLocationId(String printerLocationId) {
    this.printerLocationId = printerLocationId;
  }

  public Session validPrinterLocationIds(List<String> validPrinterLocationIds) {
    this.validPrinterLocationIds = validPrinterLocationIds;
    return this;
  }

  public Session addValidPrinterLocationIdsItem(String validPrinterLocationIdsItem) {
    if (this.validPrinterLocationIds == null) {
      this.validPrinterLocationIds = new ArrayList<>();
    }
    this.validPrinterLocationIds.add(validPrinterLocationIdsItem);
    return this;
  }

   /**
   * Printer location IDs that are valid for the client.  This can be the list of printers to choose from.  (This replaces the \&quot;location\&quot; field during eterm/solar login)
   * @return validPrinterLocationIds
  **/
  @Schema(description = "Printer location IDs that are valid for the client.  This can be the list of printers to choose from.  (This replaces the \"location\" field during eterm/solar login)")
  public List<String> getValidPrinterLocationIds() {
    return validPrinterLocationIds;
  }

  public void setValidPrinterLocationIds(List<String> validPrinterLocationIds) {
    this.validPrinterLocationIds = validPrinterLocationIds;
  }

  public Session creationDateTime(LocalDateTime creationDateTime) {
    this.creationDateTime = creationDateTime;
    return this;
  }

   /**
   * Session creation date time
   * @return creationDateTime
  **/
  @Valid
  @Schema(description = "Session creation date time")
  public LocalDateTime getCreationDateTime() {
    return creationDateTime;
  }

  public void setCreationDateTime(LocalDateTime creationDateTime) {
    this.creationDateTime = creationDateTime;
  }

  public Session lastUsedDateTime(LocalDateTime lastUsedDateTime) {
    this.lastUsedDateTime = lastUsedDateTime;
    return this;
  }

   /**
   * Session last used date time
   * @return lastUsedDateTime
  **/
  @Valid
  @Schema(description = "Session last used date time")
  public LocalDateTime getLastUsedDateTime() {
    return lastUsedDateTime;
  }

  public void setLastUsedDateTime(LocalDateTime lastUsedDateTime) {
    this.lastUsedDateTime = lastUsedDateTime;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Session session = (Session) o;
    return Objects.equals(this.id, session.id) &&
        Objects.equals(this.sessionUser, session.sessionUser) &&
        Objects.equals(this.sessionToken, session.sessionToken) &&
        Objects.equals(this.refreshToken, session.refreshToken) &&
        Objects.equals(this.applicationKey, session.applicationKey) &&
        Objects.equals(this.developerKey, session.developerKey) &&
        Objects.equals(this.clientDescription, session.clientDescription) &&
        Objects.equals(this.deviceId, session.deviceId) &&
        Objects.equals(this.workstationId, session.workstationId) &&
        Objects.equals(this.printerLocationId, session.printerLocationId) &&
        Objects.equals(this.validPrinterLocationIds, session.validPrinterLocationIds) &&
        Objects.equals(this.creationDateTime, session.creationDateTime) &&
        Objects.equals(this.lastUsedDateTime, session.lastUsedDateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, sessionUser, sessionToken, refreshToken, applicationKey, developerKey, clientDescription, deviceId, workstationId, printerLocationId, validPrinterLocationIds, creationDateTime, lastUsedDateTime);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Session {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    sessionUser: ").append(toIndentedString(sessionUser)).append("\n");
    sb.append("    sessionToken: ").append(toIndentedString(sessionToken)).append("\n");
    sb.append("    refreshToken: ").append(toIndentedString(refreshToken)).append("\n");
    sb.append("    applicationKey: ").append(toIndentedString(applicationKey)).append("\n");
    sb.append("    developerKey: ").append(toIndentedString(developerKey)).append("\n");
    sb.append("    clientDescription: ").append(toIndentedString(clientDescription)).append("\n");
    sb.append("    deviceId: ").append(toIndentedString(deviceId)).append("\n");
    sb.append("    workstationId: ").append(toIndentedString(workstationId)).append("\n");
    sb.append("    printerLocationId: ").append(toIndentedString(printerLocationId)).append("\n");
    sb.append("    validPrinterLocationIds: ").append(toIndentedString(validPrinterLocationIds)).append("\n");
    sb.append("    creationDateTime: ").append(toIndentedString(creationDateTime)).append("\n");
    sb.append("    lastUsedDateTime: ").append(toIndentedString(lastUsedDateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
