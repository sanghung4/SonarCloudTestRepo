/*
 * Eclipse API Developer Documentation
 * This documentation provides a list of API endpoints provided in this release as well as examples for using the various API endpoints
 *
 * OpenAPI spec version: 9.1.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.reece.platform.eclipse.model.generated;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.reece.platform.eclipse.model.generated.WarehouseCycleLocations;
import io.swagger.v3.oas.annotations.media.Schema;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * Create a new CycleCount Queue
 */
@Schema(description = "Create a new CycleCount Queue")

public class CycleCountQueue {
  @JsonProperty("warehouseOP")
  private String warehouseOP = null;

  @JsonProperty("branchId")
  private String branchId = null;

  @JsonProperty("productId")
  private Integer productId = null;

  @JsonProperty("fullLocation")
  private String fullLocation = null;

  @JsonProperty("cycleLocations")
  private List<WarehouseCycleLocations> cycleLocations = null;

  @JsonProperty("startPickTime")
  private LocalDateTime startPickTime = null;

  public CycleCountQueue warehouseOP(String warehouseOP) {
    this.warehouseOP = warehouseOP;
    return this;
  }

   /**
   * WarehouseOP
   * @return warehouseOP
  **/
  @Schema(description = "WarehouseOP")
  public String getWarehouseOP() {
    return warehouseOP;
  }

  public void setWarehouseOP(String warehouseOP) {
    this.warehouseOP = warehouseOP;
  }

  public CycleCountQueue branchId(String branchId) {
    this.branchId = branchId;
    return this;
  }

   /**
   * Branch id
   * @return branchId
  **/
  @NotNull
  @Schema(required = true, description = "Branch id")
  public String getBranchId() {
    return branchId;
  }

  public void setBranchId(String branchId) {
    this.branchId = branchId;
  }

  public CycleCountQueue productId(Integer productId) {
    this.productId = productId;
    return this;
  }

   /**
   * Product id
   * @return productId
  **/
  @NotNull
  @Schema(required = true, description = "Product id")
  public Integer getProductId() {
    return productId;
  }

  public void setProductId(Integer productId) {
    this.productId = productId;
  }

  public CycleCountQueue fullLocation(String fullLocation) {
    this.fullLocation = fullLocation;
    return this;
  }

   /**
   * Original Full Location
   * @return fullLocation
  **/
  @NotNull
  @Schema(required = true, description = "Original Full Location")
  public String getFullLocation() {
    return fullLocation;
  }

  public void setFullLocation(String fullLocation) {
    this.fullLocation = fullLocation;
  }

  public CycleCountQueue cycleLocations(List<WarehouseCycleLocations> cycleLocations) {
    this.cycleLocations = cycleLocations;
    return this;
  }

  public CycleCountQueue addCycleLocationsItem(WarehouseCycleLocations cycleLocationsItem) {
    if (this.cycleLocations == null) {
      this.cycleLocations = new ArrayList<>();
    }
    this.cycleLocations.add(cycleLocationsItem);
    return this;
  }

   /**
   * Get cycleLocations
   * @return cycleLocations
  **/
  @Valid
  @Schema(description = "")
  public List<WarehouseCycleLocations> getCycleLocations() {
    return cycleLocations;
  }

  public void setCycleLocations(List<WarehouseCycleLocations> cycleLocations) {
    this.cycleLocations = cycleLocations;
  }

  public CycleCountQueue startPickTime(LocalDateTime startPickTime) {
    this.startPickTime = startPickTime;
    return this;
  }

   /**
   * Optional. Start Pick Time used for logging
   * @return startPickTime
  **/
  @Valid
  @Schema(description = "Optional. Start Pick Time used for logging")
  public LocalDateTime getStartPickTime() {
    return startPickTime;
  }

  public void setStartPickTime(LocalDateTime startPickTime) {
    this.startPickTime = startPickTime;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CycleCountQueue cycleCountQueue = (CycleCountQueue) o;
    return Objects.equals(this.warehouseOP, cycleCountQueue.warehouseOP) &&
        Objects.equals(this.branchId, cycleCountQueue.branchId) &&
        Objects.equals(this.productId, cycleCountQueue.productId) &&
        Objects.equals(this.fullLocation, cycleCountQueue.fullLocation) &&
        Objects.equals(this.cycleLocations, cycleCountQueue.cycleLocations) &&
        Objects.equals(this.startPickTime, cycleCountQueue.startPickTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(warehouseOP, branchId, productId, fullLocation, cycleLocations, startPickTime);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CycleCountQueue {\n");
    
    sb.append("    warehouseOP: ").append(toIndentedString(warehouseOP)).append("\n");
    sb.append("    branchId: ").append(toIndentedString(branchId)).append("\n");
    sb.append("    productId: ").append(toIndentedString(productId)).append("\n");
    sb.append("    fullLocation: ").append(toIndentedString(fullLocation)).append("\n");
    sb.append("    cycleLocations: ").append(toIndentedString(cycleLocations)).append("\n");
    sb.append("    startPickTime: ").append(toIndentedString(startPickTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
