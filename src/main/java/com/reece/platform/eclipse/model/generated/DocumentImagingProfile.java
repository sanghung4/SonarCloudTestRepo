/*
 * Eclipse API Developer Documentation
 * This documentation provides a list of API endpoints provided in this release as well as examples for using the various API endpoints
 *
 * OpenAPI spec version: 9.1.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.reece.platform.eclipse.model.generated;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.reece.platform.eclipse.model.generated.DocumentImagingProfileStorageLocation;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * Object representing an Eclipse DocumentImagingProfile.
 */
@Schema(description = "Object representing an Eclipse DocumentImagingProfile.")

public class DocumentImagingProfile {
  @JsonProperty("updateKey")
  private String updateKey = null;

  @JsonProperty("id")
  private String id = null;

  @JsonProperty("description")
  private String description = null;

  @JsonProperty("disableTemporaryFolders")
  private Boolean disableTemporaryFolders = null;

  @JsonProperty("promptOnIndex")
  private Boolean promptOnIndex = null;

  @JsonProperty("referenceOnly")
  private Boolean referenceOnly = null;

  @JsonProperty("viewAuthorizationKeyId")
  private String viewAuthorizationKeyId = null;

  @JsonProperty("indexDescription")
  private Boolean indexDescription = null;

  @JsonProperty("viewInWoe")
  private Boolean viewInWoe = null;

  @JsonProperty("storageLocations")
  private List<DocumentImagingProfileStorageLocation> storageLocations = null;

  public DocumentImagingProfile updateKey(String updateKey) {
    this.updateKey = updateKey;
    return this;
  }

   /**
   * Update key to handle concurrency during updates within Eclipse
   * @return updateKey
  **/
  @Schema(description = "Update key to handle concurrency during updates within Eclipse")
  public String getUpdateKey() {
    return updateKey;
  }

  public void setUpdateKey(String updateKey) {
    this.updateKey = updateKey;
  }

  public DocumentImagingProfile id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Eclipse ID for the record
   * @return id
  **/
  @Schema(description = "Eclipse ID for the record")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public DocumentImagingProfile description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Desc: The DocumentImagingProfile Description  File: IMG.PROFILE  Attr: 1
   * @return description
  **/
  @Schema(description = "Desc: The DocumentImagingProfile Description  File: IMG.PROFILE  Attr: 1")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public DocumentImagingProfile disableTemporaryFolders(Boolean disableTemporaryFolders) {
    this.disableTemporaryFolders = disableTemporaryFolders;
    return this;
  }

   /**
   * Desc: The DocumentImagingProfile DisableTemporaryFolders flag  File: IMG.PROFILE  Attr: 2
   * @return disableTemporaryFolders
  **/
  @Schema(description = "Desc: The DocumentImagingProfile DisableTemporaryFolders flag  File: IMG.PROFILE  Attr: 2")
  public Boolean isDisableTemporaryFolders() {
    return disableTemporaryFolders;
  }

  public void setDisableTemporaryFolders(Boolean disableTemporaryFolders) {
    this.disableTemporaryFolders = disableTemporaryFolders;
  }

  public DocumentImagingProfile promptOnIndex(Boolean promptOnIndex) {
    this.promptOnIndex = promptOnIndex;
    return this;
  }

   /**
   * Desc: The DocumentImagingProfile PromptOnIndex flag  File: IMG.PROFILE  Attr: 5
   * @return promptOnIndex
  **/
  @Schema(description = "Desc: The DocumentImagingProfile PromptOnIndex flag  File: IMG.PROFILE  Attr: 5")
  public Boolean isPromptOnIndex() {
    return promptOnIndex;
  }

  public void setPromptOnIndex(Boolean promptOnIndex) {
    this.promptOnIndex = promptOnIndex;
  }

  public DocumentImagingProfile referenceOnly(Boolean referenceOnly) {
    this.referenceOnly = referenceOnly;
    return this;
  }

   /**
   * Desc: The DocumentImagingProfile ReferenceOnly flag  File: IMG.PROFILE  Attr: 6
   * @return referenceOnly
  **/
  @Schema(description = "Desc: The DocumentImagingProfile ReferenceOnly flag  File: IMG.PROFILE  Attr: 6")
  public Boolean isReferenceOnly() {
    return referenceOnly;
  }

  public void setReferenceOnly(Boolean referenceOnly) {
    this.referenceOnly = referenceOnly;
  }

  public DocumentImagingProfile viewAuthorizationKeyId(String viewAuthorizationKeyId) {
    this.viewAuthorizationKeyId = viewAuthorizationKeyId;
    return this;
  }

   /**
   * Desc: The DocumentImagingProfile ViewAuthorizationKeyId  File: IMG.PROFILE  Attr: 7
   * @return viewAuthorizationKeyId
  **/
  @Schema(description = "Desc: The DocumentImagingProfile ViewAuthorizationKeyId  File: IMG.PROFILE  Attr: 7")
  public String getViewAuthorizationKeyId() {
    return viewAuthorizationKeyId;
  }

  public void setViewAuthorizationKeyId(String viewAuthorizationKeyId) {
    this.viewAuthorizationKeyId = viewAuthorizationKeyId;
  }

  public DocumentImagingProfile indexDescription(Boolean indexDescription) {
    this.indexDescription = indexDescription;
    return this;
  }

   /**
   * Desc: The DocumentImagingProfile IndexDescription flag  File: IMG.PROFILE  Attr: 9
   * @return indexDescription
  **/
  @Schema(description = "Desc: The DocumentImagingProfile IndexDescription flag  File: IMG.PROFILE  Attr: 9")
  public Boolean isIndexDescription() {
    return indexDescription;
  }

  public void setIndexDescription(Boolean indexDescription) {
    this.indexDescription = indexDescription;
  }

  public DocumentImagingProfile viewInWoe(Boolean viewInWoe) {
    this.viewInWoe = viewInWoe;
    return this;
  }

   /**
   * Desc: The DocumentImagingProfile  ViewInWoe flag  File: IMG.PROFILE  Attr: 14
   * @return viewInWoe
  **/
  @Schema(description = "Desc: The DocumentImagingProfile  ViewInWoe flag  File: IMG.PROFILE  Attr: 14")
  public Boolean isViewInWoe() {
    return viewInWoe;
  }

  public void setViewInWoe(Boolean viewInWoe) {
    this.viewInWoe = viewInWoe;
  }

  public DocumentImagingProfile storageLocations(List<DocumentImagingProfileStorageLocation> storageLocations) {
    this.storageLocations = storageLocations;
    return this;
  }

  public DocumentImagingProfile addStorageLocationsItem(DocumentImagingProfileStorageLocation storageLocationsItem) {
    if (this.storageLocations == null) {
      this.storageLocations = new ArrayList<>();
    }
    this.storageLocations.add(storageLocationsItem);
    return this;
  }

   /**
   * A list of DocumentImagingProfile StorageLocations
   * @return storageLocations
  **/
  @Valid
  @Schema(description = "A list of DocumentImagingProfile StorageLocations")
  public List<DocumentImagingProfileStorageLocation> getStorageLocations() {
    return storageLocations;
  }

  public void setStorageLocations(List<DocumentImagingProfileStorageLocation> storageLocations) {
    this.storageLocations = storageLocations;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DocumentImagingProfile documentImagingProfile = (DocumentImagingProfile) o;
    return Objects.equals(this.updateKey, documentImagingProfile.updateKey) &&
        Objects.equals(this.id, documentImagingProfile.id) &&
        Objects.equals(this.description, documentImagingProfile.description) &&
        Objects.equals(this.disableTemporaryFolders, documentImagingProfile.disableTemporaryFolders) &&
        Objects.equals(this.promptOnIndex, documentImagingProfile.promptOnIndex) &&
        Objects.equals(this.referenceOnly, documentImagingProfile.referenceOnly) &&
        Objects.equals(this.viewAuthorizationKeyId, documentImagingProfile.viewAuthorizationKeyId) &&
        Objects.equals(this.indexDescription, documentImagingProfile.indexDescription) &&
        Objects.equals(this.viewInWoe, documentImagingProfile.viewInWoe) &&
        Objects.equals(this.storageLocations, documentImagingProfile.storageLocations);
  }

  @Override
  public int hashCode() {
    return Objects.hash(updateKey, id, description, disableTemporaryFolders, promptOnIndex, referenceOnly, viewAuthorizationKeyId, indexDescription, viewInWoe, storageLocations);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DocumentImagingProfile {\n");
    
    sb.append("    updateKey: ").append(toIndentedString(updateKey)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    disableTemporaryFolders: ").append(toIndentedString(disableTemporaryFolders)).append("\n");
    sb.append("    promptOnIndex: ").append(toIndentedString(promptOnIndex)).append("\n");
    sb.append("    referenceOnly: ").append(toIndentedString(referenceOnly)).append("\n");
    sb.append("    viewAuthorizationKeyId: ").append(toIndentedString(viewAuthorizationKeyId)).append("\n");
    sb.append("    indexDescription: ").append(toIndentedString(indexDescription)).append("\n");
    sb.append("    viewInWoe: ").append(toIndentedString(viewInWoe)).append("\n");
    sb.append("    storageLocations: ").append(toIndentedString(storageLocations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
