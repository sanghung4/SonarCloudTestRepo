/*
 * Eclipse API Developer Documentation
 * This documentation provides a list of API endpoints provided in this release as well as examples for using the various API endpoints
 *
 * OpenAPI spec version: 9.1.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.reece.platform.eclipse.model.generated;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.reece.platform.eclipse.model.generated.DocImgStorageLocType;
import com.reece.platform.eclipse.model.generated.DocumentImagingStorageLocationBranch;
import com.reece.platform.eclipse.model.generated.DocumentImagingStorageLocationUnixSecurity;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * Object representing an Eclipse DocumentImagingStorageLocation.
 */
@Schema(description = "Object representing an Eclipse DocumentImagingStorageLocation.")

public class DocumentImagingStorageLocation {
  @JsonProperty("updateKey")
  private String updateKey = null;

  @JsonProperty("id")
  private String id = null;

  @JsonProperty("type")
  private DocImgStorageLocType type = null;

  @JsonProperty("networkPath")
  private String networkPath = null;

  @JsonProperty("webPath")
  private String webPath = null;

  @JsonProperty("offlineComment")
  private String offlineComment = null;

  @JsonProperty("fileCount")
  private Integer fileCount = null;

  @JsonProperty("byteCount")
  private Long byteCount = null;

  @JsonProperty("pathSubroutine")
  private String pathSubroutine = null;

  @JsonProperty("branches")
  private List<DocumentImagingStorageLocationBranch> branches = null;

  @JsonProperty("unixSecurity")
  private DocumentImagingStorageLocationUnixSecurity unixSecurity = null;

  public DocumentImagingStorageLocation updateKey(String updateKey) {
    this.updateKey = updateKey;
    return this;
  }

   /**
   * Update key to handle concurrency during updates within Eclipse
   * @return updateKey
  **/
  @Schema(description = "Update key to handle concurrency during updates within Eclipse")
  public String getUpdateKey() {
    return updateKey;
  }

  public void setUpdateKey(String updateKey) {
    this.updateKey = updateKey;
  }

  public DocumentImagingStorageLocation id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Eclipse ID for the record
   * @return id
  **/
  @Schema(description = "Eclipse ID for the record")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public DocumentImagingStorageLocation type(DocImgStorageLocType type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @Valid
  @Schema(description = "")
  public DocImgStorageLocType getType() {
    return type;
  }

  public void setType(DocImgStorageLocType type) {
    this.type = type;
  }

  public DocumentImagingStorageLocation networkPath(String networkPath) {
    this.networkPath = networkPath;
    return this;
  }

   /**
   * Desc: The DocumentImagingStorageLocation NetworkPath  File: IMG.ARCHIVES  Attr: 2
   * @return networkPath
  **/
  @NotNull
  @Schema(required = true, description = "Desc: The DocumentImagingStorageLocation NetworkPath  File: IMG.ARCHIVES  Attr: 2")
  public String getNetworkPath() {
    return networkPath;
  }

  public void setNetworkPath(String networkPath) {
    this.networkPath = networkPath;
  }

  public DocumentImagingStorageLocation webPath(String webPath) {
    this.webPath = webPath;
    return this;
  }

   /**
   * Desc: The DocumentImagingStorageLocation WebPath  File: IMG.ARCHIVES  Attr: 4
   * @return webPath
  **/
  @Schema(description = "Desc: The DocumentImagingStorageLocation WebPath  File: IMG.ARCHIVES  Attr: 4")
  public String getWebPath() {
    return webPath;
  }

  public void setWebPath(String webPath) {
    this.webPath = webPath;
  }

  public DocumentImagingStorageLocation offlineComment(String offlineComment) {
    this.offlineComment = offlineComment;
    return this;
  }

   /**
   * Desc: The DocumentImagingStorageLocation OfflineComment  File: IMG.ARCHIVES  Attr: 5
   * @return offlineComment
  **/
  @Schema(description = "Desc: The DocumentImagingStorageLocation OfflineComment  File: IMG.ARCHIVES  Attr: 5")
  public String getOfflineComment() {
    return offlineComment;
  }

  public void setOfflineComment(String offlineComment) {
    this.offlineComment = offlineComment;
  }

  public DocumentImagingStorageLocation fileCount(Integer fileCount) {
    this.fileCount = fileCount;
    return this;
  }

   /**
   * Desc: The DocumentImagingStorageLocation FileCount  File: IMG.ARCHIVES  Attr: 6
   * @return fileCount
  **/
  @Schema(description = "Desc: The DocumentImagingStorageLocation FileCount  File: IMG.ARCHIVES  Attr: 6")
  public Integer getFileCount() {
    return fileCount;
  }

  public void setFileCount(Integer fileCount) {
    this.fileCount = fileCount;
  }

  public DocumentImagingStorageLocation byteCount(Long byteCount) {
    this.byteCount = byteCount;
    return this;
  }

   /**
   * Desc: The DocumentImagingStorageLocation ByteCount  File: IMG.ARCHIVES  Attr: 7
   * @return byteCount
  **/
  @Schema(description = "Desc: The DocumentImagingStorageLocation ByteCount  File: IMG.ARCHIVES  Attr: 7")
  public Long getByteCount() {
    return byteCount;
  }

  public void setByteCount(Long byteCount) {
    this.byteCount = byteCount;
  }

  public DocumentImagingStorageLocation pathSubroutine(String pathSubroutine) {
    this.pathSubroutine = pathSubroutine;
    return this;
  }

   /**
   * Desc: The DocumentImagingStorageLocation PathSubroutine  File: IMG.ARCHIVES  Attr: 8
   * @return pathSubroutine
  **/
  @Schema(description = "Desc: The DocumentImagingStorageLocation PathSubroutine  File: IMG.ARCHIVES  Attr: 8")
  public String getPathSubroutine() {
    return pathSubroutine;
  }

  public void setPathSubroutine(String pathSubroutine) {
    this.pathSubroutine = pathSubroutine;
  }

  public DocumentImagingStorageLocation branches(List<DocumentImagingStorageLocationBranch> branches) {
    this.branches = branches;
    return this;
  }

  public DocumentImagingStorageLocation addBranchesItem(DocumentImagingStorageLocationBranch branchesItem) {
    if (this.branches == null) {
      this.branches = new ArrayList<>();
    }
    this.branches.add(branchesItem);
    return this;
  }

   /**
   * A list of DocumentImagingStorageLocation Branches  Attr: 3
   * @return branches
  **/
  @Valid
  @Schema(description = "A list of DocumentImagingStorageLocation Branches  Attr: 3")
  public List<DocumentImagingStorageLocationBranch> getBranches() {
    return branches;
  }

  public void setBranches(List<DocumentImagingStorageLocationBranch> branches) {
    this.branches = branches;
  }

  public DocumentImagingStorageLocation unixSecurity(DocumentImagingStorageLocationUnixSecurity unixSecurity) {
    this.unixSecurity = unixSecurity;
    return this;
  }

   /**
   * Get unixSecurity
   * @return unixSecurity
  **/
  @Valid
  @Schema(description = "")
  public DocumentImagingStorageLocationUnixSecurity getUnixSecurity() {
    return unixSecurity;
  }

  public void setUnixSecurity(DocumentImagingStorageLocationUnixSecurity unixSecurity) {
    this.unixSecurity = unixSecurity;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DocumentImagingStorageLocation documentImagingStorageLocation = (DocumentImagingStorageLocation) o;
    return Objects.equals(this.updateKey, documentImagingStorageLocation.updateKey) &&
        Objects.equals(this.id, documentImagingStorageLocation.id) &&
        Objects.equals(this.type, documentImagingStorageLocation.type) &&
        Objects.equals(this.networkPath, documentImagingStorageLocation.networkPath) &&
        Objects.equals(this.webPath, documentImagingStorageLocation.webPath) &&
        Objects.equals(this.offlineComment, documentImagingStorageLocation.offlineComment) &&
        Objects.equals(this.fileCount, documentImagingStorageLocation.fileCount) &&
        Objects.equals(this.byteCount, documentImagingStorageLocation.byteCount) &&
        Objects.equals(this.pathSubroutine, documentImagingStorageLocation.pathSubroutine) &&
        Objects.equals(this.branches, documentImagingStorageLocation.branches) &&
        Objects.equals(this.unixSecurity, documentImagingStorageLocation.unixSecurity);
  }

  @Override
  public int hashCode() {
    return Objects.hash(updateKey, id, type, networkPath, webPath, offlineComment, fileCount, byteCount, pathSubroutine, branches, unixSecurity);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DocumentImagingStorageLocation {\n");
    
    sb.append("    updateKey: ").append(toIndentedString(updateKey)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    networkPath: ").append(toIndentedString(networkPath)).append("\n");
    sb.append("    webPath: ").append(toIndentedString(webPath)).append("\n");
    sb.append("    offlineComment: ").append(toIndentedString(offlineComment)).append("\n");
    sb.append("    fileCount: ").append(toIndentedString(fileCount)).append("\n");
    sb.append("    byteCount: ").append(toIndentedString(byteCount)).append("\n");
    sb.append("    pathSubroutine: ").append(toIndentedString(pathSubroutine)).append("\n");
    sb.append("    branches: ").append(toIndentedString(branches)).append("\n");
    sb.append("    unixSecurity: ").append(toIndentedString(unixSecurity)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
