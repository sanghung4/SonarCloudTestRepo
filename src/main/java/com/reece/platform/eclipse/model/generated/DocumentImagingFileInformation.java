/*
 * Eclipse API Developer Documentation
 * This documentation provides a list of API endpoints provided in this release as well as examples for using the various API endpoints
 *
 * OpenAPI spec version: 9.1.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.reece.platform.eclipse.model.generated;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.reece.platform.eclipse.model.generated.DocumentImagingFileLink;
import io.swagger.v3.oas.annotations.media.Schema;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * File information class
 */
@Schema(description = "File information class")

public class DocumentImagingFileInformation {
  @JsonProperty("description")
  private String description = null;

  @JsonProperty("fileExtension")
  private String fileExtension = null;

  @JsonProperty("attachDateTime")
  private LocalDateTime attachDateTime = null;

  @JsonProperty("attachUserId")
  private String attachUserId = null;

  @JsonProperty("profileId")
  private String profileId = null;

  @JsonProperty("originalFilename")
  private String originalFilename = null;

  @JsonProperty("authKeyId")
  private String authKeyId = null;

  @JsonProperty("deleted")
  private Boolean deleted = null;

  @JsonProperty("sizeBytes")
  private Long sizeBytes = null;

  @JsonProperty("descriptionIndexed")
  private Boolean descriptionIndexed = null;

  @JsonProperty("source")
  private String source = null;

  @JsonProperty("subDirectory")
  private String subDirectory = null;

  @JsonProperty("links")
  private List<DocumentImagingFileLink> links = null;

  @JsonProperty("pendingStorageLocationIds")
  private List<String> pendingStorageLocationIds = null;

  @JsonProperty("storageLocationIds")
  private List<String> storageLocationIds = null;

  public DocumentImagingFileInformation description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Desc: The DocumentImagingFile Description  File: IMG.XREF  Attr: 1
   * @return description
  **/
  @Schema(description = "Desc: The DocumentImagingFile Description  File: IMG.XREF  Attr: 1")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public DocumentImagingFileInformation fileExtension(String fileExtension) {
    this.fileExtension = fileExtension;
    return this;
  }

   /**
   * Desc: The DocumentImagingFile FileExtension  File: IMG.XREF  Attr: 2
   * @return fileExtension
  **/
  @Schema(description = "Desc: The DocumentImagingFile FileExtension  File: IMG.XREF  Attr: 2")
  public String getFileExtension() {
    return fileExtension;
  }

  public void setFileExtension(String fileExtension) {
    this.fileExtension = fileExtension;
  }

  public DocumentImagingFileInformation attachDateTime(LocalDateTime attachDateTime) {
    this.attachDateTime = attachDateTime;
    return this;
  }

   /**
   * Desc: The DocumentImagingFile Attach Date and Time  File: IMG.XREF  Attr: 3, 4
   * @return attachDateTime
  **/
  @Valid
  @Schema(description = "Desc: The DocumentImagingFile Attach Date and Time  File: IMG.XREF  Attr: 3, 4")
  public LocalDateTime getAttachDateTime() {
    return attachDateTime;
  }

  public void setAttachDateTime(LocalDateTime attachDateTime) {
    this.attachDateTime = attachDateTime;
  }

  public DocumentImagingFileInformation attachUserId(String attachUserId) {
    this.attachUserId = attachUserId;
    return this;
  }

   /**
   * Desc: The DocumentImagingFile AttachUserId  File: IMG.XREF  Attr: 5
   * @return attachUserId
  **/
  @Schema(description = "Desc: The DocumentImagingFile AttachUserId  File: IMG.XREF  Attr: 5")
  public String getAttachUserId() {
    return attachUserId;
  }

  public void setAttachUserId(String attachUserId) {
    this.attachUserId = attachUserId;
  }

  public DocumentImagingFileInformation profileId(String profileId) {
    this.profileId = profileId;
    return this;
  }

   /**
   * Desc: The DocumentImagingFile ProfileId  File: IMG.XREF  Attr: 6
   * @return profileId
  **/
  @NotNull
  @Schema(required = true, description = "Desc: The DocumentImagingFile ProfileId  File: IMG.XREF  Attr: 6")
  public String getProfileId() {
    return profileId;
  }

  public void setProfileId(String profileId) {
    this.profileId = profileId;
  }

  public DocumentImagingFileInformation originalFilename(String originalFilename) {
    this.originalFilename = originalFilename;
    return this;
  }

   /**
   * Desc: The DocumentImagingFile OriginalFilename  File: IMG.XREF  Attr: 9
   * @return originalFilename
  **/
  @Schema(description = "Desc: The DocumentImagingFile OriginalFilename  File: IMG.XREF  Attr: 9")
  public String getOriginalFilename() {
    return originalFilename;
  }

  public void setOriginalFilename(String originalFilename) {
    this.originalFilename = originalFilename;
  }

  public DocumentImagingFileInformation authKeyId(String authKeyId) {
    this.authKeyId = authKeyId;
    return this;
  }

   /**
   * Desc: The DocumentImagingFile AuthKeyId  File: IMG.XREF  Attr: 11
   * @return authKeyId
  **/
  @Schema(description = "Desc: The DocumentImagingFile AuthKeyId  File: IMG.XREF  Attr: 11")
  public String getAuthKeyId() {
    return authKeyId;
  }

  public void setAuthKeyId(String authKeyId) {
    this.authKeyId = authKeyId;
  }

  public DocumentImagingFileInformation deleted(Boolean deleted) {
    this.deleted = deleted;
    return this;
  }

   /**
   * Desc: The DocumentImagingFile Deleted flag  File: IMG.XREF  Attr: 12
   * @return deleted
  **/
  @Schema(description = "Desc: The DocumentImagingFile Deleted flag  File: IMG.XREF  Attr: 12")
  public Boolean isDeleted() {
    return deleted;
  }

  public void setDeleted(Boolean deleted) {
    this.deleted = deleted;
  }

  public DocumentImagingFileInformation sizeBytes(Long sizeBytes) {
    this.sizeBytes = sizeBytes;
    return this;
  }

   /**
   * Desc: The DocumentImagingFile SizeBytes  File: IMG.XREF  Attr: 13
   * @return sizeBytes
  **/
  @Schema(description = "Desc: The DocumentImagingFile SizeBytes  File: IMG.XREF  Attr: 13")
  public Long getSizeBytes() {
    return sizeBytes;
  }

  public void setSizeBytes(Long sizeBytes) {
    this.sizeBytes = sizeBytes;
  }

  public DocumentImagingFileInformation descriptionIndexed(Boolean descriptionIndexed) {
    this.descriptionIndexed = descriptionIndexed;
    return this;
  }

   /**
   * Desc: The DocumentImagingFile DescriptionIndexed flag  File: IMG.XREF  Attr: 14
   * @return descriptionIndexed
  **/
  @Schema(description = "Desc: The DocumentImagingFile DescriptionIndexed flag  File: IMG.XREF  Attr: 14")
  public Boolean isDescriptionIndexed() {
    return descriptionIndexed;
  }

  public void setDescriptionIndexed(Boolean descriptionIndexed) {
    this.descriptionIndexed = descriptionIndexed;
  }

  public DocumentImagingFileInformation source(String source) {
    this.source = source;
    return this;
  }

   /**
   * Desc: The DocumentImagingFile Source  File: IMG.XREF  Attr: 15
   * @return source
  **/
  @Schema(description = "Desc: The DocumentImagingFile Source  File: IMG.XREF  Attr: 15")
  public String getSource() {
    return source;
  }

  public void setSource(String source) {
    this.source = source;
  }

  public DocumentImagingFileInformation subDirectory(String subDirectory) {
    this.subDirectory = subDirectory;
    return this;
  }

   /**
   * Desc: The DocumentImagingFile SubDirectory  File: IMG.XREF  Attr: 16
   * @return subDirectory
  **/
  @Schema(description = "Desc: The DocumentImagingFile SubDirectory  File: IMG.XREF  Attr: 16")
  public String getSubDirectory() {
    return subDirectory;
  }

  public void setSubDirectory(String subDirectory) {
    this.subDirectory = subDirectory;
  }

  public DocumentImagingFileInformation links(List<DocumentImagingFileLink> links) {
    this.links = links;
    return this;
  }

  public DocumentImagingFileInformation addLinksItem(DocumentImagingFileLink linksItem) {
    if (this.links == null) {
      this.links = new ArrayList<>();
    }
    this.links.add(linksItem);
    return this;
  }

   /**
   * A list of DocumentImagingFile Links
   * @return links
  **/
  @Valid
  @Schema(description = "A list of DocumentImagingFile Links")
  public List<DocumentImagingFileLink> getLinks() {
    return links;
  }

  public void setLinks(List<DocumentImagingFileLink> links) {
    this.links = links;
  }

  public DocumentImagingFileInformation pendingStorageLocationIds(List<String> pendingStorageLocationIds) {
    this.pendingStorageLocationIds = pendingStorageLocationIds;
    return this;
  }

  public DocumentImagingFileInformation addPendingStorageLocationIdsItem(String pendingStorageLocationIdsItem) {
    if (this.pendingStorageLocationIds == null) {
      this.pendingStorageLocationIds = new ArrayList<>();
    }
    this.pendingStorageLocationIds.add(pendingStorageLocationIdsItem);
    return this;
  }

   /**
   * A list of DocumentImagingFile PendingStorageLocationIds
   * @return pendingStorageLocationIds
  **/
  @Schema(description = "A list of DocumentImagingFile PendingStorageLocationIds")
  public List<String> getPendingStorageLocationIds() {
    return pendingStorageLocationIds;
  }

  public void setPendingStorageLocationIds(List<String> pendingStorageLocationIds) {
    this.pendingStorageLocationIds = pendingStorageLocationIds;
  }

  public DocumentImagingFileInformation storageLocationIds(List<String> storageLocationIds) {
    this.storageLocationIds = storageLocationIds;
    return this;
  }

  public DocumentImagingFileInformation addStorageLocationIdsItem(String storageLocationIdsItem) {
    if (this.storageLocationIds == null) {
      this.storageLocationIds = new ArrayList<>();
    }
    this.storageLocationIds.add(storageLocationIdsItem);
    return this;
  }

   /**
   * A list of DocumentImagingFile StorageLocationIds
   * @return storageLocationIds
  **/
  @Schema(description = "A list of DocumentImagingFile StorageLocationIds")
  public List<String> getStorageLocationIds() {
    return storageLocationIds;
  }

  public void setStorageLocationIds(List<String> storageLocationIds) {
    this.storageLocationIds = storageLocationIds;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DocumentImagingFileInformation documentImagingFileInformation = (DocumentImagingFileInformation) o;
    return Objects.equals(this.description, documentImagingFileInformation.description) &&
        Objects.equals(this.fileExtension, documentImagingFileInformation.fileExtension) &&
        Objects.equals(this.attachDateTime, documentImagingFileInformation.attachDateTime) &&
        Objects.equals(this.attachUserId, documentImagingFileInformation.attachUserId) &&
        Objects.equals(this.profileId, documentImagingFileInformation.profileId) &&
        Objects.equals(this.originalFilename, documentImagingFileInformation.originalFilename) &&
        Objects.equals(this.authKeyId, documentImagingFileInformation.authKeyId) &&
        Objects.equals(this.deleted, documentImagingFileInformation.deleted) &&
        Objects.equals(this.sizeBytes, documentImagingFileInformation.sizeBytes) &&
        Objects.equals(this.descriptionIndexed, documentImagingFileInformation.descriptionIndexed) &&
        Objects.equals(this.source, documentImagingFileInformation.source) &&
        Objects.equals(this.subDirectory, documentImagingFileInformation.subDirectory) &&
        Objects.equals(this.links, documentImagingFileInformation.links) &&
        Objects.equals(this.pendingStorageLocationIds, documentImagingFileInformation.pendingStorageLocationIds) &&
        Objects.equals(this.storageLocationIds, documentImagingFileInformation.storageLocationIds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, fileExtension, attachDateTime, attachUserId, profileId, originalFilename, authKeyId, deleted, sizeBytes, descriptionIndexed, source, subDirectory, links, pendingStorageLocationIds, storageLocationIds);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DocumentImagingFileInformation {\n");
    
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    fileExtension: ").append(toIndentedString(fileExtension)).append("\n");
    sb.append("    attachDateTime: ").append(toIndentedString(attachDateTime)).append("\n");
    sb.append("    attachUserId: ").append(toIndentedString(attachUserId)).append("\n");
    sb.append("    profileId: ").append(toIndentedString(profileId)).append("\n");
    sb.append("    originalFilename: ").append(toIndentedString(originalFilename)).append("\n");
    sb.append("    authKeyId: ").append(toIndentedString(authKeyId)).append("\n");
    sb.append("    deleted: ").append(toIndentedString(deleted)).append("\n");
    sb.append("    sizeBytes: ").append(toIndentedString(sizeBytes)).append("\n");
    sb.append("    descriptionIndexed: ").append(toIndentedString(descriptionIndexed)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    subDirectory: ").append(toIndentedString(subDirectory)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    pendingStorageLocationIds: ").append(toIndentedString(pendingStorageLocationIds)).append("\n");
    sb.append("    storageLocationIds: ").append(toIndentedString(storageLocationIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
