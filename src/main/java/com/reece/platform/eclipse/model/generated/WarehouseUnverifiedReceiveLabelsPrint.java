/*
 * Eclipse API Developer Documentation
 * This documentation provides a list of API endpoints provided in this release as well as examples for using the various API endpoints
 *
 * OpenAPI spec version: 9.1.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.reece.platform.eclipse.model.generated;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.reece.platform.eclipse.model.generated.WarehouseUnverifiedReceiveLabelsPrintItem;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * Warehouse Unverified Receive labels Print
 */
@Schema(description = "Warehouse Unverified Receive labels Print")

public class WarehouseUnverifiedReceiveLabelsPrint {
  @JsonProperty("receiveLabelFormat")
  private String receiveLabelFormat = null;

  @JsonProperty("printItemList")
  private List<WarehouseUnverifiedReceiveLabelsPrintItem> printItemList = new ArrayList<>();

  @JsonProperty("printerID")
  private String printerID = null;

  public WarehouseUnverifiedReceiveLabelsPrint receiveLabelFormat(String receiveLabelFormat) {
    this.receiveLabelFormat = receiveLabelFormat;
    return this;
  }

   /**
   * Receive label format
   * @return receiveLabelFormat
  **/
  @NotNull
  @Schema(required = true, description = "Receive label format")
  public String getReceiveLabelFormat() {
    return receiveLabelFormat;
  }

  public void setReceiveLabelFormat(String receiveLabelFormat) {
    this.receiveLabelFormat = receiveLabelFormat;
  }

  public WarehouseUnverifiedReceiveLabelsPrint printItemList(List<WarehouseUnverifiedReceiveLabelsPrintItem> printItemList) {
    this.printItemList = printItemList;
    return this;
  }

  public WarehouseUnverifiedReceiveLabelsPrint addPrintItemListItem(WarehouseUnverifiedReceiveLabelsPrintItem printItemListItem) {
    this.printItemList.add(printItemListItem);
    return this;
  }

   /**
   * List of items to print
   * @return printItemList
  **/
  @NotNull
  @Valid
  @Schema(required = true, description = "List of items to print")
  public List<WarehouseUnverifiedReceiveLabelsPrintItem> getPrintItemList() {
    return printItemList;
  }

  public void setPrintItemList(List<WarehouseUnverifiedReceiveLabelsPrintItem> printItemList) {
    this.printItemList = printItemList;
  }

  public WarehouseUnverifiedReceiveLabelsPrint printerID(String printerID) {
    this.printerID = printerID;
    return this;
  }

   /**
   * Not implemented
   * @return printerID
  **/
  @Schema(description = "Not implemented")
  public String getPrinterID() {
    return printerID;
  }

  public void setPrinterID(String printerID) {
    this.printerID = printerID;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WarehouseUnverifiedReceiveLabelsPrint warehouseUnverifiedReceiveLabelsPrint = (WarehouseUnverifiedReceiveLabelsPrint) o;
    return Objects.equals(this.receiveLabelFormat, warehouseUnverifiedReceiveLabelsPrint.receiveLabelFormat) &&
        Objects.equals(this.printItemList, warehouseUnverifiedReceiveLabelsPrint.printItemList) &&
        Objects.equals(this.printerID, warehouseUnverifiedReceiveLabelsPrint.printerID);
  }

  @Override
  public int hashCode() {
    return Objects.hash(receiveLabelFormat, printItemList, printerID);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WarehouseUnverifiedReceiveLabelsPrint {\n");
    
    sb.append("    receiveLabelFormat: ").append(toIndentedString(receiveLabelFormat)).append("\n");
    sb.append("    printItemList: ").append(toIndentedString(printItemList)).append("\n");
    sb.append("    printerID: ").append(toIndentedString(printerID)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
