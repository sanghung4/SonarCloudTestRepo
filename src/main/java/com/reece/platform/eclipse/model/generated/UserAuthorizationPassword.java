/*
 * Eclipse API Developer Documentation
 * This documentation provides a list of API endpoints provided in this release as well as examples for using the various API endpoints
 *
 * OpenAPI spec version: 9.1.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.reece.platform.eclipse.model.generated;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.time.LocalDateTime;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * Object representing an Eclipse UserAuthorizationPassword.
 */
@Schema(description = "Object representing an Eclipse UserAuthorizationPassword.")

public class UserAuthorizationPassword {
  @JsonProperty("authorizationPassword")
  private String authorizationPassword = null;

  @JsonProperty("oneTimeUseFlag")
  private Boolean oneTimeUseFlag = null;

  @JsonProperty("passwordExpireDate")
  private LocalDateTime passwordExpireDate = null;

  public UserAuthorizationPassword authorizationPassword(String authorizationPassword) {
    this.authorizationPassword = authorizationPassword;
    return this;
  }

   /**
   * Desc: The UserAuthorizationPassword AuthorizationPassword  File: INITIALS  Attr: 68,x
   * @return authorizationPassword
  **/
  @Schema(description = "Desc: The UserAuthorizationPassword AuthorizationPassword  File: INITIALS  Attr: 68,x")
  public String getAuthorizationPassword() {
    return authorizationPassword;
  }

  public void setAuthorizationPassword(String authorizationPassword) {
    this.authorizationPassword = authorizationPassword;
  }

  public UserAuthorizationPassword oneTimeUseFlag(Boolean oneTimeUseFlag) {
    this.oneTimeUseFlag = oneTimeUseFlag;
    return this;
  }

   /**
   * Desc: The UserAuthorizationPassword OneTimeUseFlag  File: INITIALS  Attr: 69,x
   * @return oneTimeUseFlag
  **/
  @Schema(description = "Desc: The UserAuthorizationPassword OneTimeUseFlag  File: INITIALS  Attr: 69,x")
  public Boolean isOneTimeUseFlag() {
    return oneTimeUseFlag;
  }

  public void setOneTimeUseFlag(Boolean oneTimeUseFlag) {
    this.oneTimeUseFlag = oneTimeUseFlag;
  }

  public UserAuthorizationPassword passwordExpireDate(LocalDateTime passwordExpireDate) {
    this.passwordExpireDate = passwordExpireDate;
    return this;
  }

   /**
   * Desc: The UserAuthorizationPassword PasswordExpireDate  File: INITIALS  Attr: 74,x
   * @return passwordExpireDate
  **/
  @Valid
  @Schema(description = "Desc: The UserAuthorizationPassword PasswordExpireDate  File: INITIALS  Attr: 74,x")
  public LocalDateTime getPasswordExpireDate() {
    return passwordExpireDate;
  }

  public void setPasswordExpireDate(LocalDateTime passwordExpireDate) {
    this.passwordExpireDate = passwordExpireDate;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserAuthorizationPassword userAuthorizationPassword = (UserAuthorizationPassword) o;
    return Objects.equals(this.authorizationPassword, userAuthorizationPassword.authorizationPassword) &&
        Objects.equals(this.oneTimeUseFlag, userAuthorizationPassword.oneTimeUseFlag) &&
        Objects.equals(this.passwordExpireDate, userAuthorizationPassword.passwordExpireDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authorizationPassword, oneTimeUseFlag, passwordExpireDate);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserAuthorizationPassword {\n");
    
    sb.append("    authorizationPassword: ").append(toIndentedString(authorizationPassword)).append("\n");
    sb.append("    oneTimeUseFlag: ").append(toIndentedString(oneTimeUseFlag)).append("\n");
    sb.append("    passwordExpireDate: ").append(toIndentedString(passwordExpireDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
