/*
 * Eclipse API Developer Documentation
 * This documentation provides a list of API endpoints provided in this release as well as examples for using the various API endpoints
 *
 * OpenAPI spec version: 9.1.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.reece.platform.eclipse.model.generated;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * Model to represent the Product&#x27;s Price Updating Ids maintenance  We have a control record that affects the display name   UPC.UD.LABELS -- Refer for more information
 */
@Schema(description = "Model to represent the Product's Price Updating Ids maintenance  We have a control record that affects the display name   UPC.UD.LABELS -- Refer for more information")

public class PricingUpdateIdentifier {
  @JsonProperty("index")
  private Integer index = null;

  @JsonProperty("description")
  private String description = null;

  @JsonProperty("value")
  private String value = null;

  public PricingUpdateIdentifier index(Integer index) {
    this.index = index;
    return this;
  }

   /**
   * Index of the User Defined Field.   It represents Number from 1-10
   * @return index
  **/
  @Schema(description = "Index of the User Defined Field.   It represents Number from 1-10")
  public Integer getIndex() {
    return index;
  }

  public void setIndex(Integer index) {
    this.index = index;
  }

  public PricingUpdateIdentifier description(String description) {
    this.description = description;
    return this;
  }

   /**
   * User Defined Label.   It would generally be UserDefined1, UserDefined2.... UserDefined10.  In case if any value is configured in the Control Record, then the label at the index  would change.
   * @return description
  **/
  @Schema(description = "User Defined Label.   It would generally be UserDefined1, UserDefined2.... UserDefined10.  In case if any value is configured in the Control Record, then the label at the index  would change.")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public PricingUpdateIdentifier value(String value) {
    this.value = value;
    return this;
  }

   /**
   * User Defined Value  Attribute : 63,X
   * @return value
  **/
  @Schema(description = "User Defined Value  Attribute : 63,X")
  public String getValue() {
    return value;
  }

  public void setValue(String value) {
    this.value = value;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PricingUpdateIdentifier pricingUpdateIdentifier = (PricingUpdateIdentifier) o;
    return Objects.equals(this.index, pricingUpdateIdentifier.index) &&
        Objects.equals(this.description, pricingUpdateIdentifier.description) &&
        Objects.equals(this.value, pricingUpdateIdentifier.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(index, description, value);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PricingUpdateIdentifier {\n");
    
    sb.append("    index: ").append(toIndentedString(index)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
