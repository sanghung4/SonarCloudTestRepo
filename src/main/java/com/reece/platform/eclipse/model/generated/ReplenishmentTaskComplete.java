/*
 * Eclipse API Developer Documentation
 * This documentation provides a list of API endpoints provided in this release as well as examples for using the various API endpoints
 *
 * OpenAPI spec version: 9.1.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.reece.platform.eclipse.model.generated;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * Object representing a Replenishment Task.
 */
@Schema(description = "Object representing a Replenishment Task.")

public class ReplenishmentTaskComplete {
  @JsonProperty("pickId")
  private String pickId = null;

  @JsonProperty("branchId")
  private String branchId = null;

  @JsonProperty("picker")
  private String picker = null;

  @JsonProperty("productId")
  private Integer productId = null;

  @JsonProperty("location")
  private String location = null;

  @JsonProperty("putLocation")
  private String putLocation = null;

  @JsonProperty("quantity")
  private Integer quantity = null;

  @JsonProperty("tote")
  private String tote = null;

  @JsonProperty("scannedPutLoc")
  private Boolean scannedPutLoc = null;

  @JsonProperty("lot")
  private String lot = null;

  @JsonProperty("changePickLocation")
  private Boolean changePickLocation = null;

  @JsonProperty("changePutLocation")
  private Boolean changePutLocation = null;

  @JsonProperty("changeLot")
  private Boolean changeLot = null;

  @JsonProperty("changeQty")
  private Boolean changeQty = null;

  @JsonProperty("isOverrideProduct")
  private Boolean isOverrideProduct = null;

  @JsonProperty("quantityConfirmation")
  private Integer quantityConfirmation = null;

  @JsonProperty("warehouseID")
  private String warehouseID = null;

  public ReplenishmentTaskComplete pickId(String pickId) {
    this.pickId = pickId;
    return this;
  }

   /**
   * Replenishment Pick ID
   * @return pickId
  **/
  @NotNull
  @Schema(required = true, description = "Replenishment Pick ID")
  public String getPickId() {
    return pickId;
  }

  public void setPickId(String pickId) {
    this.pickId = pickId;
  }

  public ReplenishmentTaskComplete branchId(String branchId) {
    this.branchId = branchId;
    return this;
  }

   /**
   * The Branch Id
   * @return branchId
  **/
  @NotNull
  @Schema(required = true, description = "The Branch Id")
  public String getBranchId() {
    return branchId;
  }

  public void setBranchId(String branchId) {
    this.branchId = branchId;
  }

  public ReplenishmentTaskComplete picker(String picker) {
    this.picker = picker;
    return this;
  }

   /**
   * The Picker
   * @return picker
  **/
  @NotNull
  @Schema(required = true, description = "The Picker")
  public String getPicker() {
    return picker;
  }

  public void setPicker(String picker) {
    this.picker = picker;
  }

  public ReplenishmentTaskComplete productId(Integer productId) {
    this.productId = productId;
    return this;
  }

   /**
   * Product ID
   * @return productId
  **/
  @NotNull
  @Schema(required = true, description = "Product ID")
  public Integer getProductId() {
    return productId;
  }

  public void setProductId(Integer productId) {
    this.productId = productId;
  }

  public ReplenishmentTaskComplete location(String location) {
    this.location = location;
    return this;
  }

   /**
   * Pick Location
   * @return location
  **/
  @NotNull
  @Schema(required = true, description = "Pick Location")
  public String getLocation() {
    return location;
  }

  public void setLocation(String location) {
    this.location = location;
  }

  public ReplenishmentTaskComplete putLocation(String putLocation) {
    this.putLocation = putLocation;
    return this;
  }

   /**
   * Put Away Location
   * @return putLocation
  **/
  @NotNull
  @Schema(required = true, description = "Put Away Location")
  public String getPutLocation() {
    return putLocation;
  }

  public void setPutLocation(String putLocation) {
    this.putLocation = putLocation;
  }

  public ReplenishmentTaskComplete quantity(Integer quantity) {
    this.quantity = quantity;
    return this;
  }

   /**
   * Quantity
   * @return quantity
  **/
  @NotNull
  @Schema(required = true, description = "Quantity")
  public Integer getQuantity() {
    return quantity;
  }

  public void setQuantity(Integer quantity) {
    this.quantity = quantity;
  }

  public ReplenishmentTaskComplete tote(String tote) {
    this.tote = tote;
    return this;
  }

   /**
   * Tote
   * @return tote
  **/
  @Schema(description = "Tote")
  public String getTote() {
    return tote;
  }

  public void setTote(String tote) {
    this.tote = tote;
  }

  public ReplenishmentTaskComplete scannedPutLoc(Boolean scannedPutLoc) {
    this.scannedPutLoc = scannedPutLoc;
    return this;
  }

   /**
   * Set to true if the user scanned the put location, updated or not.
   * @return scannedPutLoc
  **/
  @NotNull
  @Schema(required = true, description = "Set to true if the user scanned the put location, updated or not.")
  public Boolean isScannedPutLoc() {
    return scannedPutLoc;
  }

  public void setScannedPutLoc(Boolean scannedPutLoc) {
    this.scannedPutLoc = scannedPutLoc;
  }

  public ReplenishmentTaskComplete lot(String lot) {
    this.lot = lot;
    return this;
  }

   /**
   * Lot
   * @return lot
  **/
  @Schema(description = "Lot")
  public String getLot() {
    return lot;
  }

  public void setLot(String lot) {
    this.lot = lot;
  }

  public ReplenishmentTaskComplete changePickLocation(Boolean changePickLocation) {
    this.changePickLocation = changePickLocation;
    return this;
  }

   /**
   * Set to true to approve change of pick location.
   * @return changePickLocation
  **/
  @Schema(description = "Set to true to approve change of pick location.")
  public Boolean isChangePickLocation() {
    return changePickLocation;
  }

  public void setChangePickLocation(Boolean changePickLocation) {
    this.changePickLocation = changePickLocation;
  }

  public ReplenishmentTaskComplete changePutLocation(Boolean changePutLocation) {
    this.changePutLocation = changePutLocation;
    return this;
  }

   /**
   * Set to true to approve change of put location.
   * @return changePutLocation
  **/
  @Schema(description = "Set to true to approve change of put location.")
  public Boolean isChangePutLocation() {
    return changePutLocation;
  }

  public void setChangePutLocation(Boolean changePutLocation) {
    this.changePutLocation = changePutLocation;
  }

  public ReplenishmentTaskComplete changeLot(Boolean changeLot) {
    this.changeLot = changeLot;
    return this;
  }

   /**
   * Set to true to approve change of Lot.
   * @return changeLot
  **/
  @Schema(description = "Set to true to approve change of Lot.")
  public Boolean isChangeLot() {
    return changeLot;
  }

  public void setChangeLot(Boolean changeLot) {
    this.changeLot = changeLot;
  }

  public ReplenishmentTaskComplete changeQty(Boolean changeQty) {
    this.changeQty = changeQty;
    return this;
  }

   /**
   * Set to true to approve change of quantity.
   * @return changeQty
  **/
  @Schema(description = "Set to true to approve change of quantity.")
  public Boolean isChangeQty() {
    return changeQty;
  }

  public void setChangeQty(Boolean changeQty) {
    this.changeQty = changeQty;
  }

  public ReplenishmentTaskComplete isOverrideProduct(Boolean isOverrideProduct) {
    this.isOverrideProduct = isOverrideProduct;
    return this;
  }

   /**
   * Set to true if the replenish comes from a scanned Override.
   * @return isOverrideProduct
  **/
  @Schema(description = "Set to true if the replenish comes from a scanned Override.")
  public Boolean isIsOverrideProduct() {
    return isOverrideProduct;
  }

  public void setIsOverrideProduct(Boolean isOverrideProduct) {
    this.isOverrideProduct = isOverrideProduct;
  }

  public ReplenishmentTaskComplete quantityConfirmation(Integer quantityConfirmation) {
    this.quantityConfirmation = quantityConfirmation;
    return this;
  }

   /**
   * Quantity
   * @return quantityConfirmation
  **/
  @Schema(description = "Quantity")
  public Integer getQuantityConfirmation() {
    return quantityConfirmation;
  }

  public void setQuantityConfirmation(Integer quantityConfirmation) {
    this.quantityConfirmation = quantityConfirmation;
  }

  public ReplenishmentTaskComplete warehouseID(String warehouseID) {
    this.warehouseID = warehouseID;
    return this;
  }

   /**
   * Warehouse Queue ID
   * @return warehouseID
  **/
  @Schema(description = "Warehouse Queue ID")
  public String getWarehouseID() {
    return warehouseID;
  }

  public void setWarehouseID(String warehouseID) {
    this.warehouseID = warehouseID;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReplenishmentTaskComplete replenishmentTaskComplete = (ReplenishmentTaskComplete) o;
    return Objects.equals(this.pickId, replenishmentTaskComplete.pickId) &&
        Objects.equals(this.branchId, replenishmentTaskComplete.branchId) &&
        Objects.equals(this.picker, replenishmentTaskComplete.picker) &&
        Objects.equals(this.productId, replenishmentTaskComplete.productId) &&
        Objects.equals(this.location, replenishmentTaskComplete.location) &&
        Objects.equals(this.putLocation, replenishmentTaskComplete.putLocation) &&
        Objects.equals(this.quantity, replenishmentTaskComplete.quantity) &&
        Objects.equals(this.tote, replenishmentTaskComplete.tote) &&
        Objects.equals(this.scannedPutLoc, replenishmentTaskComplete.scannedPutLoc) &&
        Objects.equals(this.lot, replenishmentTaskComplete.lot) &&
        Objects.equals(this.changePickLocation, replenishmentTaskComplete.changePickLocation) &&
        Objects.equals(this.changePutLocation, replenishmentTaskComplete.changePutLocation) &&
        Objects.equals(this.changeLot, replenishmentTaskComplete.changeLot) &&
        Objects.equals(this.changeQty, replenishmentTaskComplete.changeQty) &&
        Objects.equals(this.isOverrideProduct, replenishmentTaskComplete.isOverrideProduct) &&
        Objects.equals(this.quantityConfirmation, replenishmentTaskComplete.quantityConfirmation) &&
        Objects.equals(this.warehouseID, replenishmentTaskComplete.warehouseID);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pickId, branchId, picker, productId, location, putLocation, quantity, tote, scannedPutLoc, lot, changePickLocation, changePutLocation, changeLot, changeQty, isOverrideProduct, quantityConfirmation, warehouseID);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReplenishmentTaskComplete {\n");
    
    sb.append("    pickId: ").append(toIndentedString(pickId)).append("\n");
    sb.append("    branchId: ").append(toIndentedString(branchId)).append("\n");
    sb.append("    picker: ").append(toIndentedString(picker)).append("\n");
    sb.append("    productId: ").append(toIndentedString(productId)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    putLocation: ").append(toIndentedString(putLocation)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    tote: ").append(toIndentedString(tote)).append("\n");
    sb.append("    scannedPutLoc: ").append(toIndentedString(scannedPutLoc)).append("\n");
    sb.append("    lot: ").append(toIndentedString(lot)).append("\n");
    sb.append("    changePickLocation: ").append(toIndentedString(changePickLocation)).append("\n");
    sb.append("    changePutLocation: ").append(toIndentedString(changePutLocation)).append("\n");
    sb.append("    changeLot: ").append(toIndentedString(changeLot)).append("\n");
    sb.append("    changeQty: ").append(toIndentedString(changeQty)).append("\n");
    sb.append("    isOverrideProduct: ").append(toIndentedString(isOverrideProduct)).append("\n");
    sb.append("    quantityConfirmation: ").append(toIndentedString(quantityConfirmation)).append("\n");
    sb.append("    warehouseID: ").append(toIndentedString(warehouseID)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
