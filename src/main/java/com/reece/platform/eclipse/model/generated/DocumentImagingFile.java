/*
 * Eclipse API Developer Documentation
 * This documentation provides a list of API endpoints provided in this release as well as examples for using the various API endpoints
 *
 * OpenAPI spec version: 9.1.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.reece.platform.eclipse.model.generated;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.v3.oas.annotations.media.Schema;
import javax.validation.Valid;
/**
 * Object representing an Eclipse DocumentImagingFile.
 */
@Schema(description = "Object representing an Eclipse DocumentImagingFile.")

public class DocumentImagingFile {
  @JsonProperty("updateKey")
  private String updateKey = null;

  @JsonProperty("id")
  private String id = null;

  @JsonProperty("base64Document")
  private String base64Document = null;

  @JsonProperty("fileInformation")
  private DocumentImagingFileInformation fileInformation = null;

  public DocumentImagingFile updateKey(String updateKey) {
    this.updateKey = updateKey;
    return this;
  }

   /**
   * Update key to handle concurrency during updates within Eclipse
   * @return updateKey
  **/
  @Schema(description = "Update key to handle concurrency during updates within Eclipse")
  public String getUpdateKey() {
    return updateKey;
  }

  public void setUpdateKey(String updateKey) {
    this.updateKey = updateKey;
  }

  public DocumentImagingFile id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Eclipse ID for the record
   * @return id
  **/
  @Schema(description = "Eclipse ID for the record")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public DocumentImagingFile base64Document(String base64Document) {
    this.base64Document = base64Document;
    return this;
  }

   /**
   * Base64 encoded version of the file
   * @return base64Document
  **/
  @Schema(description = "Base64 encoded version of the file")
  public String getBase64Document() {
    return base64Document;
  }

  public void setBase64Document(String base64Document) {
    this.base64Document = base64Document;
  }

  public DocumentImagingFile fileInformation(DocumentImagingFileInformation fileInformation) {
    this.fileInformation = fileInformation;
    return this;
  }

   /**
   * Get fileInformation
   * @return fileInformation
  **/
  @Valid
  @Schema(description = "")
  public DocumentImagingFileInformation getFileInformation() {
    return fileInformation;
  }

  public void setFileInformation(DocumentImagingFileInformation fileInformation) {
    this.fileInformation = fileInformation;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DocumentImagingFile documentImagingFile = (DocumentImagingFile) o;
    return Objects.equals(this.updateKey, documentImagingFile.updateKey) &&
        Objects.equals(this.id, documentImagingFile.id) &&
        Objects.equals(this.base64Document, documentImagingFile.base64Document) &&
        Objects.equals(this.fileInformation, documentImagingFile.fileInformation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(updateKey, id, base64Document, fileInformation);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DocumentImagingFile {\n");
    
    sb.append("    updateKey: ").append(toIndentedString(updateKey)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    base64Document: ").append(toIndentedString(base64Document)).append("\n");
    sb.append("    fileInformation: ").append(toIndentedString(fileInformation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
