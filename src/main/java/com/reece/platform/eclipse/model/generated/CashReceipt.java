/*
 * Eclipse API Developer Documentation
 * This documentation provides a list of API endpoints provided in this release as well as examples for using the various API endpoints
 *
 * OpenAPI spec version: 9.1.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.reece.platform.eclipse.model.generated;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.reece.platform.eclipse.model.generated.CRAgingInfo;
import com.reece.platform.eclipse.model.generated.CashReceiptApplicationHistory;
import com.reece.platform.eclipse.model.generated.CashReceiptGlPosting;
import com.reece.platform.eclipse.model.generated.CashReceiptInvoice;
import com.reece.platform.eclipse.model.generated.Money;
import io.swagger.v3.oas.annotations.media.Schema;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * Object representing an Eclipse CashReceipt.
 */
@Schema(description = "Object representing an Eclipse CashReceipt.")

public class CashReceipt {
  @JsonProperty("updateKey")
  private String updateKey = null;

  @JsonProperty("id")
  private String id = null;

  @JsonProperty("billToId")
  private Integer billToId = null;

  @JsonProperty("glBranchId")
  private String glBranchId = null;

  @JsonProperty("bank")
  private String bank = null;

  @JsonProperty("createDate")
  private LocalDateTime createDate = null;

  @JsonProperty("shipToId")
  private Integer shipToId = null;

  @JsonProperty("invoiceNumber")
  private Integer invoiceNumber = null;

  @JsonProperty("invoiceDate")
  private LocalDateTime invoiceDate = null;

  @JsonProperty("checkNumber")
  private String checkNumber = null;

  @JsonProperty("discountableAmount")
  private Money discountableAmount = null;

  @JsonProperty("checkAmount")
  private Money checkAmount = null;

  @JsonProperty("balanceDue")
  private Money balanceDue = null;

  @JsonProperty("handlingCode")
  private String handlingCode = null;

  @JsonProperty("invoiceStatus")
  private String invoiceStatus = null;

  @JsonProperty("paymentDate")
  private LocalDateTime paymentDate = null;

  @JsonProperty("graceDays")
  private Integer graceDays = null;

  @JsonProperty("crStatus")
  private String crStatus = null;

  @JsonProperty("batchId")
  private String batchId = null;

  @JsonProperty("lastUpdateUserId")
  private String lastUpdateUserId = null;

  @JsonProperty("lastUpdateDate")
  private LocalDateTime lastUpdateDate = null;

  @JsonProperty("lastUpdateTime")
  private LocalDateTime lastUpdateTime = null;

  @JsonProperty("currency")
  private String currency = null;

  @JsonProperty("exchangeRate")
  private Double exchangeRate = null;

  @JsonProperty("reasonForChange")
  private String reasonForChange = null;

  @JsonProperty("glPostings")
  private List<CashReceiptGlPosting> glPostings = null;

  @JsonProperty("cashReceiptInvoices")
  private List<CashReceiptInvoice> cashReceiptInvoices = null;

  @JsonProperty("applicationHistory")
  private List<CashReceiptApplicationHistory> applicationHistory = null;

  @JsonProperty("agingInfo")
  private CRAgingInfo agingInfo = null;

  public CashReceipt updateKey(String updateKey) {
    this.updateKey = updateKey;
    return this;
  }

   /**
   * Update key to handle concurrency during updates within Eclipse
   * @return updateKey
  **/
  @Schema(description = "Update key to handle concurrency during updates within Eclipse")
  public String getUpdateKey() {
    return updateKey;
  }

  public void setUpdateKey(String updateKey) {
    this.updateKey = updateKey;
  }

  public CashReceipt id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Eclipse ID for the record
   * @return id
  **/
  @Schema(description = "Eclipse ID for the record")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public CashReceipt billToId(Integer billToId) {
    this.billToId = billToId;
    return this;
  }

   /**
   * Desc: The CashReceipt BillToId  File: LEDGER  Attr: 1
   * @return billToId
  **/
  @Schema(description = "Desc: The CashReceipt BillToId  File: LEDGER  Attr: 1")
  public Integer getBillToId() {
    return billToId;
  }

  public void setBillToId(Integer billToId) {
    this.billToId = billToId;
  }

  public CashReceipt glBranchId(String glBranchId) {
    this.glBranchId = glBranchId;
    return this;
  }

   /**
   * Desc: The CashReceipt GlBranchId  File: LEDGER  Attr: 2,1,3
   * @return glBranchId
  **/
  @NotNull
  @Schema(required = true, description = "Desc: The CashReceipt GlBranchId  File: LEDGER  Attr: 2,1,3")
  public String getGlBranchId() {
    return glBranchId;
  }

  public void setGlBranchId(String glBranchId) {
    this.glBranchId = glBranchId;
  }

  public CashReceipt bank(String bank) {
    this.bank = bank;
    return this;
  }

   /**
   * Bank to deposit the applied cash.
   * @return bank
  **/
  @NotNull
  @Schema(required = true, description = "Bank to deposit the applied cash.")
  public String getBank() {
    return bank;
  }

  public void setBank(String bank) {
    this.bank = bank;
  }

  public CashReceipt createDate(LocalDateTime createDate) {
    this.createDate = createDate;
    return this;
  }

   /**
   * Desc: The CashReceipt CreateDate  File: LEDGER  Attr: 4
   * @return createDate
  **/
  @Valid
  @Schema(description = "Desc: The CashReceipt CreateDate  File: LEDGER  Attr: 4")
  public LocalDateTime getCreateDate() {
    return createDate;
  }

  public void setCreateDate(LocalDateTime createDate) {
    this.createDate = createDate;
  }

  public CashReceipt shipToId(Integer shipToId) {
    this.shipToId = shipToId;
    return this;
  }

   /**
   * Desc: The CashReceipt ShipToId  File: LEDGER  Attr: 5
   * @return shipToId
  **/
  @Schema(description = "Desc: The CashReceipt ShipToId  File: LEDGER  Attr: 5")
  public Integer getShipToId() {
    return shipToId;
  }

  public void setShipToId(Integer shipToId) {
    this.shipToId = shipToId;
  }

  public CashReceipt invoiceNumber(Integer invoiceNumber) {
    this.invoiceNumber = invoiceNumber;
    return this;
  }

   /**
   * Desc: The CashReceipt InvoiceNumber  File: LEDGER  Attr: 8
   * @return invoiceNumber
  **/
  @Schema(description = "Desc: The CashReceipt InvoiceNumber  File: LEDGER  Attr: 8")
  public Integer getInvoiceNumber() {
    return invoiceNumber;
  }

  public void setInvoiceNumber(Integer invoiceNumber) {
    this.invoiceNumber = invoiceNumber;
  }

  public CashReceipt invoiceDate(LocalDateTime invoiceDate) {
    this.invoiceDate = invoiceDate;
    return this;
  }

   /**
   * Desc: The CashReceipt InvoiceDate  File: LEDGER  Attr: 10
   * @return invoiceDate
  **/
  @Valid
  @Schema(description = "Desc: The CashReceipt InvoiceDate  File: LEDGER  Attr: 10")
  public LocalDateTime getInvoiceDate() {
    return invoiceDate;
  }

  public void setInvoiceDate(LocalDateTime invoiceDate) {
    this.invoiceDate = invoiceDate;
  }

  public CashReceipt checkNumber(String checkNumber) {
    this.checkNumber = checkNumber;
    return this;
  }

   /**
   * Desc: The CashReceipt CheckNumber  File: LEDGER  Attr: 13
   * @return checkNumber
  **/
  @NotNull
  @Schema(required = true, description = "Desc: The CashReceipt CheckNumber  File: LEDGER  Attr: 13")
  public String getCheckNumber() {
    return checkNumber;
  }

  public void setCheckNumber(String checkNumber) {
    this.checkNumber = checkNumber;
  }

  public CashReceipt discountableAmount(Money discountableAmount) {
    this.discountableAmount = discountableAmount;
    return this;
  }

   /**
   * Get discountableAmount
   * @return discountableAmount
  **/
  @Valid
  @Schema(description = "")
  public Money getDiscountableAmount() {
    return discountableAmount;
  }

  public void setDiscountableAmount(Money discountableAmount) {
    this.discountableAmount = discountableAmount;
  }

  public CashReceipt checkAmount(Money checkAmount) {
    this.checkAmount = checkAmount;
    return this;
  }

   /**
   * Get checkAmount
   * @return checkAmount
  **/
  @Valid
  @Schema(description = "")
  public Money getCheckAmount() {
    return checkAmount;
  }

  public void setCheckAmount(Money checkAmount) {
    this.checkAmount = checkAmount;
  }

  public CashReceipt balanceDue(Money balanceDue) {
    this.balanceDue = balanceDue;
    return this;
  }

   /**
   * Get balanceDue
   * @return balanceDue
  **/
  @Valid
  @Schema(description = "")
  public Money getBalanceDue() {
    return balanceDue;
  }

  public void setBalanceDue(Money balanceDue) {
    this.balanceDue = balanceDue;
  }

  public CashReceipt handlingCode(String handlingCode) {
    this.handlingCode = handlingCode;
    return this;
  }

   /**
   * Desc: The CashReceiptAccrualRegister HandlingCode  File: AR  Attr: 18
   * @return handlingCode
  **/
  @Schema(description = "Desc: The CashReceiptAccrualRegister HandlingCode  File: AR  Attr: 18")
  public String getHandlingCode() {
    return handlingCode;
  }

  public void setHandlingCode(String handlingCode) {
    this.handlingCode = handlingCode;
  }

  public CashReceipt invoiceStatus(String invoiceStatus) {
    this.invoiceStatus = invoiceStatus;
    return this;
  }

   /**
   * Desc: The CashReceipt Status  File: AR  Attr: 20
   * @return invoiceStatus
  **/
  @Schema(description = "Desc: The CashReceipt Status  File: AR  Attr: 20")
  public String getInvoiceStatus() {
    return invoiceStatus;
  }

  public void setInvoiceStatus(String invoiceStatus) {
    this.invoiceStatus = invoiceStatus;
  }

  public CashReceipt paymentDate(LocalDateTime paymentDate) {
    this.paymentDate = paymentDate;
    return this;
  }

   /**
   * Desc: The CashReceipt PaymentDate  File: LEDGER  Attr: 23
   * @return paymentDate
  **/
  @Valid
  @Schema(description = "Desc: The CashReceipt PaymentDate  File: LEDGER  Attr: 23")
  public LocalDateTime getPaymentDate() {
    return paymentDate;
  }

  public void setPaymentDate(LocalDateTime paymentDate) {
    this.paymentDate = paymentDate;
  }

  public CashReceipt graceDays(Integer graceDays) {
    this.graceDays = graceDays;
    return this;
  }

   /**
   * Desc: The CashReceipt GraceDays  File: AR  Attr: 26
   * @return graceDays
  **/
  @Schema(description = "Desc: The CashReceipt GraceDays  File: AR  Attr: 26")
  public Integer getGraceDays() {
    return graceDays;
  }

  public void setGraceDays(Integer graceDays) {
    this.graceDays = graceDays;
  }

  public CashReceipt crStatus(String crStatus) {
    this.crStatus = crStatus;
    return this;
  }

   /**
   * Status code can be used to display only those invoices   with a particular status code  File: AR  Attr: 27
   * @return crStatus
  **/
  @Schema(description = "Status code can be used to display only those invoices   with a particular status code  File: AR  Attr: 27")
  public String getCrStatus() {
    return crStatus;
  }

  public void setCrStatus(String crStatus) {
    this.crStatus = crStatus;
  }

  public CashReceipt batchId(String batchId) {
    this.batchId = batchId;
    return this;
  }

   /**
   * Desc: The CashReceipt BatchId  File: LEDGER  Attr: 28
   * @return batchId
  **/
  @Schema(description = "Desc: The CashReceipt BatchId  File: LEDGER  Attr: 28")
  public String getBatchId() {
    return batchId;
  }

  public void setBatchId(String batchId) {
    this.batchId = batchId;
  }

  public CashReceipt lastUpdateUserId(String lastUpdateUserId) {
    this.lastUpdateUserId = lastUpdateUserId;
    return this;
  }

   /**
   * Desc: The CashReceipt LastUpdateUserId  File: LEDGER  Attr: 59,1
   * @return lastUpdateUserId
  **/
  @Schema(description = "Desc: The CashReceipt LastUpdateUserId  File: LEDGER  Attr: 59,1")
  public String getLastUpdateUserId() {
    return lastUpdateUserId;
  }

  public void setLastUpdateUserId(String lastUpdateUserId) {
    this.lastUpdateUserId = lastUpdateUserId;
  }

  public CashReceipt lastUpdateDate(LocalDateTime lastUpdateDate) {
    this.lastUpdateDate = lastUpdateDate;
    return this;
  }

   /**
   * Desc: The CashReceipt LastUpdateDate  File: LEDGER  Attr: 59,2
   * @return lastUpdateDate
  **/
  @Valid
  @Schema(description = "Desc: The CashReceipt LastUpdateDate  File: LEDGER  Attr: 59,2")
  public LocalDateTime getLastUpdateDate() {
    return lastUpdateDate;
  }

  public void setLastUpdateDate(LocalDateTime lastUpdateDate) {
    this.lastUpdateDate = lastUpdateDate;
  }

  public CashReceipt lastUpdateTime(LocalDateTime lastUpdateTime) {
    this.lastUpdateTime = lastUpdateTime;
    return this;
  }

   /**
   * Desc: The CashReceipt LastUpdateTime  File: LEDGER  Attr: 59,3
   * @return lastUpdateTime
  **/
  @Valid
  @Schema(description = "Desc: The CashReceipt LastUpdateTime  File: LEDGER  Attr: 59,3")
  public LocalDateTime getLastUpdateTime() {
    return lastUpdateTime;
  }

  public void setLastUpdateTime(LocalDateTime lastUpdateTime) {
    this.lastUpdateTime = lastUpdateTime;
  }

  public CashReceipt currency(String currency) {
    this.currency = currency;
    return this;
  }

   /**
   * Desc: The CashReceipt Currency  File: LEDGER  Attr: 92,1,1
   * @return currency
  **/
  @Schema(description = "Desc: The CashReceipt Currency  File: LEDGER  Attr: 92,1,1")
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(String currency) {
    this.currency = currency;
  }

  public CashReceipt exchangeRate(Double exchangeRate) {
    this.exchangeRate = exchangeRate;
    return this;
  }

   /**
   * Desc: The CashReceipt ExchangeRate  File: LEDGER  Attr: 92,1,2
   * @return exchangeRate
  **/
  @Schema(description = "Desc: The CashReceipt ExchangeRate  File: LEDGER  Attr: 92,1,2")
  public Double getExchangeRate() {
    return exchangeRate;
  }

  public void setExchangeRate(Double exchangeRate) {
    this.exchangeRate = exchangeRate;
  }

  public CashReceipt reasonForChange(String reasonForChange) {
    this.reasonForChange = reasonForChange;
    return this;
  }

   /**
   * Change reason to Log
   * @return reasonForChange
  **/
  @Schema(description = "Change reason to Log")
  public String getReasonForChange() {
    return reasonForChange;
  }

  public void setReasonForChange(String reasonForChange) {
    this.reasonForChange = reasonForChange;
  }

  public CashReceipt glPostings(List<CashReceiptGlPosting> glPostings) {
    this.glPostings = glPostings;
    return this;
  }

  public CashReceipt addGlPostingsItem(CashReceiptGlPosting glPostingsItem) {
    if (this.glPostings == null) {
      this.glPostings = new ArrayList<>();
    }
    this.glPostings.add(glPostingsItem);
    return this;
  }

   /**
   * A list of CashReceipt GlPostings
   * @return glPostings
  **/
  @Valid
  @Schema(description = "A list of CashReceipt GlPostings")
  public List<CashReceiptGlPosting> getGlPostings() {
    return glPostings;
  }

  public void setGlPostings(List<CashReceiptGlPosting> glPostings) {
    this.glPostings = glPostings;
  }

  public CashReceipt cashReceiptInvoices(List<CashReceiptInvoice> cashReceiptInvoices) {
    this.cashReceiptInvoices = cashReceiptInvoices;
    return this;
  }

  public CashReceipt addCashReceiptInvoicesItem(CashReceiptInvoice cashReceiptInvoicesItem) {
    if (this.cashReceiptInvoices == null) {
      this.cashReceiptInvoices = new ArrayList<>();
    }
    this.cashReceiptInvoices.add(cashReceiptInvoicesItem);
    return this;
  }

   /**
   * CashReceipt invoices information
   * @return cashReceiptInvoices
  **/
  @Valid
  @Schema(description = "CashReceipt invoices information")
  public List<CashReceiptInvoice> getCashReceiptInvoices() {
    return cashReceiptInvoices;
  }

  public void setCashReceiptInvoices(List<CashReceiptInvoice> cashReceiptInvoices) {
    this.cashReceiptInvoices = cashReceiptInvoices;
  }

  public CashReceipt applicationHistory(List<CashReceiptApplicationHistory> applicationHistory) {
    this.applicationHistory = applicationHistory;
    return this;
  }

  public CashReceipt addApplicationHistoryItem(CashReceiptApplicationHistory applicationHistoryItem) {
    if (this.applicationHistory == null) {
      this.applicationHistory = new ArrayList<>();
    }
    this.applicationHistory.add(applicationHistoryItem);
    return this;
  }

   /**
   * CashReceipt application History information
   * @return applicationHistory
  **/
  @Valid
  @Schema(description = "CashReceipt application History information")
  public List<CashReceiptApplicationHistory> getApplicationHistory() {
    return applicationHistory;
  }

  public void setApplicationHistory(List<CashReceiptApplicationHistory> applicationHistory) {
    this.applicationHistory = applicationHistory;
  }

  public CashReceipt agingInfo(CRAgingInfo agingInfo) {
    this.agingInfo = agingInfo;
    return this;
  }

   /**
   * Get agingInfo
   * @return agingInfo
  **/
  @Valid
  @Schema(description = "")
  public CRAgingInfo getAgingInfo() {
    return agingInfo;
  }

  public void setAgingInfo(CRAgingInfo agingInfo) {
    this.agingInfo = agingInfo;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CashReceipt cashReceipt = (CashReceipt) o;
    return Objects.equals(this.updateKey, cashReceipt.updateKey) &&
        Objects.equals(this.id, cashReceipt.id) &&
        Objects.equals(this.billToId, cashReceipt.billToId) &&
        Objects.equals(this.glBranchId, cashReceipt.glBranchId) &&
        Objects.equals(this.bank, cashReceipt.bank) &&
        Objects.equals(this.createDate, cashReceipt.createDate) &&
        Objects.equals(this.shipToId, cashReceipt.shipToId) &&
        Objects.equals(this.invoiceNumber, cashReceipt.invoiceNumber) &&
        Objects.equals(this.invoiceDate, cashReceipt.invoiceDate) &&
        Objects.equals(this.checkNumber, cashReceipt.checkNumber) &&
        Objects.equals(this.discountableAmount, cashReceipt.discountableAmount) &&
        Objects.equals(this.checkAmount, cashReceipt.checkAmount) &&
        Objects.equals(this.balanceDue, cashReceipt.balanceDue) &&
        Objects.equals(this.handlingCode, cashReceipt.handlingCode) &&
        Objects.equals(this.invoiceStatus, cashReceipt.invoiceStatus) &&
        Objects.equals(this.paymentDate, cashReceipt.paymentDate) &&
        Objects.equals(this.graceDays, cashReceipt.graceDays) &&
        Objects.equals(this.crStatus, cashReceipt.crStatus) &&
        Objects.equals(this.batchId, cashReceipt.batchId) &&
        Objects.equals(this.lastUpdateUserId, cashReceipt.lastUpdateUserId) &&
        Objects.equals(this.lastUpdateDate, cashReceipt.lastUpdateDate) &&
        Objects.equals(this.lastUpdateTime, cashReceipt.lastUpdateTime) &&
        Objects.equals(this.currency, cashReceipt.currency) &&
        Objects.equals(this.exchangeRate, cashReceipt.exchangeRate) &&
        Objects.equals(this.reasonForChange, cashReceipt.reasonForChange) &&
        Objects.equals(this.glPostings, cashReceipt.glPostings) &&
        Objects.equals(this.cashReceiptInvoices, cashReceipt.cashReceiptInvoices) &&
        Objects.equals(this.applicationHistory, cashReceipt.applicationHistory) &&
        Objects.equals(this.agingInfo, cashReceipt.agingInfo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(updateKey, id, billToId, glBranchId, bank, createDate, shipToId, invoiceNumber, invoiceDate, checkNumber, discountableAmount, checkAmount, balanceDue, handlingCode, invoiceStatus, paymentDate, graceDays, crStatus, batchId, lastUpdateUserId, lastUpdateDate, lastUpdateTime, currency, exchangeRate, reasonForChange, glPostings, cashReceiptInvoices, applicationHistory, agingInfo);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CashReceipt {\n");
    
    sb.append("    updateKey: ").append(toIndentedString(updateKey)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    billToId: ").append(toIndentedString(billToId)).append("\n");
    sb.append("    glBranchId: ").append(toIndentedString(glBranchId)).append("\n");
    sb.append("    bank: ").append(toIndentedString(bank)).append("\n");
    sb.append("    createDate: ").append(toIndentedString(createDate)).append("\n");
    sb.append("    shipToId: ").append(toIndentedString(shipToId)).append("\n");
    sb.append("    invoiceNumber: ").append(toIndentedString(invoiceNumber)).append("\n");
    sb.append("    invoiceDate: ").append(toIndentedString(invoiceDate)).append("\n");
    sb.append("    checkNumber: ").append(toIndentedString(checkNumber)).append("\n");
    sb.append("    discountableAmount: ").append(toIndentedString(discountableAmount)).append("\n");
    sb.append("    checkAmount: ").append(toIndentedString(checkAmount)).append("\n");
    sb.append("    balanceDue: ").append(toIndentedString(balanceDue)).append("\n");
    sb.append("    handlingCode: ").append(toIndentedString(handlingCode)).append("\n");
    sb.append("    invoiceStatus: ").append(toIndentedString(invoiceStatus)).append("\n");
    sb.append("    paymentDate: ").append(toIndentedString(paymentDate)).append("\n");
    sb.append("    graceDays: ").append(toIndentedString(graceDays)).append("\n");
    sb.append("    crStatus: ").append(toIndentedString(crStatus)).append("\n");
    sb.append("    batchId: ").append(toIndentedString(batchId)).append("\n");
    sb.append("    lastUpdateUserId: ").append(toIndentedString(lastUpdateUserId)).append("\n");
    sb.append("    lastUpdateDate: ").append(toIndentedString(lastUpdateDate)).append("\n");
    sb.append("    lastUpdateTime: ").append(toIndentedString(lastUpdateTime)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    exchangeRate: ").append(toIndentedString(exchangeRate)).append("\n");
    sb.append("    reasonForChange: ").append(toIndentedString(reasonForChange)).append("\n");
    sb.append("    glPostings: ").append(toIndentedString(glPostings)).append("\n");
    sb.append("    cashReceiptInvoices: ").append(toIndentedString(cashReceiptInvoices)).append("\n");
    sb.append("    applicationHistory: ").append(toIndentedString(applicationHistory)).append("\n");
    sb.append("    agingInfo: ").append(toIndentedString(agingInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
