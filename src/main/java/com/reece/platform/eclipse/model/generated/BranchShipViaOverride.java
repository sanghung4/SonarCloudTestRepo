/*
 * Eclipse API Developer Documentation
 * This documentation provides a list of API endpoints provided in this release as well as examples for using the various API endpoints
 *
 * OpenAPI spec version: 9.1.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.reece.platform.eclipse.model.generated;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.reece.platform.eclipse.model.generated.AdvancedDeliverySystem;
import com.reece.platform.eclipse.model.generated.AutoSchedulerSettingType;
import com.reece.platform.eclipse.model.generated.BranchShipViaOverrideStatus;
import com.reece.platform.eclipse.model.generated.CartonLoadingPrintOptions;
import com.reece.platform.eclipse.model.generated.RfOrderCloseDocumentType;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * Object representing an Eclipse BranchShipViaOverride.
 */
@Schema(description = "Object representing an Eclipse BranchShipViaOverride.")

public class BranchShipViaOverride {
  @JsonProperty("shipViaId")
  private String shipViaId = null;

  @JsonProperty("autoSchedulerSetting")
  private AutoSchedulerSettingType autoSchedulerSetting = null;

  @JsonProperty("taxJurisdictionMethod")
  private String taxJurisdictionMethod = null;

  @JsonProperty("pickTicketPrinterLocation")
  private String pickTicketPrinterLocation = null;

  @JsonProperty("routingTicketFlag")
  private Boolean routingTicketFlag = null;

  @JsonProperty("overrideFreightOutExemptFlag")
  private Boolean overrideFreightOutExemptFlag = null;

  @JsonProperty("shipViaOverride")
  private Boolean shipViaOverride = null;

  @JsonProperty("avalaraFreightCode")
  private String avalaraFreightCode = null;

  @JsonProperty("avalaraFreightINCode")
  private String avalaraFreightINCode = null;

  @JsonProperty("avalaraFreightOUTCode")
  private String avalaraFreightOUTCode = null;

  @JsonProperty("combineZonesInRfPickFlag")
  private Boolean combineZonesInRfPickFlag = null;

  @JsonProperty("stagingLocation")
  private String stagingLocation = null;

  @JsonProperty("holdRfPickFlag")
  private Boolean holdRfPickFlag = null;

  @JsonProperty("fleetRoutingFlag")
  private Boolean fleetRoutingFlag = null;

  @JsonProperty("pickPriority")
  private Integer pickPriority = null;

  @JsonProperty("preventCloseDuringStagingFlag")
  private Boolean preventCloseDuringStagingFlag = null;

  @JsonProperty("rfOrderCloseDocumentType")
  private RfOrderCloseDocumentType rfOrderCloseDocumentType = null;

  @JsonProperty("useOrderPackingVerificationFlag")
  private Boolean useOrderPackingVerificationFlag = null;

  @JsonProperty("cartonStagingLocation")
  private String cartonStagingLocation = null;

  @JsonProperty("cartonLoadingPrintOption")
  private CartonLoadingPrintOptions cartonLoadingPrintOption = null;

  @JsonProperty("cartonLoadingManifestValidationFlag")
  private Boolean cartonLoadingManifestValidationFlag = null;

  @JsonProperty("reviewQueuePackCompleteStatus")
  private String reviewQueuePackCompleteStatus = null;

  @JsonProperty("statuses")
  private List<BranchShipViaOverrideStatus> statuses = null;

  @JsonProperty("shipDetails")
  private List<AdvancedDeliverySystem> shipDetails = null;

  public BranchShipViaOverride shipViaId(String shipViaId) {
    this.shipViaId = shipViaId;
    return this;
  }

   /**
   * Desc: The BranchShipViaOverride ShipViaId  File: TERRITORY  Attr: 18,x
   * @return shipViaId
  **/
  @Schema(description = "Desc: The BranchShipViaOverride ShipViaId  File: TERRITORY  Attr: 18,x")
  public String getShipViaId() {
    return shipViaId;
  }

  public void setShipViaId(String shipViaId) {
    this.shipViaId = shipViaId;
  }

  public BranchShipViaOverride autoSchedulerSetting(AutoSchedulerSettingType autoSchedulerSetting) {
    this.autoSchedulerSetting = autoSchedulerSetting;
    return this;
  }

   /**
   * Get autoSchedulerSetting
   * @return autoSchedulerSetting
  **/
  @Valid
  @Schema(description = "")
  public AutoSchedulerSettingType getAutoSchedulerSetting() {
    return autoSchedulerSetting;
  }

  public void setAutoSchedulerSetting(AutoSchedulerSettingType autoSchedulerSetting) {
    this.autoSchedulerSetting = autoSchedulerSetting;
  }

  public BranchShipViaOverride taxJurisdictionMethod(String taxJurisdictionMethod) {
    this.taxJurisdictionMethod = taxJurisdictionMethod;
    return this;
  }

   /**
   * Desc: The BranchShipViaOverride TaxJurisdictionMethod  File: TERRITORY  Attr: 20,x
   * @return taxJurisdictionMethod
  **/
  @Schema(description = "Desc: The BranchShipViaOverride TaxJurisdictionMethod  File: TERRITORY  Attr: 20,x")
  public String getTaxJurisdictionMethod() {
    return taxJurisdictionMethod;
  }

  public void setTaxJurisdictionMethod(String taxJurisdictionMethod) {
    this.taxJurisdictionMethod = taxJurisdictionMethod;
  }

  public BranchShipViaOverride pickTicketPrinterLocation(String pickTicketPrinterLocation) {
    this.pickTicketPrinterLocation = pickTicketPrinterLocation;
    return this;
  }

   /**
   * Desc: The BranchShipViaOverride PickTicketPrinterLocation  File: TERRITORY  Attr: 21,x
   * @return pickTicketPrinterLocation
  **/
  @Schema(description = "Desc: The BranchShipViaOverride PickTicketPrinterLocation  File: TERRITORY  Attr: 21,x")
  public String getPickTicketPrinterLocation() {
    return pickTicketPrinterLocation;
  }

  public void setPickTicketPrinterLocation(String pickTicketPrinterLocation) {
    this.pickTicketPrinterLocation = pickTicketPrinterLocation;
  }

  public BranchShipViaOverride routingTicketFlag(Boolean routingTicketFlag) {
    this.routingTicketFlag = routingTicketFlag;
    return this;
  }

   /**
   * Desc: The BranchShipViaOverride RoutingTicketFlag  File: TERRITORY  Attr: 22,x
   * @return routingTicketFlag
  **/
  @Schema(description = "Desc: The BranchShipViaOverride RoutingTicketFlag  File: TERRITORY  Attr: 22,x")
  public Boolean isRoutingTicketFlag() {
    return routingTicketFlag;
  }

  public void setRoutingTicketFlag(Boolean routingTicketFlag) {
    this.routingTicketFlag = routingTicketFlag;
  }

  public BranchShipViaOverride overrideFreightOutExemptFlag(Boolean overrideFreightOutExemptFlag) {
    this.overrideFreightOutExemptFlag = overrideFreightOutExemptFlag;
    return this;
  }

   /**
   * Desc: The BranchShipViaOverride OverrideFreightOutExemptFlag  File: TERRITORY  Attr: 29,x,1
   * @return overrideFreightOutExemptFlag
  **/
  @Schema(description = "Desc: The BranchShipViaOverride OverrideFreightOutExemptFlag  File: TERRITORY  Attr: 29,x,1")
  public Boolean isOverrideFreightOutExemptFlag() {
    return overrideFreightOutExemptFlag;
  }

  public void setOverrideFreightOutExemptFlag(Boolean overrideFreightOutExemptFlag) {
    this.overrideFreightOutExemptFlag = overrideFreightOutExemptFlag;
  }

  public BranchShipViaOverride shipViaOverride(Boolean shipViaOverride) {
    this.shipViaOverride = shipViaOverride;
    return this;
  }

   /**
   * Desc: The BranchShipViaOverride shipViaOverride  File: TERRITORY  Attr: 29,x,2
   * @return shipViaOverride
  **/
  @Schema(description = "Desc: The BranchShipViaOverride shipViaOverride  File: TERRITORY  Attr: 29,x,2")
  public Boolean isShipViaOverride() {
    return shipViaOverride;
  }

  public void setShipViaOverride(Boolean shipViaOverride) {
    this.shipViaOverride = shipViaOverride;
  }

  public BranchShipViaOverride avalaraFreightCode(String avalaraFreightCode) {
    this.avalaraFreightCode = avalaraFreightCode;
    return this;
  }

   /**
   * Desc: The BranchShipViaOverride AvalaraFreightINCode   File: TERRITORY  Attr: 54,x
   * @return avalaraFreightCode
  **/
  @Schema(description = "Desc: The BranchShipViaOverride AvalaraFreightINCode   File: TERRITORY  Attr: 54,x")
  public String getAvalaraFreightCode() {
    return avalaraFreightCode;
  }

  public void setAvalaraFreightCode(String avalaraFreightCode) {
    this.avalaraFreightCode = avalaraFreightCode;
  }

  public BranchShipViaOverride avalaraFreightINCode(String avalaraFreightINCode) {
    this.avalaraFreightINCode = avalaraFreightINCode;
    return this;
  }

   /**
   * Desc: The BranchShipViaOverride AvalaraFreightINCode   File: TERRITORY  Attr: 70,x
   * @return avalaraFreightINCode
  **/
  @Schema(description = "Desc: The BranchShipViaOverride AvalaraFreightINCode   File: TERRITORY  Attr: 70,x")
  public String getAvalaraFreightINCode() {
    return avalaraFreightINCode;
  }

  public void setAvalaraFreightINCode(String avalaraFreightINCode) {
    this.avalaraFreightINCode = avalaraFreightINCode;
  }

  public BranchShipViaOverride avalaraFreightOUTCode(String avalaraFreightOUTCode) {
    this.avalaraFreightOUTCode = avalaraFreightOUTCode;
    return this;
  }

   /**
   * Desc: The BranchShipViaOverride AvalaraFreightOUTCode  File: TERRITORY  Attr: 71,x
   * @return avalaraFreightOUTCode
  **/
  @Schema(description = "Desc: The BranchShipViaOverride AvalaraFreightOUTCode  File: TERRITORY  Attr: 71,x")
  public String getAvalaraFreightOUTCode() {
    return avalaraFreightOUTCode;
  }

  public void setAvalaraFreightOUTCode(String avalaraFreightOUTCode) {
    this.avalaraFreightOUTCode = avalaraFreightOUTCode;
  }

  public BranchShipViaOverride combineZonesInRfPickFlag(Boolean combineZonesInRfPickFlag) {
    this.combineZonesInRfPickFlag = combineZonesInRfPickFlag;
    return this;
  }

   /**
   * Desc: The BranchShipViaOverride CombineZonesInRfPickFlag  File: TERRITORY  Attr: 30,x
   * @return combineZonesInRfPickFlag
  **/
  @Schema(description = "Desc: The BranchShipViaOverride CombineZonesInRfPickFlag  File: TERRITORY  Attr: 30,x")
  public Boolean isCombineZonesInRfPickFlag() {
    return combineZonesInRfPickFlag;
  }

  public void setCombineZonesInRfPickFlag(Boolean combineZonesInRfPickFlag) {
    this.combineZonesInRfPickFlag = combineZonesInRfPickFlag;
  }

  public BranchShipViaOverride stagingLocation(String stagingLocation) {
    this.stagingLocation = stagingLocation;
    return this;
  }

   /**
   * Desc: The BranchShipViaOverride StagingLocation  File: TERRITORY  Attr: 31,x
   * @return stagingLocation
  **/
  @Schema(description = "Desc: The BranchShipViaOverride StagingLocation  File: TERRITORY  Attr: 31,x")
  public String getStagingLocation() {
    return stagingLocation;
  }

  public void setStagingLocation(String stagingLocation) {
    this.stagingLocation = stagingLocation;
  }

  public BranchShipViaOverride holdRfPickFlag(Boolean holdRfPickFlag) {
    this.holdRfPickFlag = holdRfPickFlag;
    return this;
  }

   /**
   * Desc: The BranchShipViaOverride HoldRfPickFlag  File: TERRITORY  Attr: 32,x
   * @return holdRfPickFlag
  **/
  @Schema(description = "Desc: The BranchShipViaOverride HoldRfPickFlag  File: TERRITORY  Attr: 32,x")
  public Boolean isHoldRfPickFlag() {
    return holdRfPickFlag;
  }

  public void setHoldRfPickFlag(Boolean holdRfPickFlag) {
    this.holdRfPickFlag = holdRfPickFlag;
  }

  public BranchShipViaOverride fleetRoutingFlag(Boolean fleetRoutingFlag) {
    this.fleetRoutingFlag = fleetRoutingFlag;
    return this;
  }

   /**
   * Desc: The BranchShipViaOverride FleetRoutingFlag  File: TERRITORY  Attr: 35,x
   * @return fleetRoutingFlag
  **/
  @Schema(description = "Desc: The BranchShipViaOverride FleetRoutingFlag  File: TERRITORY  Attr: 35,x")
  public Boolean isFleetRoutingFlag() {
    return fleetRoutingFlag;
  }

  public void setFleetRoutingFlag(Boolean fleetRoutingFlag) {
    this.fleetRoutingFlag = fleetRoutingFlag;
  }

  public BranchShipViaOverride pickPriority(Integer pickPriority) {
    this.pickPriority = pickPriority;
    return this;
  }

   /**
   * Desc: The BranchShipViaOverride PickPriority  File: TERRITORY  Attr: 36,x
   * @return pickPriority
  **/
  @Schema(description = "Desc: The BranchShipViaOverride PickPriority  File: TERRITORY  Attr: 36,x")
  public Integer getPickPriority() {
    return pickPriority;
  }

  public void setPickPriority(Integer pickPriority) {
    this.pickPriority = pickPriority;
  }

  public BranchShipViaOverride preventCloseDuringStagingFlag(Boolean preventCloseDuringStagingFlag) {
    this.preventCloseDuringStagingFlag = preventCloseDuringStagingFlag;
    return this;
  }

   /**
   * Desc: The BranchShipViaOverride PreventCloseDuringStagingFlag  File: TERRITORY  Attr: 39,x
   * @return preventCloseDuringStagingFlag
  **/
  @Schema(description = "Desc: The BranchShipViaOverride PreventCloseDuringStagingFlag  File: TERRITORY  Attr: 39,x")
  public Boolean isPreventCloseDuringStagingFlag() {
    return preventCloseDuringStagingFlag;
  }

  public void setPreventCloseDuringStagingFlag(Boolean preventCloseDuringStagingFlag) {
    this.preventCloseDuringStagingFlag = preventCloseDuringStagingFlag;
  }

  public BranchShipViaOverride rfOrderCloseDocumentType(RfOrderCloseDocumentType rfOrderCloseDocumentType) {
    this.rfOrderCloseDocumentType = rfOrderCloseDocumentType;
    return this;
  }

   /**
   * Get rfOrderCloseDocumentType
   * @return rfOrderCloseDocumentType
  **/
  @Valid
  @Schema(description = "")
  public RfOrderCloseDocumentType getRfOrderCloseDocumentType() {
    return rfOrderCloseDocumentType;
  }

  public void setRfOrderCloseDocumentType(RfOrderCloseDocumentType rfOrderCloseDocumentType) {
    this.rfOrderCloseDocumentType = rfOrderCloseDocumentType;
  }

  public BranchShipViaOverride useOrderPackingVerificationFlag(Boolean useOrderPackingVerificationFlag) {
    this.useOrderPackingVerificationFlag = useOrderPackingVerificationFlag;
    return this;
  }

   /**
   * Desc: The BranchShipViaOverride UseOrderPackingVerificationFlag  File: TERRITORY  Attr: 42,x
   * @return useOrderPackingVerificationFlag
  **/
  @Schema(description = "Desc: The BranchShipViaOverride UseOrderPackingVerificationFlag  File: TERRITORY  Attr: 42,x")
  public Boolean isUseOrderPackingVerificationFlag() {
    return useOrderPackingVerificationFlag;
  }

  public void setUseOrderPackingVerificationFlag(Boolean useOrderPackingVerificationFlag) {
    this.useOrderPackingVerificationFlag = useOrderPackingVerificationFlag;
  }

  public BranchShipViaOverride cartonStagingLocation(String cartonStagingLocation) {
    this.cartonStagingLocation = cartonStagingLocation;
    return this;
  }

   /**
   * Desc: The BranchShipViaOverride CartonStagingLocation  File: TERRITORY  Attr: 43,x
   * @return cartonStagingLocation
  **/
  @Schema(description = "Desc: The BranchShipViaOverride CartonStagingLocation  File: TERRITORY  Attr: 43,x")
  public String getCartonStagingLocation() {
    return cartonStagingLocation;
  }

  public void setCartonStagingLocation(String cartonStagingLocation) {
    this.cartonStagingLocation = cartonStagingLocation;
  }

  public BranchShipViaOverride cartonLoadingPrintOption(CartonLoadingPrintOptions cartonLoadingPrintOption) {
    this.cartonLoadingPrintOption = cartonLoadingPrintOption;
    return this;
  }

   /**
   * Get cartonLoadingPrintOption
   * @return cartonLoadingPrintOption
  **/
  @Valid
  @Schema(description = "")
  public CartonLoadingPrintOptions getCartonLoadingPrintOption() {
    return cartonLoadingPrintOption;
  }

  public void setCartonLoadingPrintOption(CartonLoadingPrintOptions cartonLoadingPrintOption) {
    this.cartonLoadingPrintOption = cartonLoadingPrintOption;
  }

  public BranchShipViaOverride cartonLoadingManifestValidationFlag(Boolean cartonLoadingManifestValidationFlag) {
    this.cartonLoadingManifestValidationFlag = cartonLoadingManifestValidationFlag;
    return this;
  }

   /**
   * Desc: The BranchShipViaOverride CartonLoadingManifestValidationFlag  File: TERRITORY  Attr: 49,x
   * @return cartonLoadingManifestValidationFlag
  **/
  @Schema(description = "Desc: The BranchShipViaOverride CartonLoadingManifestValidationFlag  File: TERRITORY  Attr: 49,x")
  public Boolean isCartonLoadingManifestValidationFlag() {
    return cartonLoadingManifestValidationFlag;
  }

  public void setCartonLoadingManifestValidationFlag(Boolean cartonLoadingManifestValidationFlag) {
    this.cartonLoadingManifestValidationFlag = cartonLoadingManifestValidationFlag;
  }

  public BranchShipViaOverride reviewQueuePackCompleteStatus(String reviewQueuePackCompleteStatus) {
    this.reviewQueuePackCompleteStatus = reviewQueuePackCompleteStatus;
    return this;
  }

   /**
   * Desc: The BranchShipViaOverride ReviewQueuePackCompleteStatus  File: TERRITORY  Attr: 53,x
   * @return reviewQueuePackCompleteStatus
  **/
  @Schema(description = "Desc: The BranchShipViaOverride ReviewQueuePackCompleteStatus  File: TERRITORY  Attr: 53,x")
  public String getReviewQueuePackCompleteStatus() {
    return reviewQueuePackCompleteStatus;
  }

  public void setReviewQueuePackCompleteStatus(String reviewQueuePackCompleteStatus) {
    this.reviewQueuePackCompleteStatus = reviewQueuePackCompleteStatus;
  }

  public BranchShipViaOverride statuses(List<BranchShipViaOverrideStatus> statuses) {
    this.statuses = statuses;
    return this;
  }

  public BranchShipViaOverride addStatusesItem(BranchShipViaOverrideStatus statusesItem) {
    if (this.statuses == null) {
      this.statuses = new ArrayList<>();
    }
    this.statuses.add(statusesItem);
    return this;
  }

   /**
   * A list of BranchShipViaOverride Statuses
   * @return statuses
  **/
  @Valid
  @Schema(description = "A list of BranchShipViaOverride Statuses")
  public List<BranchShipViaOverrideStatus> getStatuses() {
    return statuses;
  }

  public void setStatuses(List<BranchShipViaOverrideStatus> statuses) {
    this.statuses = statuses;
  }

  public BranchShipViaOverride shipDetails(List<AdvancedDeliverySystem> shipDetails) {
    this.shipDetails = shipDetails;
    return this;
  }

  public BranchShipViaOverride addShipDetailsItem(AdvancedDeliverySystem shipDetailsItem) {
    if (this.shipDetails == null) {
      this.shipDetails = new ArrayList<>();
    }
    this.shipDetails.add(shipDetailsItem);
    return this;
  }

   /**
   * A list of AdvancedDeliverySystem ShipDetails
   * @return shipDetails
  **/
  @Valid
  @Schema(description = "A list of AdvancedDeliverySystem ShipDetails")
  public List<AdvancedDeliverySystem> getShipDetails() {
    return shipDetails;
  }

  public void setShipDetails(List<AdvancedDeliverySystem> shipDetails) {
    this.shipDetails = shipDetails;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BranchShipViaOverride branchShipViaOverride = (BranchShipViaOverride) o;
    return Objects.equals(this.shipViaId, branchShipViaOverride.shipViaId) &&
        Objects.equals(this.autoSchedulerSetting, branchShipViaOverride.autoSchedulerSetting) &&
        Objects.equals(this.taxJurisdictionMethod, branchShipViaOverride.taxJurisdictionMethod) &&
        Objects.equals(this.pickTicketPrinterLocation, branchShipViaOverride.pickTicketPrinterLocation) &&
        Objects.equals(this.routingTicketFlag, branchShipViaOverride.routingTicketFlag) &&
        Objects.equals(this.overrideFreightOutExemptFlag, branchShipViaOverride.overrideFreightOutExemptFlag) &&
        Objects.equals(this.shipViaOverride, branchShipViaOverride.shipViaOverride) &&
        Objects.equals(this.avalaraFreightCode, branchShipViaOverride.avalaraFreightCode) &&
        Objects.equals(this.avalaraFreightINCode, branchShipViaOverride.avalaraFreightINCode) &&
        Objects.equals(this.avalaraFreightOUTCode, branchShipViaOverride.avalaraFreightOUTCode) &&
        Objects.equals(this.combineZonesInRfPickFlag, branchShipViaOverride.combineZonesInRfPickFlag) &&
        Objects.equals(this.stagingLocation, branchShipViaOverride.stagingLocation) &&
        Objects.equals(this.holdRfPickFlag, branchShipViaOverride.holdRfPickFlag) &&
        Objects.equals(this.fleetRoutingFlag, branchShipViaOverride.fleetRoutingFlag) &&
        Objects.equals(this.pickPriority, branchShipViaOverride.pickPriority) &&
        Objects.equals(this.preventCloseDuringStagingFlag, branchShipViaOverride.preventCloseDuringStagingFlag) &&
        Objects.equals(this.rfOrderCloseDocumentType, branchShipViaOverride.rfOrderCloseDocumentType) &&
        Objects.equals(this.useOrderPackingVerificationFlag, branchShipViaOverride.useOrderPackingVerificationFlag) &&
        Objects.equals(this.cartonStagingLocation, branchShipViaOverride.cartonStagingLocation) &&
        Objects.equals(this.cartonLoadingPrintOption, branchShipViaOverride.cartonLoadingPrintOption) &&
        Objects.equals(this.cartonLoadingManifestValidationFlag, branchShipViaOverride.cartonLoadingManifestValidationFlag) &&
        Objects.equals(this.reviewQueuePackCompleteStatus, branchShipViaOverride.reviewQueuePackCompleteStatus) &&
        Objects.equals(this.statuses, branchShipViaOverride.statuses) &&
        Objects.equals(this.shipDetails, branchShipViaOverride.shipDetails);
  }

  @Override
  public int hashCode() {
    return Objects.hash(shipViaId, autoSchedulerSetting, taxJurisdictionMethod, pickTicketPrinterLocation, routingTicketFlag, overrideFreightOutExemptFlag, shipViaOverride, avalaraFreightCode, avalaraFreightINCode, avalaraFreightOUTCode, combineZonesInRfPickFlag, stagingLocation, holdRfPickFlag, fleetRoutingFlag, pickPriority, preventCloseDuringStagingFlag, rfOrderCloseDocumentType, useOrderPackingVerificationFlag, cartonStagingLocation, cartonLoadingPrintOption, cartonLoadingManifestValidationFlag, reviewQueuePackCompleteStatus, statuses, shipDetails);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BranchShipViaOverride {\n");
    
    sb.append("    shipViaId: ").append(toIndentedString(shipViaId)).append("\n");
    sb.append("    autoSchedulerSetting: ").append(toIndentedString(autoSchedulerSetting)).append("\n");
    sb.append("    taxJurisdictionMethod: ").append(toIndentedString(taxJurisdictionMethod)).append("\n");
    sb.append("    pickTicketPrinterLocation: ").append(toIndentedString(pickTicketPrinterLocation)).append("\n");
    sb.append("    routingTicketFlag: ").append(toIndentedString(routingTicketFlag)).append("\n");
    sb.append("    overrideFreightOutExemptFlag: ").append(toIndentedString(overrideFreightOutExemptFlag)).append("\n");
    sb.append("    shipViaOverride: ").append(toIndentedString(shipViaOverride)).append("\n");
    sb.append("    avalaraFreightCode: ").append(toIndentedString(avalaraFreightCode)).append("\n");
    sb.append("    avalaraFreightINCode: ").append(toIndentedString(avalaraFreightINCode)).append("\n");
    sb.append("    avalaraFreightOUTCode: ").append(toIndentedString(avalaraFreightOUTCode)).append("\n");
    sb.append("    combineZonesInRfPickFlag: ").append(toIndentedString(combineZonesInRfPickFlag)).append("\n");
    sb.append("    stagingLocation: ").append(toIndentedString(stagingLocation)).append("\n");
    sb.append("    holdRfPickFlag: ").append(toIndentedString(holdRfPickFlag)).append("\n");
    sb.append("    fleetRoutingFlag: ").append(toIndentedString(fleetRoutingFlag)).append("\n");
    sb.append("    pickPriority: ").append(toIndentedString(pickPriority)).append("\n");
    sb.append("    preventCloseDuringStagingFlag: ").append(toIndentedString(preventCloseDuringStagingFlag)).append("\n");
    sb.append("    rfOrderCloseDocumentType: ").append(toIndentedString(rfOrderCloseDocumentType)).append("\n");
    sb.append("    useOrderPackingVerificationFlag: ").append(toIndentedString(useOrderPackingVerificationFlag)).append("\n");
    sb.append("    cartonStagingLocation: ").append(toIndentedString(cartonStagingLocation)).append("\n");
    sb.append("    cartonLoadingPrintOption: ").append(toIndentedString(cartonLoadingPrintOption)).append("\n");
    sb.append("    cartonLoadingManifestValidationFlag: ").append(toIndentedString(cartonLoadingManifestValidationFlag)).append("\n");
    sb.append("    reviewQueuePackCompleteStatus: ").append(toIndentedString(reviewQueuePackCompleteStatus)).append("\n");
    sb.append("    statuses: ").append(toIndentedString(statuses)).append("\n");
    sb.append("    shipDetails: ").append(toIndentedString(shipDetails)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
