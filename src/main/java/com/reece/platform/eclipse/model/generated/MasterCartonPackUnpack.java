/*
 * Eclipse API Developer Documentation
 * This documentation provides a list of API endpoints provided in this release as well as examples for using the various API endpoints
 *
 * OpenAPI spec version: 9.1.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.reece.platform.eclipse.model.generated;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.reece.platform.eclipse.model.generated.CartonPackList;
import com.reece.platform.eclipse.model.generated.MasterCartonPackedList;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * MasterCartonPackUpdate model
 */
@Schema(description = "MasterCartonPackUpdate model")

public class MasterCartonPackUnpack {
  @JsonProperty("branchId")
  private String branchId = null;

  @JsonProperty("cartonId")
  private String cartonId = null;

  @JsonProperty("cartonNumber")
  private String cartonNumber = null;

  @JsonProperty("invoiceNumber")
  private String invoiceNumber = null;

  @JsonProperty("masterCartonPackedList")
  private List<MasterCartonPackedList> masterCartonPackedList = null;

  @JsonProperty("cartonPackList")
  private List<CartonPackList> cartonPackList = null;

  @JsonProperty("backOrderFlag")
  private Boolean backOrderFlag = null;

  @JsonProperty("deleteCartonFlag")
  private Boolean deleteCartonFlag = null;

  @JsonProperty("completeCartonFlag")
  private Boolean completeCartonFlag = null;

  @JsonProperty("orderCompleteCartonFlag")
  private Boolean orderCompleteCartonFlag = null;

  @JsonProperty("shipmentBackOrderFlag")
  private Boolean shipmentBackOrderFlag = null;

  @JsonProperty("cartonStageLocationFlag")
  private String cartonStageLocationFlag = null;

  public MasterCartonPackUnpack branchId(String branchId) {
    this.branchId = branchId;
    return this;
  }

   /**
   * Branch id
   * @return branchId
  **/
  @NotNull
  @Schema(required = true, description = "Branch id")
  public String getBranchId() {
    return branchId;
  }

  public void setBranchId(String branchId) {
    this.branchId = branchId;
  }

  public MasterCartonPackUnpack cartonId(String cartonId) {
    this.cartonId = cartonId;
    return this;
  }

   /**
   * Carton Id
   * @return cartonId
  **/
  @NotNull
  @Schema(required = true, description = "Carton Id")
  public String getCartonId() {
    return cartonId;
  }

  public void setCartonId(String cartonId) {
    this.cartonId = cartonId;
  }

  public MasterCartonPackUnpack cartonNumber(String cartonNumber) {
    this.cartonNumber = cartonNumber;
    return this;
  }

   /**
   * CartonNumber id
   * @return cartonNumber
  **/
  @Schema(description = "CartonNumber id")
  public String getCartonNumber() {
    return cartonNumber;
  }

  public void setCartonNumber(String cartonNumber) {
    this.cartonNumber = cartonNumber;
  }

  public MasterCartonPackUnpack invoiceNumber(String invoiceNumber) {
    this.invoiceNumber = invoiceNumber;
    return this;
  }

   /**
   * Invoice Number
   * @return invoiceNumber
  **/
  @NotNull
  @Schema(required = true, description = "Invoice Number")
  public String getInvoiceNumber() {
    return invoiceNumber;
  }

  public void setInvoiceNumber(String invoiceNumber) {
    this.invoiceNumber = invoiceNumber;
  }

  public MasterCartonPackUnpack masterCartonPackedList(List<MasterCartonPackedList> masterCartonPackedList) {
    this.masterCartonPackedList = masterCartonPackedList;
    return this;
  }

  public MasterCartonPackUnpack addMasterCartonPackedListItem(MasterCartonPackedList masterCartonPackedListItem) {
    if (this.masterCartonPackedList == null) {
      this.masterCartonPackedList = new ArrayList<>();
    }
    this.masterCartonPackedList.add(masterCartonPackedListItem);
    return this;
  }

   /**
   * MasterCartonPacked List
   * @return masterCartonPackedList
  **/
  @Valid
  @Schema(description = "MasterCartonPacked List")
  public List<MasterCartonPackedList> getMasterCartonPackedList() {
    return masterCartonPackedList;
  }

  public void setMasterCartonPackedList(List<MasterCartonPackedList> masterCartonPackedList) {
    this.masterCartonPackedList = masterCartonPackedList;
  }

  public MasterCartonPackUnpack cartonPackList(List<CartonPackList> cartonPackList) {
    this.cartonPackList = cartonPackList;
    return this;
  }

  public MasterCartonPackUnpack addCartonPackListItem(CartonPackList cartonPackListItem) {
    if (this.cartonPackList == null) {
      this.cartonPackList = new ArrayList<>();
    }
    this.cartonPackList.add(cartonPackListItem);
    return this;
  }

   /**
   * CartonPackList
   * @return cartonPackList
  **/
  @Valid
  @Schema(description = "CartonPackList")
  public List<CartonPackList> getCartonPackList() {
    return cartonPackList;
  }

  public void setCartonPackList(List<CartonPackList> cartonPackList) {
    this.cartonPackList = cartonPackList;
  }

  public MasterCartonPackUnpack backOrderFlag(Boolean backOrderFlag) {
    this.backOrderFlag = backOrderFlag;
    return this;
  }

   /**
   * BackOrderFlag
   * @return backOrderFlag
  **/
  @Schema(description = "BackOrderFlag")
  public Boolean isBackOrderFlag() {
    return backOrderFlag;
  }

  public void setBackOrderFlag(Boolean backOrderFlag) {
    this.backOrderFlag = backOrderFlag;
  }

  public MasterCartonPackUnpack deleteCartonFlag(Boolean deleteCartonFlag) {
    this.deleteCartonFlag = deleteCartonFlag;
    return this;
  }

   /**
   * DeleteCartonFlag
   * @return deleteCartonFlag
  **/
  @Schema(description = "DeleteCartonFlag")
  public Boolean isDeleteCartonFlag() {
    return deleteCartonFlag;
  }

  public void setDeleteCartonFlag(Boolean deleteCartonFlag) {
    this.deleteCartonFlag = deleteCartonFlag;
  }

  public MasterCartonPackUnpack completeCartonFlag(Boolean completeCartonFlag) {
    this.completeCartonFlag = completeCartonFlag;
    return this;
  }

   /**
   * DeleteCartonFlag
   * @return completeCartonFlag
  **/
  @Schema(description = "DeleteCartonFlag")
  public Boolean isCompleteCartonFlag() {
    return completeCartonFlag;
  }

  public void setCompleteCartonFlag(Boolean completeCartonFlag) {
    this.completeCartonFlag = completeCartonFlag;
  }

  public MasterCartonPackUnpack orderCompleteCartonFlag(Boolean orderCompleteCartonFlag) {
    this.orderCompleteCartonFlag = orderCompleteCartonFlag;
    return this;
  }

   /**
   * DeleteCartonFlag
   * @return orderCompleteCartonFlag
  **/
  @Schema(description = "DeleteCartonFlag")
  public Boolean isOrderCompleteCartonFlag() {
    return orderCompleteCartonFlag;
  }

  public void setOrderCompleteCartonFlag(Boolean orderCompleteCartonFlag) {
    this.orderCompleteCartonFlag = orderCompleteCartonFlag;
  }

  public MasterCartonPackUnpack shipmentBackOrderFlag(Boolean shipmentBackOrderFlag) {
    this.shipmentBackOrderFlag = shipmentBackOrderFlag;
    return this;
  }

   /**
   * ShipmentBackOrderFlag
   * @return shipmentBackOrderFlag
  **/
  @Schema(description = "ShipmentBackOrderFlag")
  public Boolean isShipmentBackOrderFlag() {
    return shipmentBackOrderFlag;
  }

  public void setShipmentBackOrderFlag(Boolean shipmentBackOrderFlag) {
    this.shipmentBackOrderFlag = shipmentBackOrderFlag;
  }

  public MasterCartonPackUnpack cartonStageLocationFlag(String cartonStageLocationFlag) {
    this.cartonStageLocationFlag = cartonStageLocationFlag;
    return this;
  }

   /**
   * CartonStageLocationFlag
   * @return cartonStageLocationFlag
  **/
  @Schema(description = "CartonStageLocationFlag")
  public String getCartonStageLocationFlag() {
    return cartonStageLocationFlag;
  }

  public void setCartonStageLocationFlag(String cartonStageLocationFlag) {
    this.cartonStageLocationFlag = cartonStageLocationFlag;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MasterCartonPackUnpack masterCartonPackUnpack = (MasterCartonPackUnpack) o;
    return Objects.equals(this.branchId, masterCartonPackUnpack.branchId) &&
        Objects.equals(this.cartonId, masterCartonPackUnpack.cartonId) &&
        Objects.equals(this.cartonNumber, masterCartonPackUnpack.cartonNumber) &&
        Objects.equals(this.invoiceNumber, masterCartonPackUnpack.invoiceNumber) &&
        Objects.equals(this.masterCartonPackedList, masterCartonPackUnpack.masterCartonPackedList) &&
        Objects.equals(this.cartonPackList, masterCartonPackUnpack.cartonPackList) &&
        Objects.equals(this.backOrderFlag, masterCartonPackUnpack.backOrderFlag) &&
        Objects.equals(this.deleteCartonFlag, masterCartonPackUnpack.deleteCartonFlag) &&
        Objects.equals(this.completeCartonFlag, masterCartonPackUnpack.completeCartonFlag) &&
        Objects.equals(this.orderCompleteCartonFlag, masterCartonPackUnpack.orderCompleteCartonFlag) &&
        Objects.equals(this.shipmentBackOrderFlag, masterCartonPackUnpack.shipmentBackOrderFlag) &&
        Objects.equals(this.cartonStageLocationFlag, masterCartonPackUnpack.cartonStageLocationFlag);
  }

  @Override
  public int hashCode() {
    return Objects.hash(branchId, cartonId, cartonNumber, invoiceNumber, masterCartonPackedList, cartonPackList, backOrderFlag, deleteCartonFlag, completeCartonFlag, orderCompleteCartonFlag, shipmentBackOrderFlag, cartonStageLocationFlag);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MasterCartonPackUnpack {\n");
    
    sb.append("    branchId: ").append(toIndentedString(branchId)).append("\n");
    sb.append("    cartonId: ").append(toIndentedString(cartonId)).append("\n");
    sb.append("    cartonNumber: ").append(toIndentedString(cartonNumber)).append("\n");
    sb.append("    invoiceNumber: ").append(toIndentedString(invoiceNumber)).append("\n");
    sb.append("    masterCartonPackedList: ").append(toIndentedString(masterCartonPackedList)).append("\n");
    sb.append("    cartonPackList: ").append(toIndentedString(cartonPackList)).append("\n");
    sb.append("    backOrderFlag: ").append(toIndentedString(backOrderFlag)).append("\n");
    sb.append("    deleteCartonFlag: ").append(toIndentedString(deleteCartonFlag)).append("\n");
    sb.append("    completeCartonFlag: ").append(toIndentedString(completeCartonFlag)).append("\n");
    sb.append("    orderCompleteCartonFlag: ").append(toIndentedString(orderCompleteCartonFlag)).append("\n");
    sb.append("    shipmentBackOrderFlag: ").append(toIndentedString(shipmentBackOrderFlag)).append("\n");
    sb.append("    cartonStageLocationFlag: ").append(toIndentedString(cartonStageLocationFlag)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
