/*
 * Eclipse API Developer Documentation
 * This documentation provides a list of API endpoints provided in this release as well as examples for using the various API endpoints
 *
 * OpenAPI spec version: 9.1.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.reece.platform.eclipse.model.generated;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.reece.platform.eclipse.model.generated.Money;
import com.reece.platform.eclipse.model.generated.PayableDeduction;
import com.reece.platform.eclipse.model.generated.PayableGeneralLedger;
import com.reece.platform.eclipse.model.generated.PayableGlPosting;
import com.reece.platform.eclipse.model.generated.PayablePayment;
import com.reece.platform.eclipse.model.generated.PayablePurchaseOrder;
import io.swagger.v3.oas.annotations.media.Schema;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * Object representing an Eclipse Payable.
 */
@Schema(description = "Object representing an Eclipse Payable.")

public class Payable {
  @JsonProperty("updateKey")
  private String updateKey = null;

  @JsonProperty("id")
  private String id = null;

  @JsonProperty("paymentId")
  private String paymentId = null;

  @JsonProperty("payToId")
  private String payToId = null;

  @JsonProperty("apBranch")
  private String apBranch = null;

  @JsonProperty("shipFromId")
  private String shipFromId = null;

  @JsonProperty("status")
  private String status = null;

  @JsonProperty("invoiceDate")
  private LocalDateTime invoiceDate = null;

  @JsonProperty("invoiceNumber")
  private String invoiceNumber = null;

  @JsonProperty("invoiceAmount")
  private Money invoiceAmount = null;

  @JsonProperty("dueDate")
  private LocalDateTime dueDate = null;

  @JsonProperty("postDate")
  private LocalDateTime postDate = null;

  @JsonProperty("batchId")
  private String batchId = null;

  @JsonProperty("termsCode")
  private String termsCode = null;

  @JsonProperty("approvedFlag")
  private Boolean approvedFlag = null;

  @JsonProperty("lastUpdateUser")
  private String lastUpdateUser = null;

  @JsonProperty("lastUpdateDate")
  private LocalDateTime lastUpdateDate = null;

  @JsonProperty("lastUpdateTime")
  private LocalDateTime lastUpdateTime = null;

  @JsonProperty("writer")
  private String writer = null;

  @JsonProperty("adviceNotation")
  private String adviceNotation = null;

  @JsonProperty("notes")
  private String notes = null;

  @JsonProperty("currency")
  private String currency = null;

  @JsonProperty("rateAmount")
  private Double rateAmount = null;

  @JsonProperty("freightAmount")
  private Money freightAmount = null;

  @JsonProperty("taxAmount")
  private Money taxAmount = null;

  @JsonProperty("paymentType")
  private String paymentType = null;

  @JsonProperty("paidFlag")
  private Boolean paidFlag = null;

  @JsonProperty("paidOn")
  private LocalDateTime paidOn = null;

  @JsonProperty("paymentBatchId")
  private String paymentBatchId = null;

  @JsonProperty("discountAmount")
  private Money discountAmount = null;

  @JsonProperty("receivedAmount")
  private Money receivedAmount = null;

  @JsonProperty("purchaseAmount")
  private Money purchaseAmount = null;

  @JsonProperty("glAmount")
  private Money glAmount = null;

  @JsonProperty("difference")
  private Money difference = null;

  @JsonProperty("glPostings")
  private List<PayableGlPosting> glPostings = null;

  @JsonProperty("payableDeductions")
  private List<PayableDeduction> payableDeductions = null;

  @JsonProperty("payablePurchaseOrders")
  private List<PayablePurchaseOrder> payablePurchaseOrders = null;

  @JsonProperty("payableGeneralLedgerPostings")
  private List<PayableGeneralLedger> payableGeneralLedgerPostings = null;

  @JsonProperty("payablePayments")
  private List<PayablePayment> payablePayments = null;

  public Payable updateKey(String updateKey) {
    this.updateKey = updateKey;
    return this;
  }

   /**
   * Update key to handle concurrency during updates within Eclipse
   * @return updateKey
  **/
  @Schema(description = "Update key to handle concurrency during updates within Eclipse")
  public String getUpdateKey() {
    return updateKey;
  }

  public void setUpdateKey(String updateKey) {
    this.updateKey = updateKey;
  }

  public Payable id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Eclipse ID for the record
   * @return id
  **/
  @Schema(description = "Eclipse ID for the record")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public Payable paymentId(String paymentId) {
    this.paymentId = paymentId;
    return this;
  }

   /**
   * Desc: The Payable ID  File: LEDGER  Attr: 0
   * @return paymentId
  **/
  @Schema(description = "Desc: The Payable ID  File: LEDGER  Attr: 0")
  public String getPaymentId() {
    return paymentId;
  }

  public void setPaymentId(String paymentId) {
    this.paymentId = paymentId;
  }

  public Payable payToId(String payToId) {
    this.payToId = payToId;
    return this;
  }

   /**
   * Desc: The Payable PayToId  File: LEDGER  Attr: 1
   * @return payToId
  **/
  @NotNull
  @Schema(required = true, description = "Desc: The Payable PayToId  File: LEDGER  Attr: 1")
  public String getPayToId() {
    return payToId;
  }

  public void setPayToId(String payToId) {
    this.payToId = payToId;
  }

  public Payable apBranch(String apBranch) {
    this.apBranch = apBranch;
    return this;
  }

   /**
   * Desc: The Payable AP Branch  File: LEDGER  Attr: 2,1,1 - 2,1,2 - 2,1,3
   * @return apBranch
  **/
  @NotNull
  @Schema(required = true, description = "Desc: The Payable AP Branch  File: LEDGER  Attr: 2,1,1 - 2,1,2 - 2,1,3")
  public String getApBranch() {
    return apBranch;
  }

  public void setApBranch(String apBranch) {
    this.apBranch = apBranch;
  }

  public Payable shipFromId(String shipFromId) {
    this.shipFromId = shipFromId;
    return this;
  }

   /**
   * Desc: The Payable ShipFromId  File: LEDGER  Attr: 5
   * @return shipFromId
  **/
  @Schema(description = "Desc: The Payable ShipFromId  File: LEDGER  Attr: 5")
  public String getShipFromId() {
    return shipFromId;
  }

  public void setShipFromId(String shipFromId) {
    this.shipFromId = shipFromId;
  }

  public Payable status(String status) {
    this.status = status;
    return this;
  }

   /**
   * Desc: The Payable Status  File: LEDGER  Attr: 6
   * @return status
  **/
  @Schema(description = "Desc: The Payable Status  File: LEDGER  Attr: 6")
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }

  public Payable invoiceDate(LocalDateTime invoiceDate) {
    this.invoiceDate = invoiceDate;
    return this;
  }

   /**
   * Desc: The Payable InvoiceDate  File: LEDGER  Attr: 10
   * @return invoiceDate
  **/
  @NotNull
  @Valid
  @Schema(required = true, description = "Desc: The Payable InvoiceDate  File: LEDGER  Attr: 10")
  public LocalDateTime getInvoiceDate() {
    return invoiceDate;
  }

  public void setInvoiceDate(LocalDateTime invoiceDate) {
    this.invoiceDate = invoiceDate;
  }

  public Payable invoiceNumber(String invoiceNumber) {
    this.invoiceNumber = invoiceNumber;
    return this;
  }

   /**
   * Desc: The Payable InvoiceNumber  File: LEDGER  Attr: 13
   * @return invoiceNumber
  **/
  @NotNull
 @Size(max=20)  @Schema(required = true, description = "Desc: The Payable InvoiceNumber  File: LEDGER  Attr: 13")
  public String getInvoiceNumber() {
    return invoiceNumber;
  }

  public void setInvoiceNumber(String invoiceNumber) {
    this.invoiceNumber = invoiceNumber;
  }

  public Payable invoiceAmount(Money invoiceAmount) {
    this.invoiceAmount = invoiceAmount;
    return this;
  }

   /**
   * Get invoiceAmount
   * @return invoiceAmount
  **/
  @NotNull
  @Valid
  @Schema(required = true, description = "")
  public Money getInvoiceAmount() {
    return invoiceAmount;
  }

  public void setInvoiceAmount(Money invoiceAmount) {
    this.invoiceAmount = invoiceAmount;
  }

  public Payable dueDate(LocalDateTime dueDate) {
    this.dueDate = dueDate;
    return this;
  }

   /**
   * Desc: The Payable DueDate  File: LEDGER  Attr: 20
   * @return dueDate
  **/
  @Valid
  @Schema(description = "Desc: The Payable DueDate  File: LEDGER  Attr: 20")
  public LocalDateTime getDueDate() {
    return dueDate;
  }

  public void setDueDate(LocalDateTime dueDate) {
    this.dueDate = dueDate;
  }

  public Payable postDate(LocalDateTime postDate) {
    this.postDate = postDate;
    return this;
  }

   /**
   * Desc: The Payable PostDate  File: LEDGER  Attr: 23
   * @return postDate
  **/
  @NotNull
  @Valid
  @Schema(required = true, description = "Desc: The Payable PostDate  File: LEDGER  Attr: 23")
  public LocalDateTime getPostDate() {
    return postDate;
  }

  public void setPostDate(LocalDateTime postDate) {
    this.postDate = postDate;
  }

  public Payable batchId(String batchId) {
    this.batchId = batchId;
    return this;
  }

   /**
   * Desc: The Payable Batch  File: LEDGER  Attr: 28
   * @return batchId
  **/
 @Size(max=10)  @Schema(description = "Desc: The Payable Batch  File: LEDGER  Attr: 28")
  public String getBatchId() {
    return batchId;
  }

  public void setBatchId(String batchId) {
    this.batchId = batchId;
  }

  public Payable termsCode(String termsCode) {
    this.termsCode = termsCode;
    return this;
  }

   /**
   * Desc: The Payable TermsCode  File: LEDGER  Attr: 29
   * @return termsCode
  **/
  @Schema(description = "Desc: The Payable TermsCode  File: LEDGER  Attr: 29")
  public String getTermsCode() {
    return termsCode;
  }

  public void setTermsCode(String termsCode) {
    this.termsCode = termsCode;
  }

  public Payable approvedFlag(Boolean approvedFlag) {
    this.approvedFlag = approvedFlag;
    return this;
  }

   /**
   * Desc: The Payable ApprovedFlag  File: LEDGER  Attr: 30
   * @return approvedFlag
  **/
  @Schema(description = "Desc: The Payable ApprovedFlag  File: LEDGER  Attr: 30")
  public Boolean isApprovedFlag() {
    return approvedFlag;
  }

  public void setApprovedFlag(Boolean approvedFlag) {
    this.approvedFlag = approvedFlag;
  }

  public Payable lastUpdateUser(String lastUpdateUser) {
    this.lastUpdateUser = lastUpdateUser;
    return this;
  }

   /**
   * Desc: The Payable LastUpdateUser  File: LEDGER  Attr: 59,1
   * @return lastUpdateUser
  **/
  @Schema(description = "Desc: The Payable LastUpdateUser  File: LEDGER  Attr: 59,1")
  public String getLastUpdateUser() {
    return lastUpdateUser;
  }

  public void setLastUpdateUser(String lastUpdateUser) {
    this.lastUpdateUser = lastUpdateUser;
  }

  public Payable lastUpdateDate(LocalDateTime lastUpdateDate) {
    this.lastUpdateDate = lastUpdateDate;
    return this;
  }

   /**
   * Desc: The Payable LastUpdateDate  File: LEDGER  Attr: 59,2
   * @return lastUpdateDate
  **/
  @Valid
  @Schema(description = "Desc: The Payable LastUpdateDate  File: LEDGER  Attr: 59,2")
  public LocalDateTime getLastUpdateDate() {
    return lastUpdateDate;
  }

  public void setLastUpdateDate(LocalDateTime lastUpdateDate) {
    this.lastUpdateDate = lastUpdateDate;
  }

  public Payable lastUpdateTime(LocalDateTime lastUpdateTime) {
    this.lastUpdateTime = lastUpdateTime;
    return this;
  }

   /**
   * Desc: The Payable LastUpdateTime  File: LEDGER  Attr: 59,3
   * @return lastUpdateTime
  **/
  @Valid
  @Schema(description = "Desc: The Payable LastUpdateTime  File: LEDGER  Attr: 59,3")
  public LocalDateTime getLastUpdateTime() {
    return lastUpdateTime;
  }

  public void setLastUpdateTime(LocalDateTime lastUpdateTime) {
    this.lastUpdateTime = lastUpdateTime;
  }

  public Payable writer(String writer) {
    this.writer = writer;
    return this;
  }

   /**
   * Desc: The Payable Writer  File: LEDGER  Attr: 73
   * @return writer
  **/
  @Schema(description = "Desc: The Payable Writer  File: LEDGER  Attr: 73")
  public String getWriter() {
    return writer;
  }

  public void setWriter(String writer) {
    this.writer = writer;
  }

  public Payable adviceNotation(String adviceNotation) {
    this.adviceNotation = adviceNotation;
    return this;
  }

   /**
   * Desc: The Advice Notation  File: LEDGER  Attr: 74
   * @return adviceNotation
  **/
  @Schema(description = "Desc: The Advice Notation  File: LEDGER  Attr: 74")
  public String getAdviceNotation() {
    return adviceNotation;
  }

  public void setAdviceNotation(String adviceNotation) {
    this.adviceNotation = adviceNotation;
  }

  public Payable notes(String notes) {
    this.notes = notes;
    return this;
  }

   /**
   * Desc: The Payable Notes  File: LEDGER  Attr: 80
   * @return notes
  **/
  @Schema(description = "Desc: The Payable Notes  File: LEDGER  Attr: 80")
  public String getNotes() {
    return notes;
  }

  public void setNotes(String notes) {
    this.notes = notes;
  }

  public Payable currency(String currency) {
    this.currency = currency;
    return this;
  }

   /**
   * Desc: The Payable Currency  File: LEDGER  Attr: 92,1
   * @return currency
  **/
  @Schema(description = "Desc: The Payable Currency  File: LEDGER  Attr: 92,1")
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(String currency) {
    this.currency = currency;
  }

  public Payable rateAmount(Double rateAmount) {
    this.rateAmount = rateAmount;
    return this;
  }

   /**
   * Desc: The Payable Currency rate  File: LEDGER  Attr: 92,2
   * @return rateAmount
  **/
  @Schema(description = "Desc: The Payable Currency rate  File: LEDGER  Attr: 92,2")
  public Double getRateAmount() {
    return rateAmount;
  }

  public void setRateAmount(Double rateAmount) {
    this.rateAmount = rateAmount;
  }

  public Payable freightAmount(Money freightAmount) {
    this.freightAmount = freightAmount;
    return this;
  }

   /**
   * Get freightAmount
   * @return freightAmount
  **/
  @Valid
  @Schema(description = "")
  public Money getFreightAmount() {
    return freightAmount;
  }

  public void setFreightAmount(Money freightAmount) {
    this.freightAmount = freightAmount;
  }

  public Payable taxAmount(Money taxAmount) {
    this.taxAmount = taxAmount;
    return this;
  }

   /**
   * Get taxAmount
   * @return taxAmount
  **/
  @Valid
  @Schema(description = "")
  public Money getTaxAmount() {
    return taxAmount;
  }

  public void setTaxAmount(Money taxAmount) {
    this.taxAmount = taxAmount;
  }

  public Payable paymentType(String paymentType) {
    this.paymentType = paymentType;
    return this;
  }

   /**
   * Desc: The Payable Payment Information  File: LEDGER  Attr: 150,1
   * @return paymentType
  **/
  @Schema(description = "Desc: The Payable Payment Information  File: LEDGER  Attr: 150,1")
  public String getPaymentType() {
    return paymentType;
  }

  public void setPaymentType(String paymentType) {
    this.paymentType = paymentType;
  }

  public Payable paidFlag(Boolean paidFlag) {
    this.paidFlag = paidFlag;
    return this;
  }

   /**
   * Desc: The Payable PaidFlag  File: LEDGER  Attr: 150,2
   * @return paidFlag
  **/
  @Schema(description = "Desc: The Payable PaidFlag  File: LEDGER  Attr: 150,2")
  public Boolean isPaidFlag() {
    return paidFlag;
  }

  public void setPaidFlag(Boolean paidFlag) {
    this.paidFlag = paidFlag;
  }

  public Payable paidOn(LocalDateTime paidOn) {
    this.paidOn = paidOn;
    return this;
  }

   /**
   * Desc: The Payable Paid On date  File: LEDGER  Attr: 150,3
   * @return paidOn
  **/
  @Valid
  @Schema(description = "Desc: The Payable Paid On date  File: LEDGER  Attr: 150,3")
  public LocalDateTime getPaidOn() {
    return paidOn;
  }

  public void setPaidOn(LocalDateTime paidOn) {
    this.paidOn = paidOn;
  }

  public Payable paymentBatchId(String paymentBatchId) {
    this.paymentBatchId = paymentBatchId;
    return this;
  }

   /**
   * Desc: The Payable Payment Batch ID  File: LEDGER  Attr: 150,4
   * @return paymentBatchId
  **/
 @Size(max=10)  @Schema(description = "Desc: The Payable Payment Batch ID  File: LEDGER  Attr: 150,4")
  public String getPaymentBatchId() {
    return paymentBatchId;
  }

  public void setPaymentBatchId(String paymentBatchId) {
    this.paymentBatchId = paymentBatchId;
  }

  public Payable discountAmount(Money discountAmount) {
    this.discountAmount = discountAmount;
    return this;
  }

   /**
   * Get discountAmount
   * @return discountAmount
  **/
  @Valid
  @Schema(description = "")
  public Money getDiscountAmount() {
    return discountAmount;
  }

  public void setDiscountAmount(Money discountAmount) {
    this.discountAmount = discountAmount;
  }

  public Payable receivedAmount(Money receivedAmount) {
    this.receivedAmount = receivedAmount;
    return this;
  }

   /**
   * Get receivedAmount
   * @return receivedAmount
  **/
  @Valid
  @Schema(description = "")
  public Money getReceivedAmount() {
    return receivedAmount;
  }

  public void setReceivedAmount(Money receivedAmount) {
    this.receivedAmount = receivedAmount;
  }

  public Payable purchaseAmount(Money purchaseAmount) {
    this.purchaseAmount = purchaseAmount;
    return this;
  }

   /**
   * Get purchaseAmount
   * @return purchaseAmount
  **/
  @Valid
  @Schema(description = "")
  public Money getPurchaseAmount() {
    return purchaseAmount;
  }

  public void setPurchaseAmount(Money purchaseAmount) {
    this.purchaseAmount = purchaseAmount;
  }

  public Payable glAmount(Money glAmount) {
    this.glAmount = glAmount;
    return this;
  }

   /**
   * Get glAmount
   * @return glAmount
  **/
  @Valid
  @Schema(description = "")
  public Money getGlAmount() {
    return glAmount;
  }

  public void setGlAmount(Money glAmount) {
    this.glAmount = glAmount;
  }

  public Payable difference(Money difference) {
    this.difference = difference;
    return this;
  }

   /**
   * Get difference
   * @return difference
  **/
  @Valid
  @Schema(description = "")
  public Money getDifference() {
    return difference;
  }

  public void setDifference(Money difference) {
    this.difference = difference;
  }

  public Payable glPostings(List<PayableGlPosting> glPostings) {
    this.glPostings = glPostings;
    return this;
  }

  public Payable addGlPostingsItem(PayableGlPosting glPostingsItem) {
    if (this.glPostings == null) {
      this.glPostings = new ArrayList<>();
    }
    this.glPostings.add(glPostingsItem);
    return this;
  }

   /**
   * A list of Payable GlPostings
   * @return glPostings
  **/
  @Valid
  @Schema(description = "A list of Payable GlPostings")
  public List<PayableGlPosting> getGlPostings() {
    return glPostings;
  }

  public void setGlPostings(List<PayableGlPosting> glPostings) {
    this.glPostings = glPostings;
  }

  public Payable payableDeductions(List<PayableDeduction> payableDeductions) {
    this.payableDeductions = payableDeductions;
    return this;
  }

  public Payable addPayableDeductionsItem(PayableDeduction payableDeductionsItem) {
    if (this.payableDeductions == null) {
      this.payableDeductions = new ArrayList<>();
    }
    this.payableDeductions.add(payableDeductionsItem);
    return this;
  }

   /**
   * A list of Payable Deductions
   * @return payableDeductions
  **/
  @Valid
  @Schema(description = "A list of Payable Deductions")
  public List<PayableDeduction> getPayableDeductions() {
    return payableDeductions;
  }

  public void setPayableDeductions(List<PayableDeduction> payableDeductions) {
    this.payableDeductions = payableDeductions;
  }

  public Payable payablePurchaseOrders(List<PayablePurchaseOrder> payablePurchaseOrders) {
    this.payablePurchaseOrders = payablePurchaseOrders;
    return this;
  }

  public Payable addPayablePurchaseOrdersItem(PayablePurchaseOrder payablePurchaseOrdersItem) {
    if (this.payablePurchaseOrders == null) {
      this.payablePurchaseOrders = new ArrayList<>();
    }
    this.payablePurchaseOrders.add(payablePurchaseOrdersItem);
    return this;
  }

   /**
   * A list of Purchase Orders
   * @return payablePurchaseOrders
  **/
  @Valid
  @Schema(description = "A list of Purchase Orders")
  public List<PayablePurchaseOrder> getPayablePurchaseOrders() {
    return payablePurchaseOrders;
  }

  public void setPayablePurchaseOrders(List<PayablePurchaseOrder> payablePurchaseOrders) {
    this.payablePurchaseOrders = payablePurchaseOrders;
  }

  public Payable payableGeneralLedgerPostings(List<PayableGeneralLedger> payableGeneralLedgerPostings) {
    this.payableGeneralLedgerPostings = payableGeneralLedgerPostings;
    return this;
  }

  public Payable addPayableGeneralLedgerPostingsItem(PayableGeneralLedger payableGeneralLedgerPostingsItem) {
    if (this.payableGeneralLedgerPostings == null) {
      this.payableGeneralLedgerPostings = new ArrayList<>();
    }
    this.payableGeneralLedgerPostings.add(payableGeneralLedgerPostingsItem);
    return this;
  }

   /**
   * A list of General Ledger Tab Postings
   * @return payableGeneralLedgerPostings
  **/
  @Valid
  @Schema(description = "A list of General Ledger Tab Postings")
  public List<PayableGeneralLedger> getPayableGeneralLedgerPostings() {
    return payableGeneralLedgerPostings;
  }

  public void setPayableGeneralLedgerPostings(List<PayableGeneralLedger> payableGeneralLedgerPostings) {
    this.payableGeneralLedgerPostings = payableGeneralLedgerPostings;
  }

  public Payable payablePayments(List<PayablePayment> payablePayments) {
    this.payablePayments = payablePayments;
    return this;
  }

  public Payable addPayablePaymentsItem(PayablePayment payablePaymentsItem) {
    if (this.payablePayments == null) {
      this.payablePayments = new ArrayList<>();
    }
    this.payablePayments.add(payablePaymentsItem);
    return this;
  }

   /**
   * A list of Payments
   * @return payablePayments
  **/
  @Valid
  @Schema(description = "A list of Payments")
  public List<PayablePayment> getPayablePayments() {
    return payablePayments;
  }

  public void setPayablePayments(List<PayablePayment> payablePayments) {
    this.payablePayments = payablePayments;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Payable payable = (Payable) o;
    return Objects.equals(this.updateKey, payable.updateKey) &&
        Objects.equals(this.id, payable.id) &&
        Objects.equals(this.paymentId, payable.paymentId) &&
        Objects.equals(this.payToId, payable.payToId) &&
        Objects.equals(this.apBranch, payable.apBranch) &&
        Objects.equals(this.shipFromId, payable.shipFromId) &&
        Objects.equals(this.status, payable.status) &&
        Objects.equals(this.invoiceDate, payable.invoiceDate) &&
        Objects.equals(this.invoiceNumber, payable.invoiceNumber) &&
        Objects.equals(this.invoiceAmount, payable.invoiceAmount) &&
        Objects.equals(this.dueDate, payable.dueDate) &&
        Objects.equals(this.postDate, payable.postDate) &&
        Objects.equals(this.batchId, payable.batchId) &&
        Objects.equals(this.termsCode, payable.termsCode) &&
        Objects.equals(this.approvedFlag, payable.approvedFlag) &&
        Objects.equals(this.lastUpdateUser, payable.lastUpdateUser) &&
        Objects.equals(this.lastUpdateDate, payable.lastUpdateDate) &&
        Objects.equals(this.lastUpdateTime, payable.lastUpdateTime) &&
        Objects.equals(this.writer, payable.writer) &&
        Objects.equals(this.adviceNotation, payable.adviceNotation) &&
        Objects.equals(this.notes, payable.notes) &&
        Objects.equals(this.currency, payable.currency) &&
        Objects.equals(this.rateAmount, payable.rateAmount) &&
        Objects.equals(this.freightAmount, payable.freightAmount) &&
        Objects.equals(this.taxAmount, payable.taxAmount) &&
        Objects.equals(this.paymentType, payable.paymentType) &&
        Objects.equals(this.paidFlag, payable.paidFlag) &&
        Objects.equals(this.paidOn, payable.paidOn) &&
        Objects.equals(this.paymentBatchId, payable.paymentBatchId) &&
        Objects.equals(this.discountAmount, payable.discountAmount) &&
        Objects.equals(this.receivedAmount, payable.receivedAmount) &&
        Objects.equals(this.purchaseAmount, payable.purchaseAmount) &&
        Objects.equals(this.glAmount, payable.glAmount) &&
        Objects.equals(this.difference, payable.difference) &&
        Objects.equals(this.glPostings, payable.glPostings) &&
        Objects.equals(this.payableDeductions, payable.payableDeductions) &&
        Objects.equals(this.payablePurchaseOrders, payable.payablePurchaseOrders) &&
        Objects.equals(this.payableGeneralLedgerPostings, payable.payableGeneralLedgerPostings) &&
        Objects.equals(this.payablePayments, payable.payablePayments);
  }

  @Override
  public int hashCode() {
    return Objects.hash(updateKey, id, paymentId, payToId, apBranch, shipFromId, status, invoiceDate, invoiceNumber, invoiceAmount, dueDate, postDate, batchId, termsCode, approvedFlag, lastUpdateUser, lastUpdateDate, lastUpdateTime, writer, adviceNotation, notes, currency, rateAmount, freightAmount, taxAmount, paymentType, paidFlag, paidOn, paymentBatchId, discountAmount, receivedAmount, purchaseAmount, glAmount, difference, glPostings, payableDeductions, payablePurchaseOrders, payableGeneralLedgerPostings, payablePayments);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Payable {\n");
    
    sb.append("    updateKey: ").append(toIndentedString(updateKey)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    paymentId: ").append(toIndentedString(paymentId)).append("\n");
    sb.append("    payToId: ").append(toIndentedString(payToId)).append("\n");
    sb.append("    apBranch: ").append(toIndentedString(apBranch)).append("\n");
    sb.append("    shipFromId: ").append(toIndentedString(shipFromId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    invoiceDate: ").append(toIndentedString(invoiceDate)).append("\n");
    sb.append("    invoiceNumber: ").append(toIndentedString(invoiceNumber)).append("\n");
    sb.append("    invoiceAmount: ").append(toIndentedString(invoiceAmount)).append("\n");
    sb.append("    dueDate: ").append(toIndentedString(dueDate)).append("\n");
    sb.append("    postDate: ").append(toIndentedString(postDate)).append("\n");
    sb.append("    batchId: ").append(toIndentedString(batchId)).append("\n");
    sb.append("    termsCode: ").append(toIndentedString(termsCode)).append("\n");
    sb.append("    approvedFlag: ").append(toIndentedString(approvedFlag)).append("\n");
    sb.append("    lastUpdateUser: ").append(toIndentedString(lastUpdateUser)).append("\n");
    sb.append("    lastUpdateDate: ").append(toIndentedString(lastUpdateDate)).append("\n");
    sb.append("    lastUpdateTime: ").append(toIndentedString(lastUpdateTime)).append("\n");
    sb.append("    writer: ").append(toIndentedString(writer)).append("\n");
    sb.append("    adviceNotation: ").append(toIndentedString(adviceNotation)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    rateAmount: ").append(toIndentedString(rateAmount)).append("\n");
    sb.append("    freightAmount: ").append(toIndentedString(freightAmount)).append("\n");
    sb.append("    taxAmount: ").append(toIndentedString(taxAmount)).append("\n");
    sb.append("    paymentType: ").append(toIndentedString(paymentType)).append("\n");
    sb.append("    paidFlag: ").append(toIndentedString(paidFlag)).append("\n");
    sb.append("    paidOn: ").append(toIndentedString(paidOn)).append("\n");
    sb.append("    paymentBatchId: ").append(toIndentedString(paymentBatchId)).append("\n");
    sb.append("    discountAmount: ").append(toIndentedString(discountAmount)).append("\n");
    sb.append("    receivedAmount: ").append(toIndentedString(receivedAmount)).append("\n");
    sb.append("    purchaseAmount: ").append(toIndentedString(purchaseAmount)).append("\n");
    sb.append("    glAmount: ").append(toIndentedString(glAmount)).append("\n");
    sb.append("    difference: ").append(toIndentedString(difference)).append("\n");
    sb.append("    glPostings: ").append(toIndentedString(glPostings)).append("\n");
    sb.append("    payableDeductions: ").append(toIndentedString(payableDeductions)).append("\n");
    sb.append("    payablePurchaseOrders: ").append(toIndentedString(payablePurchaseOrders)).append("\n");
    sb.append("    payableGeneralLedgerPostings: ").append(toIndentedString(payableGeneralLedgerPostings)).append("\n");
    sb.append("    payablePayments: ").append(toIndentedString(payablePayments)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
