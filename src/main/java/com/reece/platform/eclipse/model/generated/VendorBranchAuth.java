/*
 * Eclipse API Developer Documentation
 * This documentation provides a list of API endpoints provided in this release as well as examples for using the various API endpoints
 *
 * OpenAPI spec version: 9.1.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.reece.platform.eclipse.model.generated;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.reece.platform.eclipse.model.generated.EntityBranchAuthActive;
import com.reece.platform.eclipse.model.generated.EntityBranchAuthInactive;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * Object representing an Eclipse VendorBranchAuth.
 */
@Schema(description = "Object representing an Eclipse VendorBranchAuth.")

public class VendorBranchAuth {
  @JsonProperty("updateKey")
  private String updateKey = null;

  @JsonProperty("id")
  private String id = null;

  @JsonProperty("branchActivationLevel")
  private Integer branchActivationLevel = null;

  @JsonProperty("oneTimeActivationLevel")
  private Integer oneTimeActivationLevel = null;

  @JsonProperty("allFlag")
  private Boolean allFlag = null;

  @JsonProperty("actives")
  private List<EntityBranchAuthActive> actives = null;

  @JsonProperty("inactives")
  private List<EntityBranchAuthInactive> inactives = null;

  @JsonProperty("vendorId")
  private Integer vendorId = null;

  public VendorBranchAuth updateKey(String updateKey) {
    this.updateKey = updateKey;
    return this;
  }

   /**
   * Update key to handle concurrency during updates within Eclipse
   * @return updateKey
  **/
  @Schema(description = "Update key to handle concurrency during updates within Eclipse")
  public String getUpdateKey() {
    return updateKey;
  }

  public void setUpdateKey(String updateKey) {
    this.updateKey = updateKey;
  }

  public VendorBranchAuth id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Eclipse ID for the record
   * @return id
  **/
  @Schema(description = "Eclipse ID for the record")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public VendorBranchAuth branchActivationLevel(Integer branchActivationLevel) {
    this.branchActivationLevel = branchActivationLevel;
    return this;
  }

   /**
   * Desc: The EntityBranchAuth BranchActivationLevel  File: ENTITY.BR.AUTH  Attr: 2,1
   * minimum: 0
   * maximum: 99
   * @return branchActivationLevel
  **/
 @Min(0) @Max(99)  @Schema(description = "Desc: The EntityBranchAuth BranchActivationLevel  File: ENTITY.BR.AUTH  Attr: 2,1")
  public Integer getBranchActivationLevel() {
    return branchActivationLevel;
  }

  public void setBranchActivationLevel(Integer branchActivationLevel) {
    this.branchActivationLevel = branchActivationLevel;
  }

  public VendorBranchAuth oneTimeActivationLevel(Integer oneTimeActivationLevel) {
    this.oneTimeActivationLevel = oneTimeActivationLevel;
    return this;
  }

   /**
   * Desc: The EntityBranchAuth OneTimeActivationLevel  File: ENTITY.BR.AUTH  Attr: 2,2
   * minimum: 0
   * maximum: 99
   * @return oneTimeActivationLevel
  **/
 @Min(0) @Max(99)  @Schema(description = "Desc: The EntityBranchAuth OneTimeActivationLevel  File: ENTITY.BR.AUTH  Attr: 2,2")
  public Integer getOneTimeActivationLevel() {
    return oneTimeActivationLevel;
  }

  public void setOneTimeActivationLevel(Integer oneTimeActivationLevel) {
    this.oneTimeActivationLevel = oneTimeActivationLevel;
  }

  public VendorBranchAuth allFlag(Boolean allFlag) {
    this.allFlag = allFlag;
    return this;
  }

   /**
   * Desc: The EntityBranchAuth AllFlag  File: ENTITY.BR.AUTH  Attr: 3
   * @return allFlag
  **/
  @Schema(description = "Desc: The EntityBranchAuth AllFlag  File: ENTITY.BR.AUTH  Attr: 3")
  public Boolean isAllFlag() {
    return allFlag;
  }

  public void setAllFlag(Boolean allFlag) {
    this.allFlag = allFlag;
  }

  public VendorBranchAuth actives(List<EntityBranchAuthActive> actives) {
    this.actives = actives;
    return this;
  }

  public VendorBranchAuth addActivesItem(EntityBranchAuthActive activesItem) {
    if (this.actives == null) {
      this.actives = new ArrayList<>();
    }
    this.actives.add(activesItem);
    return this;
  }

   /**
   * A list of CustomerBranchAuth Actives
   * @return actives
  **/
  @Valid
  @Schema(description = "A list of CustomerBranchAuth Actives")
  public List<EntityBranchAuthActive> getActives() {
    return actives;
  }

  public void setActives(List<EntityBranchAuthActive> actives) {
    this.actives = actives;
  }

  public VendorBranchAuth inactives(List<EntityBranchAuthInactive> inactives) {
    this.inactives = inactives;
    return this;
  }

  public VendorBranchAuth addInactivesItem(EntityBranchAuthInactive inactivesItem) {
    if (this.inactives == null) {
      this.inactives = new ArrayList<>();
    }
    this.inactives.add(inactivesItem);
    return this;
  }

   /**
   * A list of CustomerBranchAuth Inactives
   * @return inactives
  **/
  @Valid
  @Schema(description = "A list of CustomerBranchAuth Inactives")
  public List<EntityBranchAuthInactive> getInactives() {
    return inactives;
  }

  public void setInactives(List<EntityBranchAuthInactive> inactives) {
    this.inactives = inactives;
  }

  public VendorBranchAuth vendorId(Integer vendorId) {
    this.vendorId = vendorId;
    return this;
  }

   /**
   * Desc: The VendorBranchAuth VendorId  File: ENTITY.BR.AUTH  Attr: 0
   * @return vendorId
  **/
  @Schema(description = "Desc: The VendorBranchAuth VendorId  File: ENTITY.BR.AUTH  Attr: 0")
  public Integer getVendorId() {
    return vendorId;
  }

  public void setVendorId(Integer vendorId) {
    this.vendorId = vendorId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VendorBranchAuth vendorBranchAuth = (VendorBranchAuth) o;
    return Objects.equals(this.updateKey, vendorBranchAuth.updateKey) &&
        Objects.equals(this.id, vendorBranchAuth.id) &&
        Objects.equals(this.branchActivationLevel, vendorBranchAuth.branchActivationLevel) &&
        Objects.equals(this.oneTimeActivationLevel, vendorBranchAuth.oneTimeActivationLevel) &&
        Objects.equals(this.allFlag, vendorBranchAuth.allFlag) &&
        Objects.equals(this.actives, vendorBranchAuth.actives) &&
        Objects.equals(this.inactives, vendorBranchAuth.inactives) &&
        Objects.equals(this.vendorId, vendorBranchAuth.vendorId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(updateKey, id, branchActivationLevel, oneTimeActivationLevel, allFlag, actives, inactives, vendorId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VendorBranchAuth {\n");
    
    sb.append("    updateKey: ").append(toIndentedString(updateKey)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    branchActivationLevel: ").append(toIndentedString(branchActivationLevel)).append("\n");
    sb.append("    oneTimeActivationLevel: ").append(toIndentedString(oneTimeActivationLevel)).append("\n");
    sb.append("    allFlag: ").append(toIndentedString(allFlag)).append("\n");
    sb.append("    actives: ").append(toIndentedString(actives)).append("\n");
    sb.append("    inactives: ").append(toIndentedString(inactives)).append("\n");
    sb.append("    vendorId: ").append(toIndentedString(vendorId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
