/*
 * Eclipse API Developer Documentation
 * This documentation provides a list of API endpoints provided in this release as well as examples for using the various API endpoints
 *
 * OpenAPI spec version: 9.1.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.reece.platform.eclipse.model.generated;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.reece.platform.eclipse.model.generated.TermsPeriod;
import com.reece.platform.eclipse.model.generated.TermsSplitPayment;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * Object representing an Eclipse Terms.
 */
@Schema(description = "Object representing an Eclipse Terms.")

public class Terms {
  @JsonProperty("updateKey")
  private String updateKey = null;

  @JsonProperty("id")
  private String id = null;

  @JsonProperty("description")
  private String description = null;

  @JsonProperty("customerFlag")
  private Boolean customerFlag = null;

  @JsonProperty("vendorFlag")
  private Boolean vendorFlag = null;

  @JsonProperty("alwaysCod")
  private Boolean alwaysCod = null;

  @JsonProperty("codWhenCreditExceeded")
  private Boolean codWhenCreditExceeded = null;

  @JsonProperty("approvalRequired")
  private Boolean approvalRequired = null;

  @JsonProperty("approvalRequiredWhenCreditExceeded")
  private Boolean approvalRequiredWhenCreditExceeded = null;

  @JsonProperty("noOrderEntry")
  private Boolean noOrderEntry = null;

  @JsonProperty("noOrderEntryWhenCreditExceeded")
  private Boolean noOrderEntryWhenCreditExceeded = null;

  @JsonProperty("noOrderEntryUnlessAuth")
  private Boolean noOrderEntryUnlessAuth = null;

  @JsonProperty("noPrintShipTicketWhenCreditExceeded")
  private Boolean noPrintShipTicketWhenCreditExceeded = null;

  @JsonProperty("noPrintShipTicketUnlessAuth")
  private Boolean noPrintShipTicketUnlessAuth = null;

  @JsonProperty("disableCreditControls")
  private Boolean disableCreditControls = null;

  @JsonProperty("periods")
  private List<TermsPeriod> periods = null;

  @JsonProperty("splitPayments")
  private List<TermsSplitPayment> splitPayments = null;

  public Terms updateKey(String updateKey) {
    this.updateKey = updateKey;
    return this;
  }

   /**
   * Update key to handle concurrency during updates within Eclipse
   * @return updateKey
  **/
  @Schema(description = "Update key to handle concurrency during updates within Eclipse")
  public String getUpdateKey() {
    return updateKey;
  }

  public void setUpdateKey(String updateKey) {
    this.updateKey = updateKey;
  }

  public Terms id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Eclipse ID for the record
   * @return id
  **/
  @Schema(description = "Eclipse ID for the record")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public Terms description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Desc: The Terms Description  File: TERMS  Attr: 1
   * @return description
  **/
  @Schema(description = "Desc: The Terms Description  File: TERMS  Attr: 1")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public Terms customerFlag(Boolean customerFlag) {
    this.customerFlag = customerFlag;
    return this;
  }

   /**
   * Desc: The Terms CustomerFlag  File: TERMS  Attr: 10
   * @return customerFlag
  **/
  @Schema(description = "Desc: The Terms CustomerFlag  File: TERMS  Attr: 10")
  public Boolean isCustomerFlag() {
    return customerFlag;
  }

  public void setCustomerFlag(Boolean customerFlag) {
    this.customerFlag = customerFlag;
  }

  public Terms vendorFlag(Boolean vendorFlag) {
    this.vendorFlag = vendorFlag;
    return this;
  }

   /**
   * Desc: The Terms VendorFlag  File: TERMS  Attr: 11
   * @return vendorFlag
  **/
  @Schema(description = "Desc: The Terms VendorFlag  File: TERMS  Attr: 11")
  public Boolean isVendorFlag() {
    return vendorFlag;
  }

  public void setVendorFlag(Boolean vendorFlag) {
    this.vendorFlag = vendorFlag;
  }

  public Terms alwaysCod(Boolean alwaysCod) {
    this.alwaysCod = alwaysCod;
    return this;
  }

   /**
   * Desc: The Terms AlwaysCod flag  File: ENTITY  Attr: 28,1
   * @return alwaysCod
  **/
  @Schema(description = "Desc: The Terms AlwaysCod flag  File: ENTITY  Attr: 28,1")
  public Boolean isAlwaysCod() {
    return alwaysCod;
  }

  public void setAlwaysCod(Boolean alwaysCod) {
    this.alwaysCod = alwaysCod;
  }

  public Terms codWhenCreditExceeded(Boolean codWhenCreditExceeded) {
    this.codWhenCreditExceeded = codWhenCreditExceeded;
    return this;
  }

   /**
   * Desc: The Terms CodWhenCreditExceeded flag  File: ENTITY  Attr: 28,2
   * @return codWhenCreditExceeded
  **/
  @Schema(description = "Desc: The Terms CodWhenCreditExceeded flag  File: ENTITY  Attr: 28,2")
  public Boolean isCodWhenCreditExceeded() {
    return codWhenCreditExceeded;
  }

  public void setCodWhenCreditExceeded(Boolean codWhenCreditExceeded) {
    this.codWhenCreditExceeded = codWhenCreditExceeded;
  }

  public Terms approvalRequired(Boolean approvalRequired) {
    this.approvalRequired = approvalRequired;
    return this;
  }

   /**
   * Desc: The Terms ApprovalRequired flag  File: ENTITY  Attr: 28,3
   * @return approvalRequired
  **/
  @Schema(description = "Desc: The Terms ApprovalRequired flag  File: ENTITY  Attr: 28,3")
  public Boolean isApprovalRequired() {
    return approvalRequired;
  }

  public void setApprovalRequired(Boolean approvalRequired) {
    this.approvalRequired = approvalRequired;
  }

  public Terms approvalRequiredWhenCreditExceeded(Boolean approvalRequiredWhenCreditExceeded) {
    this.approvalRequiredWhenCreditExceeded = approvalRequiredWhenCreditExceeded;
    return this;
  }

   /**
   * Desc: The Terms ApprovalRequiredWhenCreditExceeded flag  File: ENTITY  Attr: 28,4
   * @return approvalRequiredWhenCreditExceeded
  **/
  @Schema(description = "Desc: The Terms ApprovalRequiredWhenCreditExceeded flag  File: ENTITY  Attr: 28,4")
  public Boolean isApprovalRequiredWhenCreditExceeded() {
    return approvalRequiredWhenCreditExceeded;
  }

  public void setApprovalRequiredWhenCreditExceeded(Boolean approvalRequiredWhenCreditExceeded) {
    this.approvalRequiredWhenCreditExceeded = approvalRequiredWhenCreditExceeded;
  }

  public Terms noOrderEntry(Boolean noOrderEntry) {
    this.noOrderEntry = noOrderEntry;
    return this;
  }

   /**
   * Desc: The Terms NoOrderEntry flag  File: ENTITY  Attr: 28,5
   * @return noOrderEntry
  **/
  @Schema(description = "Desc: The Terms NoOrderEntry flag  File: ENTITY  Attr: 28,5")
  public Boolean isNoOrderEntry() {
    return noOrderEntry;
  }

  public void setNoOrderEntry(Boolean noOrderEntry) {
    this.noOrderEntry = noOrderEntry;
  }

  public Terms noOrderEntryWhenCreditExceeded(Boolean noOrderEntryWhenCreditExceeded) {
    this.noOrderEntryWhenCreditExceeded = noOrderEntryWhenCreditExceeded;
    return this;
  }

   /**
   * Desc: The Terms NoOrderEntryWhenCreditExceeded flag  File: ENTITY  Attr: 28,6
   * @return noOrderEntryWhenCreditExceeded
  **/
  @Schema(description = "Desc: The Terms NoOrderEntryWhenCreditExceeded flag  File: ENTITY  Attr: 28,6")
  public Boolean isNoOrderEntryWhenCreditExceeded() {
    return noOrderEntryWhenCreditExceeded;
  }

  public void setNoOrderEntryWhenCreditExceeded(Boolean noOrderEntryWhenCreditExceeded) {
    this.noOrderEntryWhenCreditExceeded = noOrderEntryWhenCreditExceeded;
  }

  public Terms noOrderEntryUnlessAuth(Boolean noOrderEntryUnlessAuth) {
    this.noOrderEntryUnlessAuth = noOrderEntryUnlessAuth;
    return this;
  }

   /**
   * Desc: The Terms NoOrderEntryUnlessAuth flag  File: ENTITY  Attr: 28,7
   * @return noOrderEntryUnlessAuth
  **/
  @Schema(description = "Desc: The Terms NoOrderEntryUnlessAuth flag  File: ENTITY  Attr: 28,7")
  public Boolean isNoOrderEntryUnlessAuth() {
    return noOrderEntryUnlessAuth;
  }

  public void setNoOrderEntryUnlessAuth(Boolean noOrderEntryUnlessAuth) {
    this.noOrderEntryUnlessAuth = noOrderEntryUnlessAuth;
  }

  public Terms noPrintShipTicketWhenCreditExceeded(Boolean noPrintShipTicketWhenCreditExceeded) {
    this.noPrintShipTicketWhenCreditExceeded = noPrintShipTicketWhenCreditExceeded;
    return this;
  }

   /**
   * Desc: The Terms NoPrintShipTicketWhenCreditExceeded flag  File: ENTITY  Attr: 28,8
   * @return noPrintShipTicketWhenCreditExceeded
  **/
  @Schema(description = "Desc: The Terms NoPrintShipTicketWhenCreditExceeded flag  File: ENTITY  Attr: 28,8")
  public Boolean isNoPrintShipTicketWhenCreditExceeded() {
    return noPrintShipTicketWhenCreditExceeded;
  }

  public void setNoPrintShipTicketWhenCreditExceeded(Boolean noPrintShipTicketWhenCreditExceeded) {
    this.noPrintShipTicketWhenCreditExceeded = noPrintShipTicketWhenCreditExceeded;
  }

  public Terms noPrintShipTicketUnlessAuth(Boolean noPrintShipTicketUnlessAuth) {
    this.noPrintShipTicketUnlessAuth = noPrintShipTicketUnlessAuth;
    return this;
  }

   /**
   * Desc: The Terms NoPrintShipTicketUnlessAuth flag  File: ENTITY  Attr: 28,9
   * @return noPrintShipTicketUnlessAuth
  **/
  @Schema(description = "Desc: The Terms NoPrintShipTicketUnlessAuth flag  File: ENTITY  Attr: 28,9")
  public Boolean isNoPrintShipTicketUnlessAuth() {
    return noPrintShipTicketUnlessAuth;
  }

  public void setNoPrintShipTicketUnlessAuth(Boolean noPrintShipTicketUnlessAuth) {
    this.noPrintShipTicketUnlessAuth = noPrintShipTicketUnlessAuth;
  }

  public Terms disableCreditControls(Boolean disableCreditControls) {
    this.disableCreditControls = disableCreditControls;
    return this;
  }

   /**
   * Desc: The Terms DisableCreditControls flag  File: ENTITY  Attr: 28,10
   * @return disableCreditControls
  **/
  @Schema(description = "Desc: The Terms DisableCreditControls flag  File: ENTITY  Attr: 28,10")
  public Boolean isDisableCreditControls() {
    return disableCreditControls;
  }

  public void setDisableCreditControls(Boolean disableCreditControls) {
    this.disableCreditControls = disableCreditControls;
  }

  public Terms periods(List<TermsPeriod> periods) {
    this.periods = periods;
    return this;
  }

  public Terms addPeriodsItem(TermsPeriod periodsItem) {
    if (this.periods == null) {
      this.periods = new ArrayList<>();
    }
    this.periods.add(periodsItem);
    return this;
  }

   /**
   * A list of Terms Periods
   * @return periods
  **/
  @Valid
  @Schema(description = "A list of Terms Periods")
  public List<TermsPeriod> getPeriods() {
    return periods;
  }

  public void setPeriods(List<TermsPeriod> periods) {
    this.periods = periods;
  }

  public Terms splitPayments(List<TermsSplitPayment> splitPayments) {
    this.splitPayments = splitPayments;
    return this;
  }

  public Terms addSplitPaymentsItem(TermsSplitPayment splitPaymentsItem) {
    if (this.splitPayments == null) {
      this.splitPayments = new ArrayList<>();
    }
    this.splitPayments.add(splitPaymentsItem);
    return this;
  }

   /**
   * A list of Terms SplitPayments
   * @return splitPayments
  **/
  @Valid
  @Schema(description = "A list of Terms SplitPayments")
  public List<TermsSplitPayment> getSplitPayments() {
    return splitPayments;
  }

  public void setSplitPayments(List<TermsSplitPayment> splitPayments) {
    this.splitPayments = splitPayments;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Terms terms = (Terms) o;
    return Objects.equals(this.updateKey, terms.updateKey) &&
        Objects.equals(this.id, terms.id) &&
        Objects.equals(this.description, terms.description) &&
        Objects.equals(this.customerFlag, terms.customerFlag) &&
        Objects.equals(this.vendorFlag, terms.vendorFlag) &&
        Objects.equals(this.alwaysCod, terms.alwaysCod) &&
        Objects.equals(this.codWhenCreditExceeded, terms.codWhenCreditExceeded) &&
        Objects.equals(this.approvalRequired, terms.approvalRequired) &&
        Objects.equals(this.approvalRequiredWhenCreditExceeded, terms.approvalRequiredWhenCreditExceeded) &&
        Objects.equals(this.noOrderEntry, terms.noOrderEntry) &&
        Objects.equals(this.noOrderEntryWhenCreditExceeded, terms.noOrderEntryWhenCreditExceeded) &&
        Objects.equals(this.noOrderEntryUnlessAuth, terms.noOrderEntryUnlessAuth) &&
        Objects.equals(this.noPrintShipTicketWhenCreditExceeded, terms.noPrintShipTicketWhenCreditExceeded) &&
        Objects.equals(this.noPrintShipTicketUnlessAuth, terms.noPrintShipTicketUnlessAuth) &&
        Objects.equals(this.disableCreditControls, terms.disableCreditControls) &&
        Objects.equals(this.periods, terms.periods) &&
        Objects.equals(this.splitPayments, terms.splitPayments);
  }

  @Override
  public int hashCode() {
    return Objects.hash(updateKey, id, description, customerFlag, vendorFlag, alwaysCod, codWhenCreditExceeded, approvalRequired, approvalRequiredWhenCreditExceeded, noOrderEntry, noOrderEntryWhenCreditExceeded, noOrderEntryUnlessAuth, noPrintShipTicketWhenCreditExceeded, noPrintShipTicketUnlessAuth, disableCreditControls, periods, splitPayments);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Terms {\n");
    
    sb.append("    updateKey: ").append(toIndentedString(updateKey)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    customerFlag: ").append(toIndentedString(customerFlag)).append("\n");
    sb.append("    vendorFlag: ").append(toIndentedString(vendorFlag)).append("\n");
    sb.append("    alwaysCod: ").append(toIndentedString(alwaysCod)).append("\n");
    sb.append("    codWhenCreditExceeded: ").append(toIndentedString(codWhenCreditExceeded)).append("\n");
    sb.append("    approvalRequired: ").append(toIndentedString(approvalRequired)).append("\n");
    sb.append("    approvalRequiredWhenCreditExceeded: ").append(toIndentedString(approvalRequiredWhenCreditExceeded)).append("\n");
    sb.append("    noOrderEntry: ").append(toIndentedString(noOrderEntry)).append("\n");
    sb.append("    noOrderEntryWhenCreditExceeded: ").append(toIndentedString(noOrderEntryWhenCreditExceeded)).append("\n");
    sb.append("    noOrderEntryUnlessAuth: ").append(toIndentedString(noOrderEntryUnlessAuth)).append("\n");
    sb.append("    noPrintShipTicketWhenCreditExceeded: ").append(toIndentedString(noPrintShipTicketWhenCreditExceeded)).append("\n");
    sb.append("    noPrintShipTicketUnlessAuth: ").append(toIndentedString(noPrintShipTicketUnlessAuth)).append("\n");
    sb.append("    disableCreditControls: ").append(toIndentedString(disableCreditControls)).append("\n");
    sb.append("    periods: ").append(toIndentedString(periods)).append("\n");
    sb.append("    splitPayments: ").append(toIndentedString(splitPayments)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
