<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- sent by brant.carthel@dialexa.com-->
<databaseChangeLog logicalFilePath="classpath:changelog-2.xml" xmlns="http://www.liquibase.org/xml/ns/dbchangelog" xmlns:ext="http://www.liquibase.org/xml/ns/dbchangelog-ext" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.4.xsd">
    <changeSet author="brant.carthel@dialexa.com" id="addPermissionsTable">
        <preConditions onFail="MARK_RAN" onFailMessage="table permissions already exists">
            <not>
                <tableExists tableName="permissions"/>
            </not>
        </preConditions>
        <createTable tableName="permissions">
            <column defaultValueComputed="uuid_generate_v4()" name="id" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="pk_permissions_id"/>
            </column>
            <column name="name" type="VARCHAR(200)">
                <constraints nullable="false"/>
            </column>
        </createTable>
        <rollback>
            <dropTable tableName="permissions"/>
        </rollback>
    </changeSet>
    <changeSet author="brant.carthel@dialexa.com" id="addRolePermissionsTable">
        <preConditions onFail="MARK_RAN" onFailMessage="table role_permissions already exists">
            <not>
                <tableExists tableName="role_permissions"/>
            </not>
        </preConditions>
        <createTable tableName="role_permissions">
            <column name="role_id" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="role_permission_pkey"/>
            </column>
            <column name="permission_id" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="role_permission_pkey"/>
            </column>
        </createTable>
        <rollback>
            <dropTable tableName="role_permissions"/>
        </rollback>
    </changeSet>
    <changeSet author="brant.carthel@dialexa.com" id="addRolesTable">
        <preConditions onFail="MARK_RAN" onFailMessage="table roles already exists">
            <not>
                <tableExists tableName="roles"/>
            </not>
        </preConditions>
        <createTable tableName="roles">
            <column defaultValueComputed="uuid_generate_v4()" name="id" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="pk_roles_id"/>
            </column>
            <column name="name" type="VARCHAR(200)">
                <constraints nullable="false"/>
            </column>
            <column name="description" type="VARCHAR(200)">
                <constraints nullable="false"/>
            </column>
        </createTable>
        <rollback>
            <dropTable tableName="roles"/>
        </rollback>
    </changeSet>
    <changeSet author="brant.carthel@dialexa.com" id="addUserRolesTable">
        <preConditions onFail="MARK_RAN" onFailMessage="table user_roles already exists">
            <not>
                <tableExists tableName="user_roles"/>
            </not>
        </preConditions>
        <createTable tableName="user_roles">
            <column name="user_id" type="UUID">
                <constraints nullable="false"/>
            </column>
            <column name="account_id" type="UUID">
                <constraints nullable="false"/>
            </column>
            <column name="role_id" type="UUID">
                <constraints nullable="false"/>
            </column>
        </createTable>
        <rollback>
            <dropTable tableName="user_roles"/>
        </rollback>
    </changeSet>
    <changeSet author="brant.carthel@dialexa.com" id="addFkPermissions">
        <preConditions onFail="MARK_RAN" onFailMessage="foreign key for role_permissions table(permission_id) already added">
            <not>
                <foreignKeyConstraintExists foreignKeyName="fk_permissions"/>
            </not>
        </preConditions>
        <addForeignKeyConstraint baseColumnNames="permission_id" baseTableName="role_permissions" constraintName="fk_permissions" referencedColumnNames="id" referencedTableName="permissions"/>
        <rollback>
            <dropForeignKeyConstraint baseTableName="role_permissions" constraintName="fk_permissions"/>
        </rollback>
    </changeSet>
    <changeSet author="brant.carthel@dialexa.com" id="addFkRolePermissions">
        <preConditions onFail="MARK_RAN" onFailMessage="foreign key for role_permissions table(role_id) already added">
            <not>
                <foreignKeyConstraintExists foreignKeyName="fk_role_id"/>
            </not>
        </preConditions>
        <addForeignKeyConstraint baseColumnNames="role_id" baseTableName="role_permissions" constraintName="fk_role_id" referencedColumnNames="id" referencedTableName="roles"/>
        <rollback>
            <dropForeignKeyConstraint baseTableName="role_permissions" constraintName="fk_role_id"/>
        </rollback>
    </changeSet>
    <changeSet author="brant.carthel@dialexa.com" id="addFkUserRolesRoleId">
        <preConditions onFail="MARK_RAN" onFailMessage="foreign key for user_roles table(role_id) already added">
            <not>
                <foreignKeyConstraintExists foreignKeyName="fk_user_roles_role_id"/>
            </not>
        </preConditions>
        <addForeignKeyConstraint baseColumnNames="role_id" baseTableName="user_roles" constraintName="fk_user_roles_role_id" referencedColumnNames="id" referencedTableName="roles"/>
        <rollback>
            <dropForeignKeyConstraint baseTableName="user_roles" constraintName="fk_user_roles_role_id"/>
        </rollback>
    </changeSet>
    <changeSet author="brant.carthel@dialexa.com" id="addFkUserRolesUserId">
        <preConditions onFail="MARK_RAN" onFailMessage="foreign key for user_roles table(user_id) already added">
            <not>
                <foreignKeyConstraintExists foreignKeyName="fk_user_roles_user_id"/>
            </not>
        </preConditions>
        <addForeignKeyConstraint baseColumnNames="user_id" baseTableName="user_roles" constraintName="fk_user_roles_user_id" referencedColumnNames="id" referencedTableName="users"/>
        <rollback>
            <dropForeignKeyConstraint baseTableName="user_roles" constraintName="fk_user_roles_user_id"/>
        </rollback>
    </changeSet>
    <changeSet author="brant.carthel@dialexa.com" id="addFkUserRolesAccountId">
        <preConditions onFail="MARK_RAN" onFailMessage="foreign key for user_roles table(account_id) already added">
            <not>
                <foreignKeyConstraintExists foreignKeyName="fk_user_roles_account_id"/>
            </not>
        </preConditions>
        <addForeignKeyConstraint baseColumnNames="account_id" baseTableName="user_roles" constraintName="fk_user_roles_account_id" referencedColumnNames="id" referencedTableName="accounts"/>
        <rollback>
            <dropForeignKeyConstraint baseTableName="user_roles" constraintName="fk_user_roles_account_id"/>
        </rollback>
    </changeSet>
    <changeSet author="brant.carthel@dialexa.com" id="addWriteRolesPermission">
        <preConditions onFail="MARK_RAN" onFailMessage="WRITE_ROLES already added">
            <not>
                <sqlCheck expectedResult="1">
                    SELECT COUNT(1) FROM permissions WHERE name = 'WRITE_ROLES'
                </sqlCheck>
            </not>
        </preConditions>
        <insert tableName="permissions">
            <column name="name" value="WRITE_ROLES"/>
        </insert>
        <rollback>
            <delete tableName="permissions">
                <where>name='WRITE_ROLES'</where>
            </delete>
        </rollback>
    </changeSet>
    <changeSet author="brant.carthel@dialexa.com" id="addWritePermissionsPermission">
        <preConditions onFail="MARK_RAN" onFailMessage="WRITE_PERMISSIONS already added">
            <not>
                <sqlCheck expectedResult="1">
                    SELECT COUNT(1) FROM permissions WHERE name = 'WRITE_PERMISSIONS'
                </sqlCheck>
            </not>
        </preConditions>
        <insert tableName="permissions">
            <column name="name" value="WRITE_PERMISSIONS"/>
        </insert>
        <rollback>
            <delete tableName="permissions">
                <where>name='WRITE_PERMISSIONS'</where>
            </delete>
        </rollback>
    </changeSet>
    <changeSet author="brant.carthel@dialexa.com" id="addSuperUserRole">
        <preConditions onFail="MARK_RAN" onFailMessage="SUPER_USER already added">
            <not>
                <sqlCheck expectedResult="1">
                    SELECT COUNT(1) FROM roles WHERE name = 'SUPER_USER'
                </sqlCheck>
            </not>
        </preConditions>
        <insert tableName="roles">
            <column name="name" value="SUPER_USER"/>
            <column name="description" value="able to write roles and permissions"/>
        </insert>
        <rollback>
            <delete tableName="role_permissions">
                <where>role_id=(SELECT id FROM roles WHERE name = 'SUPER_USER')</where>
            </delete>
            <delete tableName="roles">
                <where>name='SUPER_USER'</where>
            </delete>
        </rollback>
    </changeSet>
    <changeSet author="brant.carthel@dialexa.com" id="addSuperUserRolePermissionsWriteRoles">
        <preConditions onFail="MARK_RAN" onFailMessage="SUPER_USER permissions already added for WRITE_ROLES">
            <not>
                <sqlCheck expectedResult="1">
                    SELECT COUNT(1) FROM role_permissions WHERE permission_id = (SELECT id FROM permissions WHERE name = 'WRITE_ROLES') AND role_id = (SELECT id FROM roles WHERE name = 'SUPER_USER')
                </sqlCheck>
            </not>
        </preConditions>
        <insert tableName="role_permissions">
            <column name="role_id" valueComputed="(SELECT id FROM roles WHERE name = 'SUPER_USER')"/>
            <column name="permission_id" valueComputed="(SELECT id FROM permissions WHERE name = 'WRITE_ROLES')"/>
        </insert>
        <rollback>
            <delete tableName="role_permissions">
                <where>role_id = (SELECT id FROM roles WHERE name = 'SUPER_USER') AND permission_id = (SELECT id FROM permissions WHERE name = 'WRITE_ROLES')</where>
            </delete>
        </rollback>
    </changeSet>
    <changeSet author="brant.carthel@dialexa.com" id="addSuperUserRolePermissionsWritePermissions">
        <preConditions onFail="MARK_RAN" onFailMessage="SUPER_USER permissions already added for WRITE_PERMISSIONS">
            <not>
                <sqlCheck expectedResult="1">
                    SELECT COUNT(1) FROM role_permissions WHERE permission_id = (SELECT id FROM permissions WHERE name = 'WRITE_PERMISSIONS') AND role_id = (SELECT id FROM roles WHERE name = 'SUPER_USER')
                </sqlCheck>
            </not>
        </preConditions>
        <insert tableName="role_permissions">
            <column name="role_id" valueComputed="(SELECT id FROM roles WHERE name = 'SUPER_USER')"/>
            <column name="permission_id" valueComputed="(SELECT id FROM permissions WHERE name = 'WRITE_PERMISSIONS')"/>
        </insert>
        <rollback>
            <delete tableName="role_permissions">
                <where>role_id = (SELECT id FROM roles WHERE name = 'SUPER_USER') AND permission_id = (SELECT id FROM permissions WHERE name = 'WRITE_PERMISSIONS')</where>
            </delete>
        </rollback>
    </changeSet>
    <changeSet author="brant.carthel@dialexa.com" id="tag-2-roles-permissions">
        <tagDatabase tag="v2"/>
    </changeSet>
</databaseChangeLog>