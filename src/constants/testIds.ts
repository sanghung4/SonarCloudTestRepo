// component-name-part-iterator
export const ComponentTestIds = {
  Alert: {
    component: 'alert-component',
    closeButton: 'close-button',
  },
  Banner: {
    component: 'banner-component',
    title: 'title',
    rightComponent: 'banner-right-component',
  },
  BottomSheet: {
    component: 'component',
    contentContainer: 'content-container',
    title: 'title',
    subtitle: 'subtitle',
    description: 'description',
    closeButton: 'close-button',
  },
  BranchProgressBar: {
    completionPercentage: 'completion-percentage',
    productsToGo: 'products-to-go',
  },
  ControlKeyboardAccessory: {
    component: 'control-keyboard-accessory-component',
    previous: 'previous-button',
    next: 'next-button',
    done: 'done-button',
  },
  CountInput: {
    component: 'component',
    imageWrapper: 'image-wrapper',
    productDescription: 'product-description',
    productNumber: 'product-number',
    catalogNumber: 'catalog-number',
    input: 'input',
    uom: 'uom',
  },
  CustomButton: {
    component: 'custom-button-component',
  },
  CustomIcon: {
    component: 'custom-icon-component',
    svg: 'custom-icon-svg',
  },
  DrawerContent: {
    component: 'drawer-content-component',
    errorLogButton: 'error-log-button',
    logoutButton: 'logout-button',
    drawerContentFooter: 'drawer-content-footer',
  },
  DropDownBox: {
    component: 'component',
    openToggle: 'open-toggle',
    childrenContainer: 'children-container',
    text: 'text',
  },
  ErrorOverlay: {
    component: 'error-overlay',
    okTryAgainButton: 'ok-try-again-button',
    cancelButton: 'cancel-button',
  },
  FormInput: {
    component: 'form-input-component',
  },
  Image: {
    component: 'image-component',
  },
  Input: {
    component: 'input-component',
  },
  LocationItemsBanner: {
    component: 'location-items-banner-component',
    banner: 'banner',
    recountContainer: 'location-items-banner-recount-container',
    warning: 'warning',
  },
  LocationListItem: {
    location: 'location',
    title: 'title',
    products: 'products',
  },
  Message: {
    component: 'message-component',
    text1: 'message-text1',
    text2: 'message-text2',
    closeIcon: 'message-close-icon',
    toastIcon: 'message-toast-icon',
  },
  NumericKeyboardAccessory: {
    component: 'numeric-keyboard-accessory-component',
    button: 'numeric-keyboard-accessory-button',
  },
  PercentageBar: {
    component: 'component',
    text: 'text',
    progressBar: 'progress-bar',
  },
  Pill: {
    component: 'component',
    text: 'text',
  },
  Product: {
    component: 'product-component',
    description: 'product-description',
    image: 'product-image',
    featuredTitle: 'featured-title',
  },
  ProductDetail: {
    pnField: 'pn-field',
    catField: 'cat-field',
    upcField: 'upc-field',
    ctrlField: 'ctrl-field',
    productOverviewField: 'product-overview-field',
    locationInput: 'location-input',
    qtyInput: 'qty-input',
    uomInput: 'uom-input',
  },
  ProgressBar: {
    component: 'component',
  },
  ScreenLayout: {
    component: 'component',
    pageAction: 'page-action',
  },
  ScrollContent: {
    component: 'scroll-content',
    banner: 'banner',
    dropDownBox: 'drop-down-box',
    message: 'message',
    tabFilter: 'tab-filter',
    list: 'item-list',
  },
  SearchBar: {
    component: 'component',
  },
  SearchInput: {
    component: 'search-input-component',
    input: 'search-input-input',
  },
  SearchResultItem: {
    productName: 'product-name',
    pn: 'pn',
    cat: 'cat',
    upc: 'upc',
  },
  Section: {
    component: 'section-component',
  },
  StaticContent: {
    component: 'component',
    children: 'children',
    banner: 'banner',
    dropDownBox: 'drop-down-box',
    message: 'message',
    tabFilter: 'tab-filter',
  },
  SVG: {
    component: 'svg',
    logo: 'logo-icon',
    accountIcon: 'account-icon',
    searchIcon: 'search-icon',
    editIcon: 'edit-icon',
  },
  TabFilters: {
    component: 'component',
    tabButton: 'tab-button',
  },
  UserActivity: {
    component: 'user-activity-component',
  },
};

// screen-name-component-iterator
export const ScreenTestIds = {
  AddProduct: {
    productIdCheckbox: 'add-product-product-id-checkbox',
    showingSearchResults: 'showing-search-results',
    showMoreButton: 'add-product-show-more',
    searchResultItem: 'add-product-search-item',
    searchBar: 'add-product-search-bar',
    searchButton: 'add-product-search-button',
  },
  AddProductDetail: {
    product: 'add-product-detail-screen',
    noProduct: 'add-product-detail-no-product-screen',
    productImage: "add-product-image",
    productDetailQty: 'add-product-detail-qty',
    textName: 'add-product-detail-name',
    textPN: 'add-product-detail-PN',
    textCAT: 'add-product-detail-CAT',
    textUPC: 'add-product-detail-UPC',
    buttonBack: 'add-product-detail-back',
    buttonAdd: 'add-product-detail-add',
  },
  Alert: {
    component: 'alert-component',
    closeIcon: 'alert-close',
    action: 'alert-action',
    title: 'alert-title',
    description: 'alert-description',
    error: 'alert-error',
  },
  BranchItems: {
    countLocation: 'branch-summaries-count-location',
    progressBar: 'branch-summaries-progress-bar',
    pill: 'branch-summaries-pill',
  },
  BranchPage: {
    screen: 'branch-page',
    component: 'branch-page-component',
    input: 'branch-page-input',
    screenLayout: 'branch-page-screen-layout',
    staticContent: 'branch-page-static-content',
    tabFilter: 'branch-page-tab-filter',
    locationList: 'branch-page-location-list',
    remainingLocations: 'branch-page-remaining-locations',
    progressBar: 'branch-page-progress-bar',
    progressBarText: 'branch-page-progress-bar-text',
  },
  CountLocationItems: {
    countLocation: 'count-locations-count-location',
    totalProducts: 'count-locations-total-products',
    pill: 'count-locations-pill',
  },
  CountLocations: {
    screen: 'count-locations',
  },
  CreateWriteIn: {
    form: 'create-writein-form',
    submitButton: 'create-writein-submit-button',
  },
  FoundProduct: {
    createAWriteInbutton: 'create-a-write-in',
    addAProduct: 'add-a-product',
    searchItemName: 'search-item-name',
  },
  GetStarted: {
    screenLayout: 'get-started-screen-layout',
    navTileCountLocations: 'get-started-nav-tile-count-locations',
    navTileScanLocation: 'get-started-nav-tile-scan-location',
    navTileManualEntry: 'get-started-nav-tile-manual-entry',
    navTileBranchSummaries: 'get-started-nav-tile-branch-summaries',
    navTileWriteIns: 'get-started-nav-tile-write-ins',
    navTileVariance: 'get-started-nav-tile-variance',
    navTileVarianceCountLocations:
      'get-started-nav-tile-variance-count-locations',
  },
  LocationItemDetail: {
    screenLayout: 'location-item-detail-screen-layout',
    banner: 'location-item-detail-banner',
    scrollContent: 'location-item-detail-scroll-content',
    component: 'location-item-detail',
  },
  LocationItems: {
    screen: 'location-items',
    scrollContent: 'location-items-scroll-content',
    foundAProduct: 'location-items-found-a-product',
    countInput: 'location-items-count-input',
    tabFilter: 'location-items-tab-filter',
    percentageBar: 'location-items-percentage-bar',
    keyboardController: 'location-items-keyboard-controller',
    errorToast: 'location-items-error-toast',
    itemsList: 'location-items-list',
  },
  Login: {
    screen: 'login-screen',
    testingUsernameInput: 'login-testing-username-input',
    testingPasswordInput: 'login-testing-password-input',
    testingLoginButton: 'login-testing-login-button',
  },
  ManualLocationEntry: {
    screenLayout: 'manual-location-entry-screen-layout',
    locationInput: 'manual-location-entry-location-input',
    scanLocationUsingCameraButton: 'scan-location-using-camera-button',
    submitLocationCodeButton: 'submit-location-code-button',
  },
  Navigator: {
    navigator: 'navigator',
  },
  Options: {
    screen: 'options',
  },
  Overlay: {
    alert: 'overlay-alert',
    loading: 'overlay-loading',
    sortyBy: 'overlay-sort-by',
  },
  ScanLocation: {
    screenLayout: 'screen-layout',
    pencilIcon: 'scan-location-pencil-icon',
    bottomSheet: 'scan-location-bottom-sheet',
  },
  Toast: {
    warn: 'toast-warn',
    error: 'toast-error',
    message: 'toast-message',
    success: 'toast-success',
  },
  VarianceLocation: {
    screen: 'variance-location',
    countInput: 'variance-location-count-input',
    tabFilter: 'variance-location-tab-filter-tab-button',
    percentageBarText: 'variance-location-percentage-bar-text',
    progressBar: 'variance-location-progress-bar',
  },
  VarianceLocationList: {
    screenLayout: 'variance-location-list-screen-layout',
    location: 'variance-location-list-location',
    locationList: 'variance-location-list-location-list',
    screen: 'variance-location-list',
    searchBar: 'variance-location-list-search-bar',
    locationsToGo: 'variance-location-list-remaining-locations',
    noLocations: 'variance-location-list-no-locations-text',
  },
  VarianceSummary: {
    screenLayout: 'variance-summary-screen-layout',
    scrollContent: 'variance-summary-scroll-content',
    table: 'variance-summary-table',
    tableTitle: 'variance-summary-table-title',
    tableRowTitle: 'variance-summary-table-row-title',
    tableRowValue: 'variance-summary-table-row-value',
    refreshButton: 'variance-summary-refresh-button',
    recountAllButton: 'variance-summary-recount-all-button',
  },
  VerifyCount: {
    screenLayout: 'verify-count',
    branchInput: 'verify-count-branch-input',
    countInput: 'verify-count-count-input',
  },
  WriteIn: {
    screenLayout: 'write-in-screen-layout',
    locationId: 'location-id',
    description: 'description',
    createdBy: 'created-by',
    quantity: 'quantity',
    resolvedStatus: 'resolved-status',
  },
  WriteInDetails: {
    screen: 'writein-detail',
    screenlayout: 'write-in-screen-layout',
    editIcon: 'edit-icon',
    form: 'writein-detail-form',
  },
  WriteIns: {
    screenLayout: 'write-ins-screen-layout',
    screen: 'write-ins',
    searchIcon: 'write-ins-search-icon',
    searchInput: 'search-input',
    unresolvedTab: 'unresolved-tab',
    resolvedTab: 'resolved-tab',
  },
  UpdateWriteIn: {
    screenLayout: 'update-write-in-screen-layout',
    scrollContent: 'update-write-in-scroll-content',
    screen: 'update-writein',
    form: 'update-writein-form',
  },
};
